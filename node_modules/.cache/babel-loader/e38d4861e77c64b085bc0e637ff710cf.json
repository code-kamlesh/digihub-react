{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { parseCellCoordinates } from './coordinates';\nimport { getDimensions } from '../xml/xlsx';\nexport default function parseDimensions(sheet) {\n  var dimensions = getDimensions(sheet);\n\n  if (dimensions) {\n    dimensions = dimensions.split(':').map(parseCellCoordinates).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          row = _ref2[0],\n          column = _ref2[1];\n\n      return {\n        row: row,\n        column: column\n      };\n    }); // When there's only a single cell on a sheet\n    // there can sometimes be just \"A1\" for the dimensions string.\n\n    if (dimensions.length === 1) {\n      dimensions = [dimensions[0], dimensions[0]];\n    }\n\n    return dimensions;\n  }\n}","map":{"version":3,"sources":["../../source/read/parseDimensions.js"],"names":["dimensions","getDimensions","row","column"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,oBAAA,QAAA,eAAA;AAIA,SAAA,aAAA,QAAA,aAAA;AAIA,eAAe,SAAA,eAAA,CAAA,KAAA,EAAgC;AAC7C,MAAIA,UAAU,GAAGC,aAAa,CAA9B,KAA8B,CAA9B;;AACA,MAAA,UAAA,EAAgB;AACdD,IAAAA,UAAU,GAAG,UAAU,CAAV,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,oBAAA,EAAA,GAAA,CAAoD,UAAA,IAAA,EAAA;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,UAAEE,GAAF,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,UAAOC,MAAP,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,aAAoB;AACnFD,QAAAA,GAAG,EADgF,GAAA;AAEnFC,QAAAA,MAAM,EAANA;AAFmF,OAApB;AADnD,KACD,CAAbH,CADc,CAKd;AACA;;AACA,QAAIA,UAAU,CAAVA,MAAAA,KAAJ,CAAA,EAA6B;AAC3BA,MAAAA,UAAU,GAAG,CAACA,UAAU,CAAX,CAAW,CAAX,EAAgBA,UAAU,CAAvCA,CAAuC,CAA1B,CAAbA;AACD;;AACD,WAAA,UAAA;AACD;AACF","sourcesContent":["import {\r\n  parseCellCoordinates\r\n} from './coordinates'\r\n\r\nimport {\r\n  getDimensions\r\n} from '../xml/xlsx'\r\n\r\nexport default function parseDimensions(sheet) {\r\n  let dimensions = getDimensions(sheet)\r\n  if (dimensions) {\r\n    dimensions = dimensions.split(':').map(parseCellCoordinates).map(([row, column]) => ({\r\n      row,\r\n      column\r\n    }))\r\n    // When there's only a single cell on a sheet\r\n    // there can sometimes be just \"A1\" for the dimensions string.\r\n    if (dimensions.length === 1) {\r\n      dimensions = [dimensions[0], dimensions[0]]\r\n    }\r\n    return dimensions\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}