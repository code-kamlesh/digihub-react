{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\History.js\";\nimport React, { Component } from 'react';\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { fetchBulkData, fetchStudentFile } from './../util/api';\n\nconst XLSX = require('xlsx');\n\nexport default class History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disable: false,\n      metaData: [],\n      studentData: []\n    };\n  }\n\n  async loadData() {\n    const response = await fetchBulkData().then(jsondata => {\n      var metaData = [];\n      let result = JSON.parse(jsondata.data);\n      var arrData = {};\n      console.log(\"Bulk Meta Data : \", result);\n      result[0].forEach((element, id) => {\n        arrData = element; // console.log(element)\n\n        metaData = [...metaData, {\n          \"regId\": arrData.regId,\n          \"uploadFileName\": arrData.uploadFileName,\n          \"centerName\": arrData.centerName,\n          \"records\": arrData.records,\n          \"uploadDate\": arrData.uploadDate\n        }];\n      });\n      this.setState({\n        metaData\n      });\n      console.log(this.state.metaData);\n    });\n  } // Download the data\n\n\n  downloadFile(e, x) {\n    let studentData = [];\n    const regId = e;\n    const file_name = x; // console.log(x)\n\n    var data = {};\n    fetchStudentFile(regId).then(jsondata => {\n      let res = JSON.parse(jsondata.data);\n      res[0].forEach(element => {\n        console.log(element);\n        data = element;\n        studentData = [...studentData, {\n          \"Reg_No\": data.regId,\n          \"First_Name\": data.firstName,\n          \"Middle_Name\": data.middleName,\n          \"Last_Name\": data.lastName,\n          \"Aadhar_Number\": data.aadharNo,\n          \"DOB\": data.dob,\n          \"Gender\": data.gender,\n          \"Highest_Qualification\": data.highestQualification,\n          \"Passing_Year\": data.passingYear,\n          \"Address_Line_1\": data.addressLine1,\n          \"Village\": data.villageName,\n          \"Religion\": data.religion,\n          \"District\": data.district,\n          \"State\": data.state,\n          \"PINCODE\": data.pincode,\n          \"Category\": data.category,\n          \"Primary_Contact_Number\": data.primaryContactNumber,\n          \"Primary_Mail_ID\": data.primaryEmailId,\n          \"Created_by\": data.createdBy,\n          \"created\": data.createdOn,\n          \"Updated_by\": data.updatedBy,\n          \"Student_ID\": data.studentId,\n          \"Eng_ID\": data.engagementId,\n          \"Status\": data.status,\n          \"Reason\": data.Reason\n        }];\n      }); // console.log(\"Student data in bulk : \",res)\n\n      const workSheet = XLSX.utils.json_to_sheet(res);\n      const workBook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workBook, workSheet, file_name); // Genrarting buffer if there is large amount of data\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"buffer\"\n      }); // Binary String\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"binary\"\n      });\n      const x = XLSX.writeFile(workBook, file_name);\n      console.log(\"File : \", x);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      onClick: this.loadData.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 14\n      }\n    }, \"Click to Load Data\")), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      style: {\n        width: '80%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, \"Reg Id\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"File Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"Center Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, \"Records\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \"Upload Date\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, this.state.metaData.map((dataValue, id) => /*#__PURE__*/React.createElement(TableRow, {\n      id: \"tablerow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 23\n      }\n    }, dataValue.regId), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }\n    }, dataValue.uploadFileName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 23\n      }\n    }, dataValue.centerName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 23\n      }\n    }, dataValue.records), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 23\n      }\n    }, dataValue.uploadDate), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.downloadFile(dataValue.regId, dataValue.uploadFileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 35\n      }\n    }, \" Download \"))))))));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/History.js"],"names":["React","Component","Checkbox","InputLabel","Input","Grid","Button","Table","TableBody","TableCell","TableHead","TableRow","fetchBulkData","fetchStudentFile","XLSX","require","History","constructor","props","state","disable","metaData","studentData","loadData","response","then","jsondata","result","JSON","parse","data","arrData","console","log","forEach","element","id","regId","uploadFileName","centerName","records","uploadDate","setState","downloadFile","e","x","file_name","res","firstName","middleName","lastName","aadharNo","dob","gender","highestQualification","passingYear","addressLine1","villageName","religion","district","pincode","category","primaryContactNumber","primaryEmailId","createdBy","createdOn","updatedBy","studentId","engagementId","status","Reason","workSheet","utils","json_to_sheet","workBook","book_new","book_append_sheet","write","bookType","type","writeFile","render","width","bind","map","dataValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {fetchBulkData,fetchStudentFile} from './../util/api';\r\n\r\nconst XLSX = require('xlsx')\r\nexport default class History extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            disable:false,\r\n            metaData:[],\r\n            studentData:[],\r\n        }\r\n        \r\n    }\r\nasync loadData(){\r\n       const response = await fetchBulkData().then((jsondata) => {\r\n            var metaData=[]\r\n            let result = JSON.parse(jsondata.data);\r\n            var arrData = {}\r\n            console.log(\"Bulk Meta Data : \",result)\r\n            result[0].forEach((element ,id)=> {\r\n                arrData=element\r\n                // console.log(element)\r\n                metaData=[\r\n                    ...metaData,\r\n                    {\r\n                        \"regId\":arrData.regId,\r\n                        \"uploadFileName\": arrData.uploadFileName,\r\n                        \"centerName\": arrData.centerName,\r\n                        \"records\":arrData.records,\r\n                        \"uploadDate\":arrData.uploadDate\r\n                    }]\r\n            });\r\n           this.setState({metaData})\r\n            console.log(this.state.metaData)\r\n        })\r\n    }\r\n\r\n    // Download the data\r\n    downloadFile(e,x){\r\n        let studentData=[]\r\n            const regId= e\r\n            const file_name = x\r\n            // console.log(x)\r\n            var data={}\r\n            fetchStudentFile(regId).then((jsondata)=>{\r\n                let res = JSON.parse(jsondata.data)\r\n                res[0].forEach(element=>{\r\n                    console.log(element)\r\n                    data= element  \r\n                    studentData=[\r\n                        ...studentData,{\r\n                            \"Reg_No\":data.regId,\r\n                            \"First_Name\":data.firstName,\r\n                            \"Middle_Name\": data.middleName,\r\n                            \"Last_Name\": data.lastName,\r\n                            \"Aadhar_Number\": data.aadharNo,\r\n                            \"DOB\": data.dob,\r\n                            \"Gender\":data.gender,\r\n                            \"Highest_Qualification\":data.highestQualification,\r\n                            \"Passing_Year\": data.passingYear,\r\n                            \"Address_Line_1\": data.addressLine1,\r\n                            \"Village\": data.villageName,\r\n                            \"Religion\":data.religion,\r\n                            \"District\":data.district,\r\n                            \"State\": data.state,\r\n                            \"PINCODE\": data.pincode,\r\n                            \"Category\": data.category,\r\n                            \"Primary_Contact_Number\": data.primaryContactNumber,\r\n                            \"Primary_Mail_ID\": data.primaryEmailId,\r\n                           \"Created_by\": data.createdBy,\r\n                           \"created\":data.createdOn,\r\n                            \"Updated_by\":data.updatedBy,\r\n                            \"Student_ID\": data.studentId,\r\n                            \"Eng_ID\":data.engagementId,\r\n                            \"Status\":data.status,\r\n                            \"Reason\":data.Reason,\r\n                    }]\r\n                })\r\n                // console.log(\"Student data in bulk : \",res)\r\n                const workSheet = XLSX.utils.json_to_sheet(res)\r\n                const workBook = XLSX.utils.book_new()\r\n\r\n                XLSX.utils.book_append_sheet(workBook,workSheet,file_name)\r\n// Genrarting buffer if there is large amount of data\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\r\n\r\n                // Binary String\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\r\n\r\n                const x = XLSX.writeFile(workBook,file_name)\r\n                console.log(\"File : \",x)\r\n            })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ width: '100%' }}>\r\n\r\n            <Grid container  justify=\"flex-end\" alignItems=\"flex-end\">\r\n\r\n             <Button type=\"submit\" color=\"primary\"  onClick={this.loadData.bind(this)}>\r\n               Click to Load Data\r\n             </Button>\r\n             </Grid>\r\n\r\n            <Grid>\r\n             <Table aria-label=\"simple table\"  style={{ width: '80%'}}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Reg Id</TableCell>\r\n                <TableCell>File Name</TableCell>\r\n                <TableCell>Center Name</TableCell>\r\n                <TableCell>Records</TableCell>\r\n                <TableCell>Upload Date</TableCell>\r\n\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {this.state.metaData.map((dataValue, id) => (\r\n                    <TableRow id=\"tablerow\">\r\n                      <TableCell>{dataValue.regId}</TableCell>\r\n                      <TableCell>{dataValue.uploadFileName}</TableCell>\r\n                      <TableCell>{dataValue.centerName}</TableCell>\r\n                      <TableCell>{dataValue.records}</TableCell>\r\n                      <TableCell>{dataValue.uploadDate}</TableCell>\r\n                      <TableCell>{<Button variant=\"contained\" color=\"primary\" onClick={() => this.downloadFile(dataValue.regId,dataValue.uploadFileName)} > Download </Button>}</TableCell>\r\n                    </TableRow>))}\r\n            </TableBody>\r\n           </Table>\r\n\r\n           </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}