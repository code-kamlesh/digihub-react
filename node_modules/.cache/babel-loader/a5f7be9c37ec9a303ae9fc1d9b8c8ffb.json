{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\PlacementDetailsSubPlaced.js\";\nimport React from 'react';\nimport './../App.css';\nimport './../assets/css/login-style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport UserContext from '../components/GolbalContext';\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport AddressForPlacement from \"./AddressForPlacement\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { savePlacementDetails, fetchUserDocumentsByUserIdAndTypeOfDocument, fectAddressDetailsByAddressID, fetchAddressDetailsBasedOnPincode, fetchPlacementDetailsByEngagementId, fetchAllCenter, saveAddressDetails, fetchEmployerDetails } from '../util/api';\nimport { isNotEmpty, isNotZero, validateEmail, validateContact } from './../util/validation';\nimport underscore from 'underscore';\nconst OfferStatus = [{\n  value: 'Accepted',\n  label: 'Accepted'\n}, {\n  value: 'Rejected',\n  label: 'Rejected'\n}];\nconst yesOrNo = [{\n  value: 'Yes',\n  label: 'Yes'\n}, {\n  value: 'No',\n  label: 'No'\n}];\nconst domains = [{\n  value: 'Agriculture',\n  label: 'Agriculture'\n}, {\n  value: 'Apparel, made ups and Furnishing',\n  label: 'Apparel, made ups and Furnishing'\n}, {\n  value: 'Automotive',\n  label: 'Automotive'\n}, {\n  value: 'Beauty and Wellness',\n  label: 'Beauty and Wellness'\n}, {\n  value: 'BFSI',\n  label: 'BFSI'\n}, {\n  value: 'Construction',\n  label: 'Construction'\n}, {\n  value: 'Electronics',\n  label: 'Electronics'\n}, {\n  value: 'Furniture and Fittings',\n  label: 'Furniture and Fittings'\n}, {\n  value: 'Healthcare',\n  label: 'Healthcare'\n}, {\n  value: 'IT-ITeS',\n  label: 'IT-ITeS'\n}, {\n  value: 'Management, Entrepreneurship and Preofessional Courses',\n  label: 'Management, Entrepreneurship and Preofessional Courses'\n}, {\n  value: 'Retail',\n  label: 'Retail'\n}, {\n  value: 'Green Jobs',\n  label: 'Green Jobs'\n}, {\n  value: 'Telecom',\n  label: 'Telecom'\n}, {\n  value: 'Tourism and Hospitality',\n  label: 'Tourism and Hospitality'\n}];\nconst employmentType = [{\n  value: 'FTE/ Onroll',\n  label: 'FTE/ Onroll'\n}, {\n  value: 'Contract/ Offroll',\n  label: 'Contract/ Offroll'\n}, {\n  value: '3rd Party',\n  label: '3rd Party'\n}];\nconst notInterestedReason = [{\n  value: 'Marriage',\n  label: 'Marriage'\n}, {\n  value: 'Migration',\n  label: 'Migration'\n}, {\n  value: 'Less Salary',\n  label: 'Less Salary'\n}, {\n  value: 'Others',\n  label: 'Others'\n}];\n\nclass PlacementDetailsSubPlaced extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitAddressDetails = () => {\n      saveAddressDetails(JSON.stringify(this.state.address)).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data);\n        this.setState({\n          'addressId': jsonobjects[0].id\n        });\n      });\n    };\n\n    this.validateFormData = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'empId':\n          errors.empId = isNotEmpty(value);\n          break;\n\n        case 'domainName':\n          errors.domainName = isNotEmpty(value);\n          break;\n\n        case 'spocName':\n          errors.spocName = isNotEmpty(value);\n          break;\n\n        case 'spocEmailId':\n          errors.spocEmailId = validateEmail('secondaryEmailId', value);\n          break;\n\n        case 'spocPhoneNumber':\n          errors.spocPhoneNumber = validateContact(name, value);\n          break;\n\n        case 'monthlyGrossSal':\n          errors.monthlyGrossSal = isNotZero(value);\n          break;\n\n        case 'accommodationProvided':\n          errors.accommodationProvided = isNotEmpty(value);\n          break;\n\n        case 'foodProvided':\n          errors.foodProvided = isNotEmpty(value);\n          break;\n\n        case 'offerDate':\n          errors.offerDate = isNotEmpty(value);\n          break;\n\n        case 'offerStatus':\n          errors.offerStatus = isNotEmpty(value);\n          break;\n\n        case 'joined':\n          errors.joined = isNotEmpty(value);\n          break;\n\n        case 'reasonForNoOpportunity':\n          errors.reasonForNoOpportunity = isNotEmpty(value);\n          break;\n\n        case 'otherReasonInBrief':\n          errors.otherReasonInBrief = isNotEmpty(value);\n          break;\n\n        case 'reason':\n          errors.reason = isNotEmpty(value);\n          break;\n\n        case 'reasonForRejection':\n          errors.reasonForRejection = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validateAddress = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'pincode':\n          errors.pincode = isNotEmpty(value);\n          break;\n\n        case 'villageName':\n          errors.village = isNotEmpty(value);\n          break;\n\n        case 'cityName':\n          errors.cityName = isNotEmpty(value);\n          break;\n\n        case 'state':\n          errors.state = isNotEmpty(value);\n          break;\n\n        case 'district':\n          errors.district = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.handleAddressInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        address: { ...this.state.address,\n          [name]: value\n        }\n      });\n      this.validateAddress(name, value);\n    };\n\n    this.handleAddressSelectChange = (selectname, event) => {\n      this.setState({\n        address: { ...this.state.address,\n          [selectname]: event\n        }\n      });\n      this.validateAddress(selectname, event);\n    };\n\n    this.getPincodeData = (selectname, event) => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        address: { ...this.state.address,\n          [name]: value\n        }\n      });\n      this.validateAddress(name, value);\n\n      if (value.length == 6) {\n        fetchAddressDetailsBasedOnPincode(value).then(jsondata => {\n          let jsonobjects = JSON.parse(jsondata.data);\n          let taluk = [];\n          let pincode = [];\n          let cityVillage = [];\n          let states = [];\n          let district = [];\n          this.formData.village.length = 0;\n          this.formData.pincodes.length = 0;\n          this.formData.city.length = 0;\n          this.formData.state.length = 0;\n          this.formData.district.length = 0;\n          jsonobjects.map(item => {\n            cityVillage.push({\n              label: item.cityVillage,\n              value: item.id\n            });\n          });\n          cityVillage = underscore.uniq(cityVillage, true, \"label\");\n          cityVillage.map(item => {\n            this.formData.village.push({\n              label: item.label,\n              value: item.label.toString()\n            });\n          });\n          this.setState({\n            village: this.formData.village\n          });\n          jsonobjects.map(item => {\n            taluk.push({\n              label: item.taluk,\n              value: item.id\n            });\n          });\n          taluk = underscore.uniq(taluk, true, \"label\");\n          taluk.map(item => {\n            this.formData.city.push({\n              label: item.label,\n              value: item.label.toString()\n            });\n          });\n          this.setState({\n            city: this.formData.city\n          });\n          jsonobjects.map(item => {\n            states.push({\n              label: item.state,\n              value: item.id\n            });\n          });\n          states = underscore.uniq(states, true, \"label\");\n          states.map(item => {\n            this.formData.state.push({\n              label: item.label,\n              value: item.value.toString()\n            });\n          });\n          this.setState({\n            state: this.formData.state\n          }, () => {\n            /*console.log(this.state.state)*/\n          });\n          jsonobjects.map(item => {\n            district.push({\n              label: item.district,\n              value: item.id\n            });\n          });\n          district = underscore.uniq(district, true, \"label\");\n          district.map(item => {\n            this.formData.district.push({\n              label: item.label,\n              value: item.value.toString()\n            });\n          });\n          this.setState({\n            district: this.formData.district\n          });\n        });\n      }\n    };\n\n    this.mySubmitHandler = event => {\n      event.preventDefault();\n      var errorsExist = true;\n      Object.values(this.state.errors).forEach(errorValue => {\n        if (errorValue.length > 0) {\n          console.log(\"error length ==> \", errorValue.length);\n          alert('Please fill all the fields before proceeding ');\n          errorValue.length > 0 && (errorsExist = false);\n        }\n      });\n\n      if (errorsExist) {\n        this.submitAddressDetails();\n      } else {\n        console.log('one or more errors are in the form please check the errors before submitting the form!');\n      }\n    };\n\n    this.submitPlacedAddressDetails = () => {\n      saveAddressDetails(JSON.stringify(this.state.address)).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data); //alert(jsonobjects[0].id);\n\n        this.set.state({\n          placementData: { ...this.state.placementData,\n            'addressId': jsonobjects[0].id\n          }\n        }, () => {\n          this.savePlacedFormDetails();\n        });\n      });\n    };\n\n    this.savePlacedFormDetails = () => {\n      savePlacementDetails(this.state.placementData).then(jsondata => {\n        if (jsondata.appError == null || jsondata.status == 'success') {\n          let jsonobjects = JSON.parse(jsondata.data);\n          console.log(jsonobjects);\n        }\n      });\n    };\n\n    this.handleSelectChange = (selectname, event) => {\n      this.validateFormData(selectname, event);\n      this.setState({\n        placementData: { ...this.state.placementData,\n          [selectname]: event\n        }\n      });\n      console.log(\"value ====> \", this.state);\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      let value = target.value;\n      const name = target.name;\n      this.validateFormData(name, value);\n      this.setState({\n        placementData: { ...this.state.placementData,\n          [name]: value\n        }\n      });\n      console.log(\"value ====> \", this.state);\n    };\n\n    console.log(props.props);\n    /*State starts here*/\n\n    this.state = {\n      placementData: {\n        empId: '',\n        domainName: '',\n        employmentType: '',\n        thirdPartyEmp: '',\n        spocName: '',\n        spocPhoneNumber: '',\n        spocEmailId: '',\n        monthlyGrossSal: '',\n        accommodationProvided: '',\n        foodProvided: '',\n        offerDate: '',\n        offerStatus: '',\n        joined: '',\n        reasonJobRejected: '',\n        otherReasonInBrief: '',\n\n        /*Address here*/\n        joiningPin: '',\n        joiningCity: '',\n        addressId: '',\n\n        /*General data*/\n        createdBy: UserContext.userid,\n        updatedBy: UserContext.userid,\n        engagementId: props.props.engagementId,\n        dbUserId: props.props.id,\n        isActive: \"Y\",\n        interviewStatus: 'Placed'\n      },\n      errors: {\n        /*Address here*/\n        joiningPin: '',\n        joiningCity: '',\n        addressId: '',\n        pincode: '',\n        village: '',\n        state: '',\n        cityName: '',\n        district: '',\n\n        /*Placement data here*/\n        empId: '',\n        domainName: '',\n        employmentType: '',\n        thirdPartyEmp: '',\n        spocName: '',\n        spocPhoneNumber: '',\n        spocEmailId: '',\n        monthlyGrossSal: '',\n        accommodationProvided: '',\n        foodProvided: '',\n        offerDate: '',\n        offerStatus: '',\n        joined: '',\n        reasonJobRejected: '',\n        otherReasonInBrief: ''\n      },\n      addressId: '',\n      address: {\n        entityId: props.props.engagementId,\n        createdBy: UserContext.userid,\n        'isActive': 'Y',\n        'type': 'PD',\n        'entityType': 'S',\n        pincode: \"\",\n        addressLine1: \"\",\n        addressLine2: \"\",\n        district: \"\",\n        state: \"\",\n        cityName: \"\",\n        villageName: \"\"\n      },\n      employersDetails: [],\n      info: [],\n      documents: [],\n      message: ''\n    };\n    this.formData = {\n      state: [],\n      district: [],\n      pincodes: [],\n      city: [],\n      village: []\n    };\n    /*fetch placement details for user if present from earlier*/\n\n    if (props.props.id != null && props.props.id != undefined) {\n      console.log('here');\n      this.fetchPlacementdetailsFouUser(props.props.engagementId);\n    } else {\n      console.log('No Employment Data for the user with selected option found!');\n    }\n    /*fetch employer details*/\n\n\n    fetchEmployerDetails('Active Partner', '%Placement Partner%').then(jsondata => {\n      console.log(\"employer data ===> \", jsondata);\n\n      if (jsondata.appError == null) {\n        let jsonObjects = JSON.parse(jsondata.data);\n        jsonObjects.map(item => {\n          this.state.employersDetails.push({\n            label: item.accountName,\n            value: item.id\n          });\n        });\n      }\n    });\n    /*fetch list of documents*/\n\n    fetchUserDocumentsByUserIdAndTypeOfDocument(props.props.id, 'PD').then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data);\n      console.log(jsonobjects);\n      this.setState({\n        documents: [...this.state.documents, ...jsonobjects]\n      });\n    });\n  }\n\n  fetchPlacementdetailsFouUser(engagementId) {\n    let placementInfo = []; // console.log('point here')\n\n    fetchPlacementDetailsByEngagementId(engagementId).then(jsondata => {\n      // alert(JSON.stringify(jsondata));\n      let placementDetailsOfUser = JSON.parse(jsondata.data);\n\n      for (var i = 0; i < placementDetailsOfUser.length; i++) {\n        if (placementDetailsOfUser[i].interviewStatus == \"Placed\") {\n          var _placementDetailsOfUs, _placementDetailsOfUs2, _placementDetailsOfUs3, _placementDetailsOfUs4, _placementDetailsOfUs5, _placementDetailsOfUs6, _placementDetailsOfUs7, _placementDetailsOfUs8, _placementDetailsOfUs9, _placementDetailsOfUs10, _placementDetailsOfUs11, _placementDetailsOfUs12, _placementDetailsOfUs13;\n\n          console.log(placementDetailsOfUser[i]);\n          this.state.placementData.empId = (_placementDetailsOfUs = placementDetailsOfUser[i]) === null || _placementDetailsOfUs === void 0 ? void 0 : _placementDetailsOfUs.empId;\n          this.state.placementData.domainName = (_placementDetailsOfUs2 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs2 === void 0 ? void 0 : _placementDetailsOfUs2.domainName; // this.state.placementData.employmentType = placementDetailsOfUser[i]?.employmentType;\n          // this.state.placementData.thirdPartyEmp = placementDetailsOfUser[i]?.thirdPartyEmp;\n\n          this.state.placementData.spocName = (_placementDetailsOfUs3 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs3 === void 0 ? void 0 : _placementDetailsOfUs3.spocName;\n          this.state.placementData.spocPhoneNumber = (_placementDetailsOfUs4 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs4 === void 0 ? void 0 : _placementDetailsOfUs4.spocPhoneNumber;\n          this.state.placementData.spocEmailId = (_placementDetailsOfUs5 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs5 === void 0 ? void 0 : _placementDetailsOfUs5.spocEmailId;\n          this.state.placementData.monthlyGrossSal = (_placementDetailsOfUs6 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs6 === void 0 ? void 0 : _placementDetailsOfUs6.monthlyGrossSal;\n          this.state.placementData.accommodationProvided = (_placementDetailsOfUs7 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs7 === void 0 ? void 0 : _placementDetailsOfUs7.accommodationProvided;\n          this.state.placementData.foodProvided = (_placementDetailsOfUs8 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs8 === void 0 ? void 0 : _placementDetailsOfUs8.foodProvided;\n          this.state.placementData.offerDate = (_placementDetailsOfUs9 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs9 === void 0 ? void 0 : _placementDetailsOfUs9.offerDate;\n          this.state.placementData.offerStatus = (_placementDetailsOfUs10 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs10 === void 0 ? void 0 : _placementDetailsOfUs10.offerStatus;\n          this.state.placementData.joined = (_placementDetailsOfUs11 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs11 === void 0 ? void 0 : _placementDetailsOfUs11.joined;\n          this.state.placementData.reasonJobRejected = (_placementDetailsOfUs12 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs12 === void 0 ? void 0 : _placementDetailsOfUs12.reasonJobRejected;\n          this.state.placementData.otherReasonInBrief = (_placementDetailsOfUs13 = placementDetailsOfUser[i]) === null || _placementDetailsOfUs13 === void 0 ? void 0 : _placementDetailsOfUs13.otherReasonInBrief;\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.mySubmitHandler,\n      method: \"post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      id: \"hideData\",\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"empId\",\n      id: \"empId\",\n      label: \"Employer Name\",\n      onChange: this.handleSelectChange.bind(this, 'empId'),\n      value: this.state.placementData.empId || '',\n      helperText: this.state.errors.empId,\n      error: this.state.errors.empId === '' ? false : true,\n      options: this.state.employersDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"domainName\",\n      id: \"domainName\",\n      label: \"Domain\",\n      onChange: this.handleSelectChange.bind(this, 'domainName'),\n      value: this.state.placementData.domainName || '',\n      helperText: this.state.errors.domainName,\n      error: this.state.errors.domainName === '' ? false : true,\n      options: domains,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"employmentType\",\n      id: \"employmentType\",\n      label: \"Employment Type\",\n      onChange: this.handleSelectChange.bind(this, 'employmentType'),\n      value: this.state.placementData.employmentType || '' // helperText={this.state.errors.domainName}\n      // error={this.state.errors.domainName === '' ? false : true}\n      ,\n      options: employmentType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 33\n      }\n    })), this.state.placementData.employmentType == '3rd Party' ? /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"thirdPartyEmp\",\n      id: \"thirdPartyEmp\",\n      label: \"3rd Party Employers\",\n      onChange: this.handleSelectChange.bind(this, 'thirdPartyEmp'),\n      value: this.state.placementData.thirdPartyEmp || '' // helperText={this.state.errors.thirdPartyEmp}\n      // error={this.state.errors.thirdPartyEmp === '' ? false : true}\n      ,\n      options: this.state.employersDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 33\n      }\n    })) : /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      id: \"interviewRemark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"text\",\n      name: \"spocName\",\n      id: \"spocName\",\n      label: \"Employer SPOC Name\",\n      onChange: this.handleInputChange,\n      value: this.state.placementData.spocName || '',\n      helperText: this.state.errors.spocName,\n      error: this.state.errors.spocName === '' ? false : true,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      id: \"interviewRemark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"number\",\n      name: \"spocPhoneNumber\",\n      id: \"spocPhoneNumber\",\n      label: \"SPOC contact No.\",\n      onInput: e => {\n        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 10);\n      },\n      onChange: this.handleInputChange,\n      value: this.state.placementData.spocPhoneNumber || '',\n      helperText: this.state.errors.spocPhoneNumber,\n      error: this.state.errors.spocPhoneNumber === '' ? false : true,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      id: \"interviewRemark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"text\",\n      name: \"spocEmailId\",\n      id: \"spocEmailId\",\n      label: \"SPOC email Id\",\n      onChange: this.handleInputChange,\n      value: this.state.placementData.spocEmailId || '',\n      helperText: this.state.errors.spocEmailId,\n      error: this.state.errors.spocEmailId === '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      items: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      id: \"annualSal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"number\",\n      name: \"monthlyGrossSal\",\n      id: \"monthlyGrossSal\",\n      label: \"Monthly Gross Salary\",\n      helperText: this.state.errors.monthlyGrossSal,\n      error: this.state.errors.monthlyGrossSal === '' ? false : true,\n      onChange: this.handleInputChange,\n      value: this.state.placementData.monthlyGrossSal || '',\n      onInput: e => {\n        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 6);\n      },\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"accommodationProvided\",\n      id: \"accommodationProvided\",\n      label: \"Accommodation Provided\",\n      onChange: this.handleSelectChange.bind(this, 'accommodationProvided'),\n      value: this.state.placementData.accommodationProvided || '',\n      options: yesOrNo,\n      helperText: this.state.errors.accommodationProvided,\n      error: this.state.errors.accommodationProvided === '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"foodProvided\",\n      id: \"foodProvided\",\n      label: \"Food Provided\",\n      onChange: this.handleSelectChange.bind(this, 'foodProvided'),\n      value: this.state.placementData.foodProvided || '',\n      options: yesOrNo,\n      helperText: this.state.errors.foodProvided,\n      error: this.state.errors.foodProvided === '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      id: \"offerDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"date\",\n      name: \"offerDate\",\n      id: \"offerDate\",\n      onChange: this.handleInputChange,\n      label: \"Offer Date\",\n      value: this.state.placementData.offerDate || '',\n      helperText: this.state.errors.offerDate,\n      error: this.state.errors.offerDate === '' ? false : true,\n      type: \"date\",\n      inputProps: {\n        max: new Date().toISOString().slice(0, 10)\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"offerStatus\",\n      id: \"offerStatus\",\n      label: \"Offer Status\",\n      onChange: this.handleSelectChange.bind(this, 'offerStatus'),\n      value: this.state.placementData.offerStatus || '',\n      options: OfferStatus,\n      helperText: this.state.errors.offerStatus,\n      error: this.state.errors.offerStatus === '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 29\n      }\n    }, this.state.errors.additionalDocuments || ''), this.state.placementData.offerStatus == \"Rejected\" ? /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"reasonJobRejected\",\n      id: \"reasonJobRejected\",\n      label: \"Reason For Job Rejection\",\n      onChange: this.handleSelectChange.bind(this, 'reasonJobRejected'),\n      value: this.state.placementData.reason || '',\n      options: notInterestedReason,\n      helperText: this.state.errors.reason,\n      error: this.state.errors.reason === '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 37\n      }\n    })) : this.state.placementData.offerStatus == \"Accepted\" && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"joined\",\n      id: \"joined\",\n      label: \"Joined\",\n      onChange: this.handleSelectChange.bind(this, 'joined'),\n      value: this.state.placementData.joined || '',\n      options: yesOrNo,\n      helperText: this.state.errors.joined,\n      error: this.state.errors.joined === '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 37\n      }\n    })), this.state.placementData.reasonJobRejected == \"Others\" && this.state.placementData.offerStatus == \"Rejected\" && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 144\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"text\",\n      name: \"otherReasonInBrief\",\n      id: \"otherReasonInBrief\",\n      label: \"Please state the reason for Rejection\",\n      helperText: this.state.errors.otherReasonInBrief,\n      error: this.state.errors.otherReasonInBrief === '' ? false : true,\n      onChange: this.handleInputChange,\n      value: this.state.placementData.otherReasonInBrief || '',\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 35\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 56\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 37\n      }\n    }, \"Job Location\"))), /*#__PURE__*/React.createElement(AddressForPlacement, {\n      pincodeName: \"pincode\",\n      pincodeId: \"pincode\",\n      pincodeOnChange: this.getPincodeData.bind(this, 'pincode'),\n      pincodeValue: this.state.address.pincode || '',\n      pincodeHelperText: this.state.errors.pincode,\n      pincodeError: this.state.errors.pincode == '' ? false : true,\n      villageName: \"villageName\",\n      villageId: \"villageName\",\n      villageInputValue: this.handleAddressSelectChange.bind(this, 'villageName'),\n      villageData: this.state.village,\n      villageValue: this.state.address.villageName || '',\n      villageHelperText: this.state.errors.village,\n      villageError: this.state.errors.village == '' ? false : true,\n      cityName: \"cityName\",\n      cityId: \"cityName\",\n      cityValue: this.state.address.cityName || '',\n      cityData: this.state.city,\n      cityInputValue: this.handleAddressSelectChange.bind(this, 'cityName'),\n      cityNameHelperText: this.state.errors.cityName,\n      cityNameError: this.state.errors.cityName == '' ? false : true,\n      stateName: \"state\",\n      stateId: \"state\",\n      stateData: this.state.state,\n      stateValue: this.state.address.state || '',\n      stateInputValue: this.handleAddressSelectChange.bind(this, 'state'),\n      stateHelperText: this.state.errors.state,\n      stateError: this.state.errors.state == '' ? false : true,\n      districtName: \"district\",\n      districtId: \"district\",\n      districtValue: this.state.address.district || '',\n      districtData: this.state.district,\n      districtInputValue: this.handleAddressSelectChange.bind(this, 'district'),\n      districtHelperText: this.state.errors.district,\n      districtError: this.state.errors.district == '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox // onChange={this.handleCheckboxChange}\n      , {\n        name: \"documentsUploaded\",\n        id: \"documentsUploaded\",\n        color: \"primary\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 37\n        }\n      }),\n      label: \"I have uploaded appropriate Evidence\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 29\n      }\n    }, this.state.errors.documentsUploaded || ''), /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox // onChange={this.handleCheckboxChange}\n      , {\n        name: \"authenticationAndConsent\",\n        id: \"authenticationAndConsent\",\n        color: \"primary\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 37\n        }\n      }),\n      label: \"Have gone though the placement evidence and Authentic for both data and evidence\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 29\n      }\n    }, this.state.errors.authenticationAndConsent || '')), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      id: \"btn\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      size: \"small\",\n      color: \"primary\" // disabled={(this.state.buttonStatus == \"Enrolled\") ? false : true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 29\n      }\n    }, \"Save\")))));\n  }\n\n}\n\nexport default PlacementDetailsSubPlaced;","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/PlacementDetailsSubPlaced.js"],"names":["React","SingleSelect","UserContext","FormControl","InputLabel","FormControlLabel","Input","Grid","RadioGroup","Radio","TextField","Button","AddressForPlacement","Checkbox","savePlacementDetails","fetchUserDocumentsByUserIdAndTypeOfDocument","fectAddressDetailsByAddressID","fetchAddressDetailsBasedOnPincode","fetchPlacementDetailsByEngagementId","fetchAllCenter","saveAddressDetails","fetchEmployerDetails","isNotEmpty","isNotZero","validateEmail","validateContact","underscore","OfferStatus","value","label","yesOrNo","domains","employmentType","notInterestedReason","PlacementDetailsSubPlaced","Component","constructor","props","submitAddressDetails","JSON","stringify","state","address","then","jsondata","jsonobjects","parse","data","setState","id","validateFormData","name","errors","empId","domainName","spocName","spocEmailId","spocPhoneNumber","monthlyGrossSal","accommodationProvided","foodProvided","offerDate","offerStatus","joined","reasonForNoOpportunity","otherReasonInBrief","reason","reasonForRejection","validateAddress","pincode","village","cityName","district","handleAddressInputChange","event","target","handleAddressSelectChange","selectname","getPincodeData","length","taluk","cityVillage","states","formData","pincodes","city","map","item","push","uniq","toString","mySubmitHandler","preventDefault","errorsExist","Object","values","forEach","errorValue","console","log","alert","submitPlacedAddressDetails","set","placementData","savePlacedFormDetails","appError","status","handleSelectChange","handleInputChange","thirdPartyEmp","reasonJobRejected","joiningPin","joiningCity","addressId","createdBy","userid","updatedBy","engagementId","dbUserId","isActive","interviewStatus","entityId","addressLine1","addressLine2","villageName","employersDetails","info","documents","message","undefined","fetchPlacementdetailsFouUser","jsonObjects","accountName","placementInfo","placementDetailsOfUser","i","render","width","bind","e","Math","max","parseInt","slice","Date","toISOString","shrink","color","additionalDocuments","fontWeight","documentsUploaded","authenticationAndConsent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\nimport './../assets/css/login-style.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport UserContext from '../components/GolbalContext'\r\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddressForPlacement from \"./AddressForPlacement\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { savePlacementDetails, fetchUserDocumentsByUserIdAndTypeOfDocument, fectAddressDetailsByAddressID, fetchAddressDetailsBasedOnPincode, fetchPlacementDetailsByEngagementId, fetchAllCenter, saveAddressDetails, fetchEmployerDetails, } from '../util/api';\r\nimport { isNotEmpty, isNotZero, validateEmail, validateContact } from './../util/validation';\r\nimport underscore from 'underscore';\r\n\r\n\r\nconst OfferStatus = [\r\n    { value: 'Accepted', label: 'Accepted' },\r\n    { value: 'Rejected', label: 'Rejected' }\r\n]\r\nconst yesOrNo = [\r\n    { value: 'Yes', label: 'Yes' },\r\n    { value: 'No', label: 'No' }\r\n]\r\nconst domains = [\r\n    { value: 'Agriculture', label: 'Agriculture' },\r\n    { value: 'Apparel, made ups and Furnishing', label: 'Apparel, made ups and Furnishing' },\r\n    { value: 'Automotive', label: 'Automotive' },\r\n    { value: 'Beauty and Wellness', label: 'Beauty and Wellness' },\r\n    { value: 'BFSI', label: 'BFSI' },\r\n    { value: 'Construction', label: 'Construction' },\r\n    { value: 'Electronics', label: 'Electronics' },\r\n    { value: 'Furniture and Fittings', label: 'Furniture and Fittings' },\r\n    { value: 'Healthcare', label: 'Healthcare' },\r\n    { value: 'IT-ITeS', label: 'IT-ITeS' },\r\n    { value: 'Management, Entrepreneurship and Preofessional Courses', label: 'Management, Entrepreneurship and Preofessional Courses' },\r\n    { value: 'Retail', label: 'Retail' },\r\n    { value: 'Green Jobs', label: 'Green Jobs' },\r\n    { value: 'Telecom', label: 'Telecom' },\r\n    { value: 'Tourism and Hospitality', label: 'Tourism and Hospitality' }\r\n]\r\nconst employmentType = [\r\n    { value: 'FTE/ Onroll', label: 'FTE/ Onroll' },\r\n    { value: 'Contract/ Offroll', label: 'Contract/ Offroll' },\r\n    { value: '3rd Party', label: '3rd Party' }\r\n]\r\nconst notInterestedReason = [\r\n    { value: 'Marriage', label: 'Marriage' },\r\n    { value: 'Migration', label: 'Migration' },\r\n    { value: 'Less Salary', label: 'Less Salary' },\r\n    { value: 'Others', label: 'Others' }\r\n]\r\n\r\n\r\nclass PlacementDetailsSubPlaced extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props.props)\r\n        /*State starts here*/\r\n        this.state = {\r\n            placementData: {\r\n                empId: '', domainName: '', employmentType: '', thirdPartyEmp: '', spocName: '',\r\n                spocPhoneNumber: '', spocEmailId: '', monthlyGrossSal: '', accommodationProvided: '',\r\n                foodProvided: '', offerDate: '', offerStatus: '', joined: '', reasonJobRejected: '',\r\n                otherReasonInBrief: '',\r\n                /*Address here*/\r\n                joiningPin: '', joiningCity: '', addressId: '',\r\n                /*General data*/\r\n                createdBy: UserContext.userid, updatedBy: UserContext.userid, engagementId: props.props.engagementId,\r\n                dbUserId: props.props.id, isActive: \"Y\", interviewStatus: 'Placed',\r\n            },\r\n            errors: {\r\n                /*Address here*/\r\n                joiningPin: '', joiningCity: '', addressId: '', pincode: '', village: '', state: '',\r\n                cityName: '', district: '',\r\n                /*Placement data here*/\r\n                empId: '', domainName: '', employmentType: '', thirdPartyEmp: '',\r\n                spocName: '', spocPhoneNumber: '', spocEmailId: '', monthlyGrossSal: '',\r\n                accommodationProvided: '', foodProvided: '', offerDate: '', offerStatus: '',\r\n                joined: '', reasonJobRejected: '', otherReasonInBrief: '',\r\n            },\r\n            addressId: '',\r\n            address: {\r\n                entityId: props.props.engagementId, createdBy: UserContext.userid, 'isActive': 'Y', 'type': 'PD',\r\n                'entityType': 'S', pincode: \"\", addressLine1: \"\", addressLine2: \"\", district: \"\", state: \"\",\r\n                cityName: \"\", villageName: \"\"\r\n            },\r\n            employersDetails: [],\r\n            info: [],\r\n            documents: [],\r\n            message: '',\r\n        };\r\n        this.formData = { state: [], district: [], pincodes: [], city: [], village: [] };\r\n        /*fetch placement details for user if present from earlier*/\r\n        if (props.props.id != null && props.props.id != undefined) {\r\n            console.log('here')\r\n            this.fetchPlacementdetailsFouUser(props.props.engagementId);\r\n        }\r\n        else {\r\n            console.log('No Employment Data for the user with selected option found!')\r\n        }\r\n\r\n        /*fetch employer details*/\r\n        fetchEmployerDetails('Active Partner', '%Placement Partner%').then((jsondata) => {\r\n            console.log(\"employer data ===> \", jsondata)\r\n            if (jsondata.appError == null) {\r\n                let jsonObjects = JSON.parse(jsondata.data);\r\n                jsonObjects.map(item => {\r\n                    this.state.employersDetails.push({ label: item.accountName, value: item.id })\r\n                })\r\n            }\r\n        });\r\n\r\n        /*fetch list of documents*/\r\n        fetchUserDocumentsByUserIdAndTypeOfDocument(props.props.id, 'PD').then((jsondata) => {\r\n            let jsonobjects = JSON.parse(jsondata.data);\r\n            console.log(jsonobjects)\r\n            this.setState({ documents: [...this.state.documents, ...jsonobjects] })\r\n        });\r\n    }\r\n\r\n    submitAddressDetails = () => {\r\n        saveAddressDetails(JSON.stringify(this.state.address)).then((jsondata) => {\r\n            let jsonobjects = JSON.parse(jsondata.data);\r\n            this.setState({\r\n                'addressId': jsonobjects[0].id\r\n            });\r\n        });\r\n    }\r\n\r\n    validateFormData = (name, value) => {\r\n        let errors = this.state.errors;\r\n        switch (name) {\r\n            case 'empId': errors.empId = isNotEmpty(value);\r\n                break;\r\n            case 'domainName': errors.domainName = isNotEmpty(value);\r\n                break;\r\n            case 'spocName': errors.spocName = isNotEmpty(value);\r\n                break;\r\n            case 'spocEmailId': errors.spocEmailId = validateEmail('secondaryEmailId', value);\r\n                break;\r\n            case 'spocPhoneNumber': errors.spocPhoneNumber = validateContact(name, value);\r\n                break;\r\n            case 'monthlyGrossSal': errors.monthlyGrossSal = isNotZero(value);\r\n                break;\r\n            case 'accommodationProvided': errors.accommodationProvided = isNotEmpty(value);\r\n                break;\r\n            case 'foodProvided': errors.foodProvided = isNotEmpty(value);\r\n                break;\r\n            case 'offerDate': errors.offerDate = isNotEmpty(value);\r\n                break;\r\n            case 'offerStatus': errors.offerStatus = isNotEmpty(value);\r\n                break;\r\n            case 'joined': errors.joined = isNotEmpty(value);\r\n                break;\r\n            case 'reasonForNoOpportunity': errors.reasonForNoOpportunity = isNotEmpty(value);\r\n                break;\r\n            case 'otherReasonInBrief': errors.otherReasonInBrief = isNotEmpty(value);\r\n                break;\r\n            case 'reason': errors.reason = isNotEmpty(value);\r\n                break;\r\n            case 'reasonForRejection': errors.reasonForRejection = isNotEmpty(value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({ errors });\r\n    }\r\n\r\n    validateAddress = (name, value) => {\r\n        let errors = this.state.errors;\r\n        switch (name) {\r\n            case 'pincode': errors.pincode = isNotEmpty(value);\r\n                break;\r\n            case 'villageName': errors.village = isNotEmpty(value);\r\n                break;\r\n            case 'cityName': errors.cityName = isNotEmpty(value);\r\n                break;\r\n            case 'state': errors.state = isNotEmpty(value);\r\n                break;\r\n            case 'district': errors.district = isNotEmpty(value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({ errors });\r\n    }\r\n\r\n    handleAddressInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            address: {\r\n                ...this.state.address,\r\n                [name]: value\r\n            }\r\n        })\r\n        this.validateAddress(name, value);\r\n    }\r\n\r\n\r\n    handleAddressSelectChange = (selectname, event) => {\r\n        this.setState({\r\n            address: {\r\n                ...this.state.address,\r\n                [selectname]: event\r\n            }\r\n        })\r\n        this.validateAddress(selectname, event);\r\n    }\r\n\r\n\r\n    getPincodeData = (selectname, event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            address: {\r\n                ...this.state.address,\r\n                [name]: value\r\n            }\r\n        })\r\n        this.validateAddress(name, value);\r\n        if (value.length == 6) {\r\n            fetchAddressDetailsBasedOnPincode(value).then((jsondata) => {\r\n                let jsonobjects = JSON.parse(jsondata.data);\r\n                let taluk = [];\r\n                let pincode = [];\r\n                let cityVillage = [];\r\n                let states = [];\r\n                let district = [];\r\n\r\n                this.formData.village.length = 0;\r\n                this.formData.pincodes.length = 0;\r\n                this.formData.city.length = 0;\r\n                this.formData.state.length = 0;\r\n                this.formData.district.length = 0;\r\n\r\n                jsonobjects.map(item => { cityVillage.push({ label: item.cityVillage, value: item.id }) });\r\n                cityVillage = underscore.uniq(cityVillage, true, \"label\");\r\n                cityVillage.map(item => {\r\n                    this.formData.village.push({\r\n                        label: item.label, value: (item.label).toString()\r\n                    })\r\n                });\r\n                this.setState({ village: this.formData.village });\r\n\r\n                jsonobjects.map(item => { taluk.push({ label: item.taluk, value: item.id }) });\r\n                taluk = underscore.uniq(taluk, true, \"label\");\r\n                taluk.map(item => {\r\n                    this.formData.city.push({\r\n                        label: item.label, value: (item.label).toString()\r\n                    })\r\n                });\r\n                this.setState({ city: this.formData.city });\r\n\r\n                jsonobjects.map(item => { states.push({ label: item.state, value: item.id }) });\r\n                states = underscore.uniq(states, true, \"label\");\r\n                states.map(item => {\r\n                    this.formData.state.push({\r\n                        label: item.label, value: (item.value).toString()\r\n                    })\r\n                });\r\n                this.setState({ state: this.formData.state }, () => { /*console.log(this.state.state)*/ });\r\n\r\n                jsonobjects.map(item => { district.push({ label: item.district, value: item.id }) });\r\n                district = underscore.uniq(district, true, \"label\");\r\n                district.map(item => {\r\n                    this.formData.district.push({\r\n                        label: item.label, value: (item.value).toString()\r\n                    })\r\n                });\r\n                this.setState({ district: this.formData.district });\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    mySubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        var errorsExist = true;\r\n        Object.values(this.state.errors).forEach(\r\n            (errorValue) => {\r\n                if(errorValue.length>0){\r\n                    console.log(\"error length ==> \", errorValue.length)\r\n                    alert('Please fill all the fields before proceeding ')\r\n                    errorValue.length > 0 && (errorsExist = false)\r\n                }\r\n            }\r\n        );\r\n        if(errorsExist) {\r\n            this.submitAddressDetails();\r\n        }\r\n        else{\r\n            console.log('one or more errors are in the form please check the errors before submitting the form!')\r\n        }\r\n    }\r\n\r\n    submitPlacedAddressDetails = () => {\r\n        saveAddressDetails(JSON.stringify(this.state.address)).then((jsondata) => {\r\n            let jsonobjects = JSON.parse(jsondata.data);\r\n            //alert(jsonobjects[0].id);\r\n            this.set.state({\r\n              placementData: {\r\n                ...this.state.placementData,\r\n                'addressId': jsonobjects[0].id\r\n              }\r\n            }, () => {this.savePlacedFormDetails();});\r\n        })\r\n    }\r\n\r\n    savePlacedFormDetails = () => {\r\n        savePlacementDetails(this.state.placementData).then((jsondata) => {\r\n            if (jsondata.appError == null || jsondata.status == 'success') {\r\n                let jsonobjects = JSON.parse(jsondata.data);\r\n                console.log(jsonobjects)\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchPlacementdetailsFouUser(engagementId) {\r\n        let placementInfo = [];\r\n        // console.log('point here')\r\n        fetchPlacementDetailsByEngagementId(engagementId).then((jsondata) => {\r\n            // alert(JSON.stringify(jsondata));\r\n            let placementDetailsOfUser = JSON.parse(jsondata.data);\r\n            for (var i = 0; i < placementDetailsOfUser.length; i++) {\r\n                if (placementDetailsOfUser[i].interviewStatus == \"Placed\") {\r\n                    console.log(placementDetailsOfUser[i])\r\n                    this.state.placementData.empId = placementDetailsOfUser[i]?.empId;\r\n                    this.state.placementData.domainName = placementDetailsOfUser[i]?.domainName;\r\n                    // this.state.placementData.employmentType = placementDetailsOfUser[i]?.employmentType;\r\n                    // this.state.placementData.thirdPartyEmp = placementDetailsOfUser[i]?.thirdPartyEmp;\r\n                    this.state.placementData.spocName = placementDetailsOfUser[i]?.spocName;\r\n                    this.state.placementData.spocPhoneNumber = placementDetailsOfUser[i]?.spocPhoneNumber;\r\n                    this.state.placementData.spocEmailId = placementDetailsOfUser[i]?.spocEmailId;\r\n                    this.state.placementData.monthlyGrossSal = placementDetailsOfUser[i]?.monthlyGrossSal;\r\n                    this.state.placementData.accommodationProvided = placementDetailsOfUser[i]?.accommodationProvided;\r\n                    this.state.placementData.foodProvided = placementDetailsOfUser[i]?.foodProvided;\r\n                    this.state.placementData.offerDate = placementDetailsOfUser[i]?.offerDate;\r\n                    this.state.placementData.offerStatus = placementDetailsOfUser[i]?.offerStatus;\r\n                    this.state.placementData.joined = placementDetailsOfUser[i]?.joined;\r\n                    this.state.placementData.reasonJobRejected = placementDetailsOfUser[i]?.reasonJobRejected;\r\n                    this.state.placementData.otherReasonInBrief = placementDetailsOfUser[i]?.otherReasonInBrief;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    handleSelectChange = (selectname, event) => {\r\n        this.validateFormData(selectname, event);\r\n        this.setState({\r\n            placementData: {\r\n                ...this.state.placementData,\r\n                [selectname]: event\r\n            }\r\n        });\r\n        console.log(\"value ====> \", this.state)\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        let value = target.value;\r\n        const name = target.name;\r\n        this.validateFormData(name, value);\r\n        this.setState({\r\n            placementData: {\r\n                ...this.state.placementData,\r\n                [name]: value\r\n            }\r\n        });\r\n        console.log(\"value ====> \", this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div style={{ width: '100%' }}>\r\n                    <form onSubmit={this.mySubmitHandler} method=\"post\">\r\n                        <Grid id=\"hideData\" container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                            </Grid>\r\n                            <br></br>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"empId\" id=\"empId\" label=\"Employer Name\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'empId')}\r\n                                    value={this.state.placementData.empId || ''}\r\n                                    helperText={this.state.errors.empId}\r\n                                    error={this.state.errors.empId === '' ? false : true}\r\n                                    options={this.state.employersDetails} \r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"domainName\" id=\"domainName\" label=\"Domain\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'domainName')}\r\n                                    value={this.state.placementData.domainName || ''}\r\n                                    helperText={this.state.errors.domainName}\r\n                                    error={this.state.errors.domainName === '' ? false : true}\r\n                                    options={domains} />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"employmentType\" id=\"employmentType\" label=\"Employment Type\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'employmentType')}\r\n                                    value={this.state.placementData.employmentType || ''}\r\n                                    // helperText={this.state.errors.domainName}\r\n                                    // error={this.state.errors.domainName === '' ? false : true}\r\n                                    options={employmentType} />\r\n                            </Grid>\r\n\r\n                            {(this.state.placementData.employmentType == '3rd Party') ? <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"thirdPartyEmp\" id=\"thirdPartyEmp\" label=\"3rd Party Employers\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'thirdPartyEmp')}\r\n                                    value={this.state.placementData.thirdPartyEmp || ''}\r\n                                    // helperText={this.state.errors.thirdPartyEmp}\r\n                                    // error={this.state.errors.thirdPartyEmp === '' ? false : true}\r\n                                    options={this.state.employersDetails} \r\n                                />\r\n                            </Grid> : <Grid item xs={12} sm={3}></Grid>}\r\n\r\n                            <Grid item xs={12} sm={3} id=\"interviewRemark\">\r\n                                <FormControl>\r\n                                    <TextField type=\"text\" name=\"spocName\" id=\"spocName\"\r\n                                        label=\"Employer SPOC Name\"\r\n                                        onChange={this.handleInputChange}\r\n                                        value={this.state.placementData.spocName || ''}\r\n                                        helperText={this.state.errors.spocName}\r\n                                        error={this.state.errors.spocName === '' ? false : true} required\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3} id=\"interviewRemark\">\r\n                                <FormControl>\r\n                                    <TextField type=\"number\" name=\"spocPhoneNumber\" id=\"spocPhoneNumber\"\r\n                                        label=\"SPOC contact No.\"\r\n                                        onInput={(e) => {\r\n                                            e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 10)\r\n                                        }}\r\n                                        onChange={this.handleInputChange}\r\n                                        value={this.state.placementData.spocPhoneNumber || ''}\r\n                                        helperText={this.state.errors.spocPhoneNumber}\r\n                                        error={this.state.errors.spocPhoneNumber === '' ? false : true} required\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3} id=\"interviewRemark\">\r\n                                <FormControl>\r\n                                    <TextField type=\"text\" name=\"spocEmailId\" id=\"spocEmailId\"\r\n                                        label=\"SPOC email Id\"\r\n                                        onChange={this.handleInputChange}\r\n                                        value={this.state.placementData.spocEmailId || ''}\r\n                                        helperText={this.state.errors.spocEmailId}\r\n                                        error={this.state.errors.spocEmailId === '' ? false : true}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid items xs={12} sm={3} />\r\n\r\n                            <Grid item xs={12} sm={3} id=\"annualSal\">\r\n                                <FormControl>\r\n                                    <TextField type=\"number\" name=\"monthlyGrossSal\" id=\"monthlyGrossSal\"\r\n                                        label=\"Monthly Gross Salary\"\r\n                                        helperText={this.state.errors.monthlyGrossSal}\r\n                                        error={this.state.errors.monthlyGrossSal === '' ? false : true}\r\n                                        onChange={this.handleInputChange}\r\n                                        value={this.state.placementData.monthlyGrossSal || ''}\r\n                                        onInput={(e) => {\r\n                                            e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 6)\r\n                                        }} required                                    \r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"accommodationProvided\" id=\"accommodationProvided\" label=\"Accommodation Provided\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'accommodationProvided')}\r\n                                    value={this.state.placementData.accommodationProvided || ''}\r\n                                    options={yesOrNo}\r\n                                    helperText={this.state.errors.accommodationProvided}\r\n                                    error={this.state.errors.accommodationProvided === '' ? false : true} \r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"foodProvided\" id=\"foodProvided\" label=\"Food Provided\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'foodProvided')}\r\n                                    value={this.state.placementData.foodProvided || ''}\r\n                                    options={yesOrNo}\r\n                                    helperText={this.state.errors.foodProvided}\r\n                                    error={this.state.errors.foodProvided === '' ? false : true} \r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3} id=\"offerDate\">\r\n                                <TextField id=\"date\" name=\"offerDate\" id=\"offerDate\" onChange={this.handleInputChange}\r\n                                    label=\"Offer Date\" value={this.state.placementData.offerDate || ''}\r\n                                    helperText={this.state.errors.offerDate}\r\n                                    error={this.state.errors.offerDate === '' ? false : true}\r\n                                    type=\"date\"\r\n                                    inputProps={{ max: new Date().toISOString().slice(0, 10) }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}  required/>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3}>\r\n                                <SingleSelect name=\"offerStatus\" id=\"offerStatus\" label=\"Offer Status\"\r\n                                    onChange={this.handleSelectChange.bind(this, 'offerStatus')}\r\n                                    value={this.state.placementData.offerStatus || ''}\r\n                                    options={OfferStatus}\r\n                                    helperText={this.state.errors.offerStatus}\r\n                                    error={this.state.errors.offerStatus === '' ? false : true} \r\n                                />\r\n                            </Grid>\r\n                            <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                                {(this.state.errors.additionalDocuments || '')}\r\n                            </InputLabel>\r\n\r\n                            {(this.state.placementData.offerStatus == \"Rejected\") ?\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <SingleSelect name=\"reasonJobRejected\" id=\"reasonJobRejected\" label=\"Reason For Job Rejection\"\r\n                                        onChange={this.handleSelectChange.bind(this, 'reasonJobRejected')}\r\n                                        value={this.state.placementData.reason || ''}\r\n                                        options={notInterestedReason}\r\n                                        helperText={this.state.errors.reason}\r\n                                        error={this.state.errors.reason === '' ? false : true}\r\n                                    />\r\n                                </Grid> :\r\n                                (this.state.placementData.offerStatus == \"Accepted\") && <Grid item xs={12} sm={3}>\r\n                                    <SingleSelect name=\"joined\" id=\"joined\" label=\"Joined\"\r\n                                        onChange={this.handleSelectChange.bind(this, 'joined')}\r\n                                        value={this.state.placementData.joined || ''}\r\n                                        options={yesOrNo}\r\n                                        helperText={this.state.errors.joined}\r\n                                        error={this.state.errors.joined === '' ? false : true}\r\n                                    />\r\n                                </Grid>}\r\n\r\n                            {(this.state.placementData.reasonJobRejected == \"Others\" && this.state.placementData.offerStatus == \"Rejected\") && <Grid item xs={12} sm={6}>\r\n                                <FormControl>\r\n                                    <TextField type=\"text\" name=\"otherReasonInBrief\" id=\"otherReasonInBrief\" label=\"Please state the reason for Rejection\"\r\n                                        helperText={this.state.errors.otherReasonInBrief}\r\n                                        error={this.state.errors.otherReasonInBrief === '' ? false : true}\r\n                                        onChange={this.handleInputChange}\r\n                                        value={this.state.placementData.otherReasonInBrief || ''} required\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>}\r\n\r\n                            <br /><br /><br />\r\n                            {/* <PlacementDetailsAddress parentCallback={this.callbackFunction}/><Grid container spacing={2}> */}\r\n                            <Grid item xs={12}></Grid> <Grid item xs={12}></Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControl>\r\n                                    <h6 style={{ fontWeight: 'bold' }}>Job Location</h6>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <AddressForPlacement\r\n                                pincodeName=\"pincode\" pincodeId=\"pincode\"\r\n                                pincodeOnChange={this.getPincodeData.bind(this, 'pincode')}\r\n                                pincodeValue={this.state.address.pincode || ''}\r\n                                pincodeHelperText={this.state.errors.pincode} pincodeError={this.state.errors.pincode == '' ? false : true}\r\n                                villageName=\"villageName\" villageId=\"villageName\"\r\n                                villageInputValue={this.handleAddressSelectChange.bind(this, 'villageName')}\r\n                                villageData={this.state.village} villageValue={this.state.address.villageName || ''}\r\n                                villageHelperText={this.state.errors.village} villageError={this.state.errors.village == '' ? false : true}\r\n                                cityName=\"cityName\" cityId=\"cityName\" cityValue={this.state.address.cityName || ''}\r\n                                cityData={this.state.city}\r\n                                cityInputValue={this.handleAddressSelectChange.bind(this, 'cityName')}\r\n                                cityNameHelperText={this.state.errors.cityName} cityNameError={this.state.errors.cityName == '' ? false : true}\r\n                                stateName=\"state\" stateId=\"state\" stateData={this.state.state}\r\n                                stateValue={this.state.address.state || ''}\r\n                                stateInputValue={this.handleAddressSelectChange.bind(this, 'state')}\r\n                                stateHelperText={this.state.errors.state} stateError={this.state.errors.state == '' ? false : true}\r\n                                districtName=\"district\" districtId=\"district\" districtValue={this.state.address.district || ''}\r\n                                districtData={this.state.district}\r\n                                districtInputValue={this.handleAddressSelectChange.bind(this, 'district')}\r\n                                districtHelperText={this.state.errors.district} districtError={this.state.errors.district == '' ? false : true}\r\n                            />\r\n\r\n\r\n                        </Grid>\r\n                        <br /><br />\r\n                        <Grid item xs={12} sm={6} >\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        // onChange={this.handleCheckboxChange}\r\n                                        name=\"documentsUploaded\" id=\"documentsUploaded\"\r\n                                        color=\"primary\" required\r\n                                    />\r\n                                }\r\n                                label=\"I have uploaded appropriate Evidence\"\r\n                            />\r\n                            <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                                {(this.state.errors.documentsUploaded || '')}\r\n                            </InputLabel>\r\n\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        // onChange={this.handleCheckboxChange}\r\n                                        name=\"authenticationAndConsent\" id=\"authenticationAndConsent\"\r\n                                        color=\"primary\" required\r\n                                    />\r\n                                }\r\n                                label=\"Have gone though the placement evidence and Authentic for both data and evidence\"\r\n                            />\r\n                            <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                                {(this.state.errors.authenticationAndConsent || '')}\r\n                            </InputLabel>\r\n                        </Grid>\r\n\r\n                        <Grid container direction=\"row\" justify=\"flex-end\" id=\"btn\" alignItems=\"flex-end\">\r\n                            <Button variant=\"contained\" type=\"submit\" size=\"small\" color=\"primary\"\r\n                            // disabled={(this.state.buttonStatus == \"Enrolled\") ? false : true}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlacementDetailsSubPlaced;"]},"metadata":{},"sourceType":"module"}