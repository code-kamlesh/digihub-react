{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\Upload.js\";\nimport React from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nexport default function () {\n  const option = [{\n    value: 1,\n    label: \"Mobilization\"\n  }, {\n    value: 2,\n    label: \"Enrollment\"\n  }];\n  const batches = [{\n    value: 1,\n    label: \"Automibile\"\n  }, {\n    value: 2,\n    label: \"Ac repairing\"\n  }, {\n    value: 3,\n    label: \"Full stack\"\n  }, {\n    value: 4,\n    label: \"Cyber security\"\n  }];\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [selectedBatches, setselectedBatches] = useState(\"\");\n  const [items, setItems] = useState([]); // Reading excel file\n\n  const readExce = file => {\n    const promise = new promise((resolve, reject) => {\n      var filereader = new FileReader();\n      filereader.readAsArrayBuffer(file);\n\n      filereader.onload = e => {\n        const bufferArray = e.target.result;\n        const wb = XLSX.read(bufferArray, {\n          type: \"buffer\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(d => {\n      setItems(d);\n      console.log(d);\n    });\n  };\n\n  const [error, setserros] = useState(\"\"); // For handling the dropdown\n\n  const handleChange = e => {\n    const data = e.target.value;\n    setSelectedOption(data); // console.log(selectedOption)\n  }; // for handling batches changes\n\n\n  const batchesChanges = e => {\n    setselectedBatches(e);\n    console.log(\"Batchec : \", e); // console.log(selectedBatches.e)\n  }; // handlingError((e)=>{\n  //   if(setSelectedOption===\"\"){\n  //     setserros=\"Plase select Some option\"\n  //   }\n  // })\n\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Options\"), /*#__PURE__*/React.createElement(SingleSelect, {\n    name: \"\",\n    id: \"\" // key={this.state.Selectedstate || ''}\n    ,\n    options: option,\n    value: selectedOption,\n    onChange: handleChange // error={handlingError}\n    // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"batches\"), /*#__PURE__*/React.createElement(SingleSelect // key={this.state.Selectedstate || ''}\n  , {\n    options: batches,\n    value: selectedBatches,\n    onChange: batchesChanges // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Input, {\n    name: \"upload-photo\",\n    type: \"file\",\n    onChange: e => {\n      const file = e.target.files[0];\n      readExcel(file);\n    } //  disabled={true}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/Upload.js"],"names":["React","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","option","value","batches","selectedOption","setSelectedOption","selectedBatches","setselectedBatches","items","setItems","readExce","file","promise","resolve","reject","filereader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","fileReader","onerror","error","then","d","console","log","setserros","handleChange","batchesChanges","files","readExcel"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState } from \"react\";\r\nexport default function(){\r\n    const option=[{value:1, label:\"Mobilization\"},{value:2 ,label:\"Enrollment\"}]\r\n    const batches=[{value:1, label:\"Automibile\"},{value:2 ,label:\"Ac repairing\"},\r\n                    {value:3, label:\"Full stack\"},{value:4 ,label:\"Cyber security\"}]\r\n  \r\n    const [selectedOption, setSelectedOption] = useState(\"\")\r\n    const [selectedBatches, setselectedBatches] = useState(\"\")\r\n    const [items, setItems] = useState([]);\r\n    // Reading excel file\r\n\r\n    const readExce= (file)=>{\r\n      const promise = new promise((resolve,reject)=>{\r\n        var filereader = new FileReader();\r\n        filereader.readAsArrayBuffer(file);\r\n\r\n        filereader.onload=(e)=>{\r\n          const bufferArray = e.target.result;\r\n\r\n          const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n  \r\n          const wsname = wb.SheetNames[0];\r\n  \r\n          const ws = wb.Sheets[wsname];\r\n  \r\n          const data = XLSX.utils.sheet_to_json(ws);\r\n  \r\n          resolve(data);\r\n        };\r\n        fileReader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n      });\r\n      promise.then((d) => {\r\n        setItems(d);\r\n        console.log(d)\r\n      });\r\n    }\r\n\r\n    const[error,setserros]= useState(\"\")\r\n    // For handling the dropdown\r\n    const handleChange=((e)=>{\r\n      const data = e.target.value\r\n      setSelectedOption(data)\r\n      // console.log(selectedOption)\r\n    })\r\n\r\n    // for handling batches changes\r\n   const  batchesChanges= ((e)=>{\r\n      setselectedBatches(e)\r\n      console.log(\"Batchec : \",e)\r\n      // console.log(selectedBatches.e)\r\n    })\r\n    // handlingError((e)=>{\r\n    //   if(setSelectedOption===\"\"){\r\n    //     setserros=\"Plase select Some option\"\r\n    //   }\r\n    // })\r\n        return(\r\n            <Grid>\r\n             <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Options</InputLabel>\r\n            <SingleSelect\r\n              name=\"\" id=\"\"\r\n              // key={this.state.Selectedstate || ''}\r\n              options={option}\r\n              value={selectedOption}\r\n              onChange={handleChange}\r\n              // error={handlingError}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n        \r\n          <br/>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >batches</InputLabel>\r\n            <SingleSelect\r\n              // key={this.state.Selectedstate || ''}\r\n              options={batches}\r\n              value={selectedBatches}\r\n              onChange={batchesChanges}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n\r\n            <Input\r\n                 name=\"upload-photo\"\r\n                 type=\"file\"\r\n                 onChange={(e) => {\r\n                  const file = e.target.files[0];\r\n                  readExcel(file);\r\n                }}\r\n                //  disabled={true}\r\n            />\r\n            </Grid>\r\n       \r\n        )\r\n}   "]},"metadata":{},"sourceType":"module"}