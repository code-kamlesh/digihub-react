{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parseProperties from './parseProperties';\nimport parseFilePaths from './parseFilePaths';\nimport parseStyles from './parseStyles';\nimport parseSharedStrings from './parseSharedStrings';\nimport parseSheet from './parseSheet';\nimport getData from './getData'; // For an introduction in reading `*.xlsx` files see \"The minimum viable XLSX reader\":\n// https://www.brendanlong.com/the-minimum-viable-xlsx-reader.html\n\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"mm/dd/yyyy\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\n\nexport default function readXlsx(contents, xml) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!options.sheet) {\n    options = _objectSpread({\n      sheet: 1\n    }, options);\n  }\n\n  var getXmlFileContent = function getXmlFileContent(filePath) {\n    if (!contents[filePath]) {\n      throw new Error(\"\\\"\".concat(filePath, \"\\\" file not found inside the *.xlsx file zip archive\"));\n    }\n\n    return contents[filePath];\n  }; // Some Excel editors don't want to use standard naming scheme for sheet files.\n  // https://github.com/tidyverse/readxl/issues/104\n\n\n  var filePaths = parseFilePaths(getXmlFileContent('xl/_rels/workbook.xml.rels'), xml); // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\n\n  var values = filePaths.sharedStrings ? parseSharedStrings(getXmlFileContent(filePaths.sharedStrings), xml) : []; // Default file path for \"styles\": \"xl/styles.xml\".\n\n  var styles = filePaths.styles ? parseStyles(getXmlFileContent(filePaths.styles), xml) : {};\n  var properties = parseProperties(getXmlFileContent('xl/workbook.xml'), xml); // A feature for getting the list of sheets in an Excel file.\n  // https://github.com/catamphetamine/read-excel-file/issues/14\n\n  if (options.getSheets) {\n    return properties.sheets.map(function (_ref) {\n      var name = _ref.name;\n      return {\n        name: name\n      };\n    });\n  } // Find the sheet by name, or take the first one.\n\n\n  var sheetId = getSheetId(options.sheet, properties.sheets); // If the sheet wasn't found then throw an error.\n  // Example: \"xl/worksheets/sheet1.xml\".\n\n  if (!sheetId || !filePaths.sheets[sheetId]) {\n    throw createSheetNotFoundError(options.sheet, properties.sheets);\n  } // Parse sheet data.\n\n\n  var sheet = parseSheet(getXmlFileContent(filePaths.sheets[sheetId]), xml, values, styles, properties, options); // Get spreadsheet data.\n\n  var data = getData(sheet, options); // Can return properties, if required.\n\n  if (options.properties) {\n    return {\n      data: data,\n      properties: properties\n    };\n  } // Return spreadsheet data.\n\n\n  return data;\n}\n\nfunction getSheetId(sheet, sheets) {\n  if (typeof sheet === 'number') {\n    var _sheet = sheets[sheet - 1];\n    return _sheet && _sheet.relationId;\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(sheets), _step; !(_step = _iterator()).done;) {\n    var _sheet2 = _step.value;\n\n    if (_sheet2.name === sheet) {\n      return _sheet2.relationId;\n    }\n  }\n}\n\nfunction createSheetNotFoundError(sheet, sheets) {\n  var sheetsList = sheets && sheets.map(function (sheet, i) {\n    return \"\\\"\".concat(sheet.name, \"\\\" (#\").concat(i + 1, \")\");\n  }).join(', ');\n  return new Error(\"Sheet \".concat(typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"', \" not found in the *.xlsx file.\").concat(sheets ? ' Available sheets: ' + sheetsList + '.' : ''));\n}","map":{"version":3,"sources":["../../source/read/readXlsx.js"],"names":["options","sheet","getXmlFileContent","contents","filePaths","parseFilePaths","values","parseSharedStrings","styles","parseStyles","properties","parseProperties","name","sheetId","getSheetId","createSheetNotFoundError","parseSheet","data","getData","_sheet","sheets","sheetsList","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,eAAA,MAAA,mBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,kBAAA,MAAA,sBAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,OAAA,MAAA,WAAA,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAAA,QAAA,CAAA,QAAA,EAAA,GAAA,EAA+C;AAAA,MAAdA,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AAC5D,MAAI,CAACA,OAAO,CAAZ,KAAA,EAAoB;AAClBA,IAAAA,OAAO,GAAA,aAAA,CAAA;AACLC,MAAAA,KAAK,EAAE;AADF,KAAA,EAAPD,OAAO,CAAPA;AAID;;AAED,MAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,QAAA,EAAc;AACtC,QAAI,CAACC,QAAQ,CAAb,QAAa,CAAb,EAAyB;AACvB,YAAM,IAAA,KAAA,CAAA,KAAA,MAAA,CAAA,QAAA,EAAN,sDAAM,CAAA,CAAN;AACD;;AACD,WAAOA,QAAQ,CAAf,QAAe,CAAf;AAZ0D,GAQ5D,CAR4D,CAe5D;AACA;;;AACA,MAAMC,SAAS,GAAGC,cAAc,CAACH,iBAAiB,CAAlB,4BAAkB,CAAlB,EAjB4B,GAiB5B,CAAhC,CAjB4D,CAmB5D;;AACA,MAAMI,MAAM,GAAGF,SAAS,CAATA,aAAAA,GACXG,kBAAkB,CAACL,iBAAiB,CAACE,SAAS,CAA5B,aAAkB,CAAlB,EADPA,GACO,CADPA,GApB6C,EAoB5D,CApB4D,CAwB5D;;AACA,MAAMI,MAAM,GAAGJ,SAAS,CAATA,MAAAA,GACXK,WAAW,CAACP,iBAAiB,CAACE,SAAS,CAA5B,MAAkB,CAAlB,EADAA,GACA,CADAA,GAAf,EAAA;AAIA,MAAMM,UAAU,GAAGC,eAAe,CAACT,iBAAiB,CAAlB,iBAAkB,CAAlB,EA7B0B,GA6B1B,CAAlC,CA7B4D,CA+B5D;AACA;;AACA,MAAIF,OAAO,CAAX,SAAA,EAAuB;AACrB,WAAO,UAAU,CAAV,MAAA,CAAA,GAAA,CAAsB,UAAA,IAAA,EAAA;AAAA,UAAGY,IAAH,GAAA,IAAA,CAAA,IAAA;AAAA,aAAe;AAC1CA,QAAAA,IAAI,EAAJA;AAD0C,OAAf;AAA7B,KAAO,CAAP;AAlC0D,GAAA,CAuC5D;;;AACA,MAAMC,OAAO,GAAGC,UAAU,CAACd,OAAO,CAAR,KAAA,EAAgBU,UAAU,CAxCQ,MAwClC,CAA1B,CAxC4D,CA0C5D;AACA;;AACA,MAAI,CAAA,OAAA,IAAY,CAACN,SAAS,CAATA,MAAAA,CAAjB,OAAiBA,CAAjB,EAA4C;AAC1C,UAAMW,wBAAwB,CAACf,OAAO,CAAR,KAAA,EAAgBU,UAAU,CAAxD,MAA8B,CAA9B;AA7C0D,GAAA,CAgD5D;;;AACA,MAAMT,KAAK,GAAGe,UAAU,CACtBd,iBAAiB,CAACE,SAAS,CAATA,MAAAA,CADI,OACJA,CAAD,CADK,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAjDoC,OAiDpC,CAAxB,CAjD4D,CA0D5D;;AACA,MAAMa,IAAI,GAAGC,OAAO,CAAA,KAAA,EA3DwC,OA2DxC,CAApB,CA3D4D,CA6D5D;;AACA,MAAIlB,OAAO,CAAX,UAAA,EAAwB;AACtB,WAAO;AACLiB,MAAAA,IAAI,EADC,IAAA;AAELP,MAAAA,UAAU,EAAVA;AAFK,KAAP;AA/D0D,GAAA,CAqE5D;;;AACA,SAAA,IAAA;AACD;;AAED,SAAA,UAAA,CAAA,KAAA,EAAA,MAAA,EAAmC;AACjC,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,QAAMS,MAAM,GAAGC,MAAM,CAACnB,KAAK,GAA3B,CAAqB,CAArB;AACA,WAAOkB,MAAM,IAAIA,MAAM,CAAvB,UAAA;AACD;;AACD,OAAA,IAAA,SAAA,GAAA,+BAAA,CAAA,MAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAA6B;AAAA,QAAlBA,OAAkB,GAAA,KAAA,CAAA,KAAA;;AAC3B,QAAIA,OAAM,CAANA,IAAAA,KAAJ,KAAA,EAA2B;AACzB,aAAOA,OAAM,CAAb,UAAA;AACD;AACF;AACF;;AAED,SAAA,wBAAA,CAAA,KAAA,EAAA,MAAA,EAAiD;AAC/C,MAAME,UAAU,GAAGD,MAAM,IAAI,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,CAAA,EAAA;AAAA,WAAA,KAAA,MAAA,CAAkBnB,KAAK,CAAvB,IAAA,EAAA,OAAA,EAAA,MAAA,CAAmCqB,CAAC,GAApC,CAAA,EAAA,GAAA,CAAA;AAAX,GAAA,EAAA,IAAA,CAA7B,IAA6B,CAA7B;AACA,SAAO,IAAA,KAAA,CAAA,SAAA,MAAA,CAAmB,OAAA,KAAA,KAAA,QAAA,GAA4B,MAA5B,KAAA,GAA0C,MAAA,KAAA,GAA7D,GAAA,EAAA,gCAAA,EAAA,MAAA,CAA+GF,MAAM,GAAG,wBAAA,UAAA,GAAH,GAAA,GAA5H,EAAO,CAAA,CAAP;AACD","sourcesContent":["import parseProperties from './parseProperties'\r\nimport parseFilePaths from './parseFilePaths'\r\nimport parseStyles from './parseStyles'\r\nimport parseSharedStrings from './parseSharedStrings'\r\nimport parseSheet from './parseSheet'\r\nimport getData from './getData'\r\n\r\n// For an introduction in reading `*.xlsx` files see \"The minimum viable XLSX reader\":\r\n// https://www.brendanlong.com/the-minimum-viable-xlsx-reader.html\r\n\r\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"mm/dd/yyyy\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\r\nexport default function readXlsx(contents, xml, options = {}) {\r\n  if (!options.sheet) {\r\n    options = {\r\n      sheet: 1,\r\n      ...options\r\n    }\r\n  }\r\n\r\n  const getXmlFileContent = (filePath) => {\r\n    if (!contents[filePath]) {\r\n      throw new Error(`\"${filePath}\" file not found inside the *.xlsx file zip archive`)\r\n    }\r\n    return contents[filePath]\r\n  }\r\n\r\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\r\n  // https://github.com/tidyverse/readxl/issues/104\r\n  const filePaths = parseFilePaths(getXmlFileContent('xl/_rels/workbook.xml.rels'), xml)\r\n\r\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\r\n  const values = filePaths.sharedStrings\r\n    ? parseSharedStrings(getXmlFileContent(filePaths.sharedStrings), xml)\r\n    : []\r\n\r\n  // Default file path for \"styles\": \"xl/styles.xml\".\r\n  const styles = filePaths.styles\r\n    ? parseStyles(getXmlFileContent(filePaths.styles), xml)\r\n    : {}\r\n\r\n  const properties = parseProperties(getXmlFileContent('xl/workbook.xml'), xml)\r\n\r\n  // A feature for getting the list of sheets in an Excel file.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/14\r\n  if (options.getSheets) {\r\n    return properties.sheets.map(({ name }) => ({\r\n      name\r\n    }))\r\n  }\r\n\r\n  // Find the sheet by name, or take the first one.\r\n  const sheetId = getSheetId(options.sheet, properties.sheets)\r\n\r\n  // If the sheet wasn't found then throw an error.\r\n  // Example: \"xl/worksheets/sheet1.xml\".\r\n  if (!sheetId || !filePaths.sheets[sheetId]) {\r\n    throw createSheetNotFoundError(options.sheet, properties.sheets)\r\n  }\r\n\r\n  // Parse sheet data.\r\n  const sheet = parseSheet(\r\n    getXmlFileContent(filePaths.sheets[sheetId]),\r\n    xml,\r\n    values,\r\n    styles,\r\n    properties,\r\n    options\r\n  )\r\n\r\n  // Get spreadsheet data.\r\n  const data = getData(sheet, options)\r\n\r\n  // Can return properties, if required.\r\n  if (options.properties) {\r\n    return {\r\n      data,\r\n      properties\r\n    }\r\n  }\r\n\r\n  // Return spreadsheet data.\r\n  return data\r\n}\r\n\r\nfunction getSheetId(sheet, sheets) {\r\n  if (typeof sheet === 'number') {\r\n    const _sheet = sheets[sheet - 1]\r\n    return _sheet && _sheet.relationId\r\n  }\r\n  for (const _sheet of sheets) {\r\n    if (_sheet.name === sheet) {\r\n      return _sheet.relationId\r\n    }\r\n  }\r\n}\r\n\r\nfunction createSheetNotFoundError(sheet, sheets) {\r\n  const sheetsList = sheets && sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ')\r\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in the *.xlsx file.${sheets ? ' Available sheets: ' + sheetsList + '.' : ''}`)\r\n}"]},"metadata":{},"sourceType":"module"}