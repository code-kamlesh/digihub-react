{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\History.js\";\nimport React, { Component } from 'react';\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport UserContext from '../components/GolbalContext';\nimport { fetchBulkData, fetchStudentFile, fetchBulkAllMetaDataByCenterId } from './../util/api';\n\nconst XLSX = require('xlsx');\n\nexport default class History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disable: false,\n      metaData: [],\n      studentData: [],\n      status_of_File: \"\"\n    };\n  }\n\n  async loadData() {\n    const response = await fetchBulkAllMetaDataByCenterId(UserContext.centerId).then(jsondata => {\n      var metaData = [];\n      let result = JSON.parse(jsondata.data);\n      var arrData = {}; // console.log(\"Bulk Meta Data : \",result)\n\n      result[0].forEach((element, id) => {\n        arrData = element; // console.log(element)\n\n        metaData = [...metaData, {\n          \"regId\": arrData.regId,\n          \"uploadFileName\": arrData.uploadFileName,\n          \"batchName\": arrData.batchName,\n          \"records\": arrData.records,\n          \"uploadDate\": arrData.uploadDate,\n          \"status\": arrData.status\n        }];\n      });\n\n      if (metaData.status === \"C\") {\n        metaData[i].status = \"Completed\";\n      } else if (metaData.status === \"P\") {\n        arrData[i].status = \"Pending\";\n      }\n\n      this.setState({\n        metaData\n      }); // console.log(this.state.metaData)\n    });\n  } // Download the data\n\n\n  downloadFile(e, x) {\n    let studentData = [];\n    const regId = e;\n    const file_name = x; // console.log(x)\n\n    var data = {};\n    fetchStudentFile(regId).then(jsondata => {\n      let res = JSON.parse(jsondata.data);\n      res[0].forEach(element => {\n        // console.log(element)\n        data = element;\n        studentData = [...studentData, {\n          \"Reg_No\": data.regId,\n          \"First_Name\": data.firstName,\n          \"Middle_Name\": data.middleName,\n          \"Last_Name\": data.lastName,\n          \"Aadhar_Number\": data.aadharNo,\n          \"DOB\": data.dob,\n          \"Gender\": data.gender,\n          \"Highest_Qualification\": data.highestQualification,\n          \"Passing_Year\": data.passingYear,\n          \"Address_Line_1\": data.addressLine1,\n          \"Village\": data.villageName,\n          \"Religion\": data.religion,\n          \"District\": data.district,\n          \"State\": data.state,\n          \"PINCODE\": data.pincode,\n          \"Category\": data.category,\n          \"Primary_Contact_Number\": data.primaryContactNumber,\n          \"Primary_Mail_ID\": data.primaryEmailId,\n          \"College_register_no\": data.collegeRegisterNo,\n          \"Iti_grade\": data.itiGrade,\n          \"Iti_trade\": data.itiTrade,\n          \"created_on\": data.createdOn,\n          // removing to coloum creted by updated by\n          \"Student_ID\": data.studentId,\n          \"Eng_ID\": data.engagementId,\n          \"Status\": data.status,\n          \"Validation_Error\": data.reason // Changes\n\n        }];\n        this.setState({\n          studentData\n        }); // console.log(studentData)\n      }); // console.log(\"Student data in bulk : \",res)\n\n      const workSheet = XLSX.utils.json_to_sheet(studentData);\n      const workBook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workBook, workSheet, file_name); // Genrarting buffer if there is large amount of data\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"buffer\"\n      }); // Binary String\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"binary\"\n      });\n      XLSX.writeFile(workBook, file_name);\n    });\n  }\n\n  render() {\n    this.loadData();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      disabled: \"true\",\n      color: \"primary\",\n      onClick: this.loadData.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 14\n      }\n    }, \"Go to Bulk Upload\")), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      style: {\n        width: '80%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"Reg Id\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, \"File Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, \"Batch Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, \"Records\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, \"Upload Date\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, \"Status\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, this.state.metaData.map((dataValue, id) => /*#__PURE__*/React.createElement(TableRow, {\n      id: \"tablerow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 23\n      }\n    }, dataValue.regId), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 23\n      }\n    }, dataValue.uploadFileName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 23\n      }\n    }, dataValue.batchName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, dataValue.records), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }\n    }, dataValue.uploadDate), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 23\n      }\n    }, dataValue.status), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.downloadFile(dataValue.regId, dataValue.uploadFileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 35\n      }\n    }, \" Download \"))))))));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/History.js"],"names":["React","Component","Checkbox","InputLabel","Input","Grid","Button","Table","TableBody","TableCell","TableHead","TableRow","UserContext","fetchBulkData","fetchStudentFile","fetchBulkAllMetaDataByCenterId","XLSX","require","History","constructor","props","state","disable","metaData","studentData","status_of_File","loadData","response","centerId","then","jsondata","result","JSON","parse","data","arrData","forEach","element","id","regId","uploadFileName","batchName","records","uploadDate","status","i","setState","downloadFile","e","x","file_name","res","firstName","middleName","lastName","aadharNo","dob","gender","highestQualification","passingYear","addressLine1","villageName","religion","district","pincode","category","primaryContactNumber","primaryEmailId","collegeRegisterNo","itiGrade","itiTrade","createdOn","studentId","engagementId","reason","workSheet","utils","json_to_sheet","workBook","book_new","book_append_sheet","write","bookType","type","writeFile","render","width","bind","map","dataValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchBulkData,fetchStudentFile,fetchBulkAllMetaDataByCenterId} from './../util/api';\r\n\r\nconst XLSX = require('xlsx')\r\n\r\nexport default class History extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            disable:false,\r\n            metaData:[],\r\n            studentData:[],\r\n            status_of_File:\"\",\r\n        }\r\n        \r\n    }\r\nasync loadData(){\r\n       const response = await fetchBulkAllMetaDataByCenterId(UserContext.centerId).then((jsondata) => {\r\n            var metaData=[]\r\n            let result = JSON.parse(jsondata.data);\r\n            var arrData = {}\r\n            // console.log(\"Bulk Meta Data : \",result)\r\n            result[0].forEach((element ,id)=> {\r\n                arrData=element\r\n                // console.log(element)\r\n                metaData=[\r\n                    ...metaData,\r\n                    {\r\n                        \"regId\":arrData.regId,\r\n                        \"uploadFileName\": arrData.uploadFileName,\r\n                        \"batchName\": arrData.batchName,\r\n                        \"records\":arrData.records,\r\n                        \"uploadDate\":arrData.uploadDate,\r\n                        \"status\": arrData.status\r\n                    }]\r\n            });\r\n           \r\n           \r\n             if(metaData.status === \"C\"){\r\n                    metaData[i].status = \"Completed\" \r\n             }\r\n             else if(metaData.status ===\"P\"){\r\n                arrData[i].status = \"Pending\" \r\n             }\r\n            \r\n            \r\n            this.setState({metaData})\r\n            // console.log(this.state.metaData)\r\n        })\r\n    }\r\n\r\n    // Download the data\r\n    downloadFile(e,x){\r\n        let studentData=[]\r\n            const regId= e\r\n            const file_name = x\r\n            // console.log(x)\r\n            var data={}\r\n            fetchStudentFile(regId).then((jsondata)=>{\r\n                let res = JSON.parse(jsondata.data)\r\n                res[0].forEach(element=>{\r\n                    // console.log(element)\r\n                    data= element  \r\n                    studentData=[\r\n                        ...studentData,{\r\n                            \"Reg_No\":data.regId,\r\n                            \"First_Name\":data.firstName,\r\n                            \"Middle_Name\": data.middleName,\r\n                            \"Last_Name\": data.lastName,\r\n                            \"Aadhar_Number\": data.aadharNo,\r\n                            \"DOB\": data.dob,\r\n                            \"Gender\":data.gender,\r\n                            \"Highest_Qualification\":data.highestQualification,\r\n                            \"Passing_Year\": data.passingYear,\r\n                            \"Address_Line_1\": data.addressLine1,\r\n                            \"Village\": data.villageName,\r\n                            \"Religion\":data.religion,\r\n                            \"District\":data.district,\r\n                            \"State\": data.state,\r\n                            \"PINCODE\": data.pincode,\r\n                            \"Category\": data.category,\r\n                            \"Primary_Contact_Number\": data.primaryContactNumber,\r\n                            \"Primary_Mail_ID\": data.primaryEmailId,\r\n                            \"College_register_no\":data.collegeRegisterNo,\r\n                            \"Iti_grade\":data.itiGrade,\r\n                            \"Iti_trade\":data.itiTrade,\r\n                           \"created_on\":data.createdOn,\r\n// removing to coloum creted by updated by\r\n                            \"Student_ID\": data.studentId,\r\n                            \"Eng_ID\":data.engagementId,\r\n                            \"Status\":data.status,\r\n                            \"Validation_Error\":data.reason, // Changes\r\n                    }]\r\n                    this.setState({studentData})\r\n                    // console.log(studentData)\r\n                })\r\n                // console.log(\"Student data in bulk : \",res)\r\n                const workSheet = XLSX.utils.json_to_sheet(studentData)\r\n                const workBook = XLSX.utils.book_new()\r\n\r\n                XLSX.utils.book_append_sheet(workBook,workSheet,file_name)\r\n                // Genrarting buffer if there is large amount of data\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\r\n\r\n                // Binary String\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\r\n\r\n                XLSX.writeFile(workBook,file_name)\r\n            })\r\n    }\r\n    render(){\r\n        this.loadData();\r\n        return(\r\n            <div style={{ width: '100%' }}>\r\n\r\n\r\n            <Grid container  justify=\"flex-end\" alignItems=\"flex-end\">\r\n\r\n             <Button type=\"submit\" disabled=\"true\" color=\"primary\"  onClick={this.loadData.bind(this)}>\r\n               Go to Bulk Upload\r\n             </Button>\r\n             </Grid>\r\n\r\n            <Grid>\r\n             <Table aria-label=\"simple table\"  style={{ width: '80%'}}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Reg Id</TableCell>\r\n                <TableCell>File Name</TableCell>\r\n                <TableCell>Batch Name</TableCell>\r\n                <TableCell>Records</TableCell>\r\n                <TableCell>Upload Date</TableCell>\r\n                <TableCell>Status</TableCell>\r\n\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {this.state.metaData.map((dataValue, id) => (\r\n                    <TableRow id=\"tablerow\">\r\n                      <TableCell>{dataValue.regId}</TableCell>\r\n                      <TableCell>{dataValue.uploadFileName}</TableCell>\r\n                      <TableCell>{dataValue.batchName}</TableCell>\r\n                      <TableCell>{dataValue.records}</TableCell>\r\n                      <TableCell>{dataValue.uploadDate}</TableCell>\r\n                      <TableCell>{dataValue.status}</TableCell>\r\n                      <TableCell>{<Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.downloadFile(dataValue.regId,dataValue.uploadFileName)} > Download </Button>}</TableCell>\r\n                    </TableRow>))}\r\n            </TableBody>\r\n           </Table>\r\n\r\n           </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}