{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\PlacementDetailsSubEntNP.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { savePlacementDetails, fetchUserDocumentsByUserIdAndTypeOfDocument, fectAddressDetailsByAddressID, fetchAddressDetailsBasedOnPincode, fetchPlacementDetailsByEngagementId, fetchAllCenter, saveAddressDetails, fetchEmployerDetails } from '../util/api';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport UserContext from '../components/GolbalContext';\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport AddressForPlacement from \"./AddressForPlacement\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { isNotEmpty } from './../util/validation';\nimport underscore from 'underscore';\nconst domains = [{\n  value: 'Agriculture',\n  label: 'Agriculture'\n}, {\n  value: 'Apparel, made ups and Furnishing',\n  label: 'Apparel, made ups and Furnishing'\n}, {\n  value: 'Automotive',\n  label: 'Automotive'\n}, {\n  value: 'Beauty and Wellness',\n  label: 'Beauty and Wellness'\n}, {\n  value: 'BFSI',\n  label: 'BFSI'\n}, {\n  value: 'Construction',\n  label: 'Construction'\n}, {\n  value: 'Electronics',\n  label: 'Electronics'\n}, {\n  value: 'Furniture and Fittings',\n  label: 'Furniture and Fittings'\n}, {\n  value: 'Healthcare',\n  label: 'Healthcare'\n}, {\n  value: 'IT-ITeS',\n  label: 'IT-ITeS'\n}, {\n  value: 'Management, Entrepreneurship and Preofessional Courses',\n  label: 'Management, Entrepreneurship and Preofessional Courses'\n}, {\n  value: 'Retail',\n  label: 'Retail'\n}, {\n  value: 'Green Jobs',\n  label: 'Green Jobs'\n}, {\n  value: 'Telecom',\n  label: 'Telecom'\n}, {\n  value: 'Tourism and Hospitality',\n  label: 'Tourism and Hospitality'\n}];\nconst yesOrNo = [{\n  value: 'Yes',\n  label: 'Yes'\n}, {\n  value: 'No',\n  label: 'No'\n}];\nconst notPlacedReason = [{\n  value: 'Rejected By Employer',\n  label: 'Rejected By Employer'\n}, {\n  value: 'Not Avaliable Opportunity',\n  label: 'Not Avaliable Opportunity'\n}];\nconst notAvlOppReason = [{\n  value: 'No Employment Opportuntities',\n  label: 'No Employment Opportuntities'\n}, {\n  value: 'Others',\n  label: 'Others'\n}];\n\nclass PlacementDetailsSubEntNP extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitAddressDetails = () => {\n      saveAddressDetails(JSON.stringify(this.state.address)).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data);\n        this.setState({\n          'addressId': jsonobjects[0].id\n        });\n      });\n    };\n\n    this.validateAddress = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'pincode':\n          errors.pincode = isNotEmpty(value);\n          break;\n\n        case 'villageName':\n          errors.village = isNotEmpty(value);\n          break;\n\n        case 'cityName':\n          errors.cityName = isNotEmpty(value);\n          break;\n\n        case 'state':\n          errors.state = isNotEmpty(value);\n          break;\n\n        case 'district':\n          errors.district = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.handleAddressInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        address: { ...this.state.address,\n          [name]: value\n        }\n      });\n      this.validateAddress(name, value);\n    };\n\n    this.handleAddressSelectChange = (selectname, event) => {\n      this.setState({\n        address: { ...this.state.address,\n          [selectname]: event\n        }\n      });\n      this.validateAddress(selectname, event);\n    };\n\n    this.getPincodeData = (selectname, event) => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({\n        address: { ...this.state.address,\n          [name]: value\n        }\n      });\n      this.validateAddress(name, value);\n\n      if (value.length == 6) {\n        fetchAddressDetailsBasedOnPincode(value).then(jsondata => {\n          let jsonobjects = JSON.parse(jsondata.data);\n          let taluk = [];\n          let pincode = [];\n          let cityVillage = [];\n          let states = [];\n          let district = [];\n          this.formData.village.length = 0;\n          this.formData.pincodes.length = 0;\n          this.formData.city.length = 0;\n          this.formData.state.length = 0;\n          this.formData.district.length = 0;\n          jsonobjects.map(item => {\n            cityVillage.push({\n              label: item.cityVillage,\n              value: item.id\n            });\n          });\n          cityVillage = underscore.uniq(cityVillage, true, \"label\");\n          cityVillage.map(item => {\n            this.formData.village.push({\n              label: item.label,\n              value: item.label.toString()\n            });\n          });\n          this.setState({\n            village: this.formData.village\n          });\n          jsonobjects.map(item => {\n            taluk.push({\n              label: item.taluk,\n              value: item.id\n            });\n          });\n          taluk = underscore.uniq(taluk, true, \"label\");\n          taluk.map(item => {\n            this.formData.city.push({\n              label: item.label,\n              value: item.label.toString()\n            });\n          });\n          this.setState({\n            city: this.formData.city\n          });\n          jsonobjects.map(item => {\n            states.push({\n              label: item.state,\n              value: item.id\n            });\n          });\n          states = underscore.uniq(states, true, \"label\");\n          states.map(item => {\n            this.formData.state.push({\n              label: item.label,\n              value: item.value.toString()\n            });\n          });\n          this.setState({\n            state: this.formData.state\n          }, () => {\n            /*console.log(this.state.state)*/\n          });\n          jsonobjects.map(item => {\n            district.push({\n              label: item.district,\n              value: item.id\n            });\n          });\n          district = underscore.uniq(district, true, \"label\");\n          district.map(item => {\n            this.formData.district.push({\n              label: item.label,\n              value: item.value.toString()\n            });\n          });\n          this.setState({\n            district: this.formData.district\n          });\n        });\n      }\n    };\n\n    this.mySubmitHandler = event => {\n      event.preventDefault();\n      var errorsExist = true;\n      Object.values(this.state.errors).forEach(errorValue => {\n        if (errorValue.length > 0) {\n          console.log(\"error length ==> \", errorValue.length);\n          alert('Please fill all the fields before proceeding ');\n          errorValue.length > 0 && (errorsExist = false);\n        }\n      });\n\n      if (errorsExist) {\n        this.submitAddressDetails();\n      } else {\n        console.log('one or more errors are in the form please check the errors before submitting the form!');\n      }\n    };\n\n    this.submitPlacedAddressDetails = () => {\n      saveAddressDetails(JSON.stringify(this.state.address)).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data); //alert(jsonobjects[0].id);\n\n        this.set.state({\n          placementData: { ...this.state.placementData,\n            'addressId': jsonobjects[0].id\n          }\n        }, () => {\n          this.savePlacedFormDetails();\n        });\n      });\n    };\n\n    this.savePlacedFormDetails = () => {\n      savePlacementDetails(this.state.placementData).then(jsondata => {\n        if (jsondata.appError == null || jsondata.status == 'success') {\n          let jsonobjects = JSON.parse(jsondata.data);\n          console.log(jsonobjects);\n        }\n      });\n    };\n\n    this.handleSelectChange = (selectname, event) => {\n      this.setState({\n        placementData: { ...this.state.placementData,\n          [selectname]: event\n        }\n      });\n      console.log(\"value ====> \", this.state);\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      let value = target.value;\n      const name = target.name;\n      this.setState({\n        placementData: { ...this.state.placementData,\n          [name]: value\n        }\n      });\n      console.log(\"value ====> \", this.state);\n    };\n\n    console.log(props.props.placementData);\n    this.state = {\n      placementData: {\n        domainName: '',\n        noOfPeopleEmployed: '',\n        familyBusiness: '',\n        availedLoan: '',\n        monthlyGrossSal: '',\n        reason: '',\n        empId: '',\n        reasonForNoOpportunity: '',\n        otherReasonInBrief: '',\n\n        /*Address here*/\n        joiningPin: '',\n        joiningCity: '',\n        addressId: '',\n\n        /*General data*/\n        createdBy: UserContext.userid,\n        updatedBy: UserContext.userid,\n        engagementId: props.props.engagementId,\n        dbUserId: props.props.id,\n        isActive: \"Y\",\n        interviewStatus: 'Entrepreneurship/ Self Employed'\n      },\n      errors: {\n        /*Address here*/\n        joiningPin: '',\n        joiningCity: '',\n        addressId: '',\n        pincode: '',\n        village: '',\n        state: '',\n        cityName: '',\n        district: '',\n\n        /*Placement data here*/\n        domainName: '',\n        noOfPeopleEmployed: '',\n        familyBusiness: '',\n        availedLoan: '',\n        monthlyGrossSal: '',\n        reason: '',\n        empId: '',\n        reasonForNoOpportunity: '',\n        otherReasonInBrief: ''\n      },\n      addressId: '',\n      address: {\n        entityId: props.props.engagementId,\n        createdBy: UserContext.userid,\n        'isActive': 'Y',\n        'type': 'PD',\n        'entityType': 'S',\n        pincode: \"\",\n        addressLine1: \"\",\n        addressLine2: \"\",\n        district: \"\",\n        state: \"\",\n        cityName: \"\",\n        villageName: \"\"\n      },\n      employersDetails: [],\n      interviewStatus: props.props.placementData.interviewStatus\n    };\n    this.formData = {\n      state: [],\n      district: [],\n      pincodes: [],\n      city: [],\n      village: []\n    };\n    /*fetch placement details for user if present from earlier*/\n\n    if (props.props.id != null && props.props.id != undefined) {\n      console.log('here');\n      this.fetchPlacementdetailsFouUser(props.props.engagementId);\n    } else {\n      console.log('No Employment Data for the user with selected option found!');\n    }\n    /*fetch employer details*/\n\n\n    fetchEmployerDetails('Active Partner', '%Placement Partner%').then(jsondata => {\n      console.log(\"employer data ===> \", jsondata);\n\n      if (jsondata.appError == null) {\n        let jsonObjects = JSON.parse(jsondata.data);\n        jsonObjects.map(item => {\n          this.state.employersDetails.push({\n            label: item.accountName,\n            value: item.id\n          });\n        });\n      }\n    });\n    /*fetch list of documents*/\n\n    fetchUserDocumentsByUserIdAndTypeOfDocument(props.props.id, 'PD').then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data);\n      console.log(jsonobjects);\n      this.setState({\n        documents: [...this.state.documents, ...jsonobjects]\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.mySubmitHandler,\n      method: \"post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"domainName\",\n      id: \"domainName\",\n      label: \"Domain\",\n      onChange: this.handleSelectChange.bind(this, 'domainName'),\n      value: this.state.placementData.domainName || '' // helperText={this.state.errors.domainName}\n      // error={this.state.errors.domainName === '' ? false : true}\n      ,\n      options: domains,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      id: \"studentRemark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"text\",\n      name: \"noOfPeopleEmployed\",\n      id: \"noOfPeopleEmployed\",\n      label: \"No. of people employed\" // helperText={this.state.errors.noOfPeopleEmployed}\n      // error={this.state.errors.noOfPeopleEmployed === '' ? false : true}\n      ,\n      onChange: this.handleInputChange,\n      value: this.state.placementData.noOfPeopleEmployed || '',\n      onInput: e => {\n        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 4);\n      },\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"familyBusiness\",\n      id: \"familyBusiness\",\n      label: \"Is it a Family Business\",\n      onChange: this.handleSelectChange.bind(this, 'familyBusiness'),\n      value: this.state.placementData.familyBusiness || '' // helperText={this.state.errors.familyBusiness}\n      // error={this.state.errors.familyBusiness === '' ? false : true}\n      ,\n      options: yesOrNo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"availedLoan\",\n      id: \"availedLoan\",\n      label: \"Availed Loan\",\n      onChange: this.handleSelectChange.bind(this, 'availedLoan'),\n      value: this.state.placementData.availedLoan || '' // helperText={this.state.errors.availedLoan}\n      // error={this.state.errors.availedLoan === '' ? false : true}\n      ,\n      options: yesOrNo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"number\",\n      name: \"monthlyGrossSal\",\n      id: \"monthlyGrossSal\",\n      label: \"Monthly Gross Income\" // helperText={this.state.errors.monthlyGrossSal}\n      // error={this.state.errors.monthlyGrossSal === '' ? false : true}\n      ,\n      onChange: this.handleInputChange,\n      value: this.state.placementData.monthlyGrossSal || '',\n      onInput: e => {\n        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 6);\n      },\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 35\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 56\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 37\n      }\n    }, \"Job Location\"))), /*#__PURE__*/React.createElement(AddressForPlacement, {\n      pincodeName: \"pincode\",\n      pincodeId: \"pincode\",\n      pincodeOnChange: this.getPincodeData.bind(this, 'pincode'),\n      pincodeValue: this.state.address.pincode || '',\n      pincodeHelperText: this.state.errors.pincode,\n      pincodeError: this.state.errors.pincode == '' ? false : true,\n      villageName: \"villageName\",\n      villageId: \"villageName\",\n      villageInputValue: this.handleAddressSelectChange.bind(this, 'villageName'),\n      villageData: this.state.village,\n      villageValue: this.state.address.villageName || '',\n      villageHelperText: this.state.errors.village,\n      villageError: this.state.errors.village == '' ? false : true,\n      cityName: \"cityName\",\n      cityId: \"cityName\",\n      cityValue: this.state.address.cityName || '',\n      cityData: this.state.city,\n      cityInputValue: this.handleAddressSelectChange.bind(this, 'cityName'),\n      cityNameHelperText: this.state.errors.cityName,\n      cityNameError: this.state.errors.cityName == '' ? false : true,\n      stateName: \"state\",\n      stateId: \"state\",\n      stateData: this.state.state,\n      stateValue: this.state.address.state || '',\n      stateInputValue: this.handleAddressSelectChange.bind(this, 'state'),\n      stateHelperText: this.state.errors.state,\n      stateError: this.state.errors.state == '' ? false : true,\n      districtName: \"district\",\n      districtId: \"district\",\n      districtValue: this.state.address.district || '',\n      districtData: this.state.district,\n      districtInputValue: this.handleAddressSelectChange.bind(this, 'district'),\n      districtHelperText: this.state.errors.district,\n      districtError: this.state.errors.district == '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox // onChange={this.handleCheckboxChange}\n      , {\n        name: \"documentsUploaded\",\n        id: \"documentsUploaded\",\n        color: \"primary\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 37\n        }\n      }),\n      label: \"I have uploaded appropriate Evidence\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      id: \"btn\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      size: \"small\",\n      color: \"primary\" // disabled={(this.state.buttonStatus == \"Enrolled\") ? false : true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 29\n      }\n    }, \"Save\")))));\n  }\n\n}\n\nexport default PlacementDetailsSubEntNP;","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/PlacementDetailsSubEntNP.js"],"names":["React","ReactDOM","savePlacementDetails","fetchUserDocumentsByUserIdAndTypeOfDocument","fectAddressDetailsByAddressID","fetchAddressDetailsBasedOnPincode","fetchPlacementDetailsByEngagementId","fetchAllCenter","saveAddressDetails","fetchEmployerDetails","SingleSelect","UserContext","FormControl","InputLabel","FormControlLabel","Input","Grid","RadioGroup","Radio","TextField","Button","AddressForPlacement","Checkbox","isNotEmpty","underscore","domains","value","label","yesOrNo","notPlacedReason","notAvlOppReason","PlacementDetailsSubEntNP","Component","constructor","props","submitAddressDetails","JSON","stringify","state","address","then","jsondata","jsonobjects","parse","data","setState","id","validateAddress","name","errors","pincode","village","cityName","district","handleAddressInputChange","event","target","handleAddressSelectChange","selectname","getPincodeData","length","taluk","cityVillage","states","formData","pincodes","city","map","item","push","uniq","toString","mySubmitHandler","preventDefault","errorsExist","Object","values","forEach","errorValue","console","log","alert","submitPlacedAddressDetails","set","placementData","savePlacedFormDetails","appError","status","handleSelectChange","handleInputChange","domainName","noOfPeopleEmployed","familyBusiness","availedLoan","monthlyGrossSal","reason","empId","reasonForNoOpportunity","otherReasonInBrief","joiningPin","joiningCity","addressId","createdBy","userid","updatedBy","engagementId","dbUserId","isActive","interviewStatus","entityId","addressLine1","addressLine2","villageName","employersDetails","undefined","fetchPlacementdetailsFouUser","jsonObjects","accountName","documents","render","width","bind","e","Math","max","parseInt","slice","fontWeight","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { savePlacementDetails, fetchUserDocumentsByUserIdAndTypeOfDocument, fectAddressDetailsByAddressID, fetchAddressDetailsBasedOnPincode, fetchPlacementDetailsByEngagementId, fetchAllCenter, saveAddressDetails, fetchEmployerDetails, } from '../util/api';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport UserContext from '../components/GolbalContext'\r\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddressForPlacement from \"./AddressForPlacement\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { isNotEmpty } from './../util/validation';\r\nimport underscore from 'underscore';\r\n\r\nconst domains = [\r\n    { value: 'Agriculture', label: 'Agriculture' },\r\n    { value: 'Apparel, made ups and Furnishing', label: 'Apparel, made ups and Furnishing' },\r\n    { value: 'Automotive', label: 'Automotive' },\r\n    { value: 'Beauty and Wellness', label: 'Beauty and Wellness' },\r\n    { value: 'BFSI', label: 'BFSI' },\r\n    { value: 'Construction', label: 'Construction' },\r\n    { value: 'Electronics', label: 'Electronics' },\r\n    { value: 'Furniture and Fittings', label: 'Furniture and Fittings' },\r\n    { value: 'Healthcare', label: 'Healthcare' },\r\n    { value: 'IT-ITeS', label: 'IT-ITeS' },\r\n    { value: 'Management, Entrepreneurship and Preofessional Courses', label: 'Management, Entrepreneurship and Preofessional Courses' },\r\n    { value: 'Retail', label: 'Retail' },\r\n    { value: 'Green Jobs', label: 'Green Jobs' },\r\n    { value: 'Telecom', label: 'Telecom' },\r\n    { value: 'Tourism and Hospitality', label: 'Tourism and Hospitality' }\r\n]\r\nconst yesOrNo = [\r\n    { value: 'Yes', label: 'Yes' },\r\n    { value: 'No', label: 'No' }\r\n]\r\nconst notPlacedReason = [\r\n    { value: 'Rejected By Employer', label: 'Rejected By Employer' },\r\n    { value: 'Not Avaliable Opportunity', label: 'Not Avaliable Opportunity' }\r\n]\r\nconst notAvlOppReason = [\r\n    { value: 'No Employment Opportuntities', label: 'No Employment Opportuntities' },\r\n    { value: 'Others', label: 'Others' }\r\n]\r\n\r\nclass PlacementDetailsSubEntNP extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props.props.placementData)\r\n        this.state = {\r\n            placementData: {\r\n                domainName: '', noOfPeopleEmployed: '', familyBusiness: '', availedLoan: '',\r\n                monthlyGrossSal: '', reason: '', empId: '', reasonForNoOpportunity: '',\r\n                otherReasonInBrief: '',  \r\n                /*Address here*/\r\n                joiningPin: '', joiningCity: '', addressId: '',\r\n                /*General data*/\r\n                createdBy: UserContext.userid, updatedBy: UserContext.userid, engagementId: props.props.engagementId,\r\n                dbUserId: props.props.id, isActive: \"Y\", interviewStatus: 'Entrepreneurship/ Self Employed',\r\n            },\r\n            errors: {\r\n                /*Address here*/\r\n                joiningPin: '', joiningCity: '', addressId: '', pincode: '', village: '', state: '',\r\n                cityName: '', district: '',\r\n                /*Placement data here*/\r\n                domainName: '', noOfPeopleEmployed: '', familyBusiness: '', availedLoan: '',\r\n                monthlyGrossSal: '', reason: '', empId: '', reasonForNoOpportunity: '',\r\n                otherReasonInBrief: '',\r\n            },\r\n            addressId: '',\r\n            address: {\r\n                entityId: props.props.engagementId, createdBy: UserContext.userid, 'isActive': 'Y', 'type': 'PD',\r\n                'entityType': 'S', pincode: \"\", addressLine1: \"\", addressLine2: \"\", district: \"\", state: \"\",\r\n                cityName: \"\", villageName: \"\"\r\n            },\r\n            employersDetails: [],\r\n            interviewStatus: props.props.placementData.interviewStatus,\r\n            \r\n        };\r\n        this.formData = { state: [], district: [], pincodes: [], city: [], village: [] };\r\n        /*fetch placement details for user if present from earlier*/\r\n        if (props.props.id != null && props.props.id != undefined) {\r\n            console.log('here')\r\n            this.fetchPlacementdetailsFouUser(props.props.engagementId);\r\n        }\r\n        else {\r\n            console.log('No Employment Data for the user with selected option found!')\r\n        }\r\n\r\n        /*fetch employer details*/\r\n        fetchEmployerDetails('Active Partner', '%Placement Partner%').then((jsondata) => {\r\n            console.log(\"employer data ===> \", jsondata)\r\n            if (jsondata.appError == null) {\r\n                let jsonObjects = JSON.parse(jsondata.data);\r\n                jsonObjects.map(item => {\r\n                    this.state.employersDetails.push({ label: item.accountName, value: item.id })\r\n                })\r\n            }\r\n        });\r\n\r\n        /*fetch list of documents*/\r\n        fetchUserDocumentsByUserIdAndTypeOfDocument(props.props.id, 'PD').then((jsondata) => {\r\n            let jsonobjects = JSON.parse(jsondata.data);\r\n            console.log(jsonobjects)\r\n            this.setState({ documents: [...this.state.documents, ...jsonobjects] })\r\n        });\r\n    }\r\n\r\n    submitAddressDetails = () => {\r\n        saveAddressDetails(JSON.stringify(this.state.address)).then((jsondata) => {\r\n            let jsonobjects = JSON.parse(jsondata.data);\r\n            this.setState({\r\n                'addressId': jsonobjects[0].id\r\n            });\r\n        });\r\n    }\r\n\r\n    validateAddress = (name, value) => {\r\n        let errors = this.state.errors;\r\n        switch (name) {\r\n            case 'pincode': errors.pincode = isNotEmpty(value);\r\n                break;\r\n            case 'villageName': errors.village = isNotEmpty(value);\r\n                break;\r\n            case 'cityName': errors.cityName = isNotEmpty(value);\r\n                break;\r\n            case 'state': errors.state = isNotEmpty(value);\r\n                break;\r\n            case 'district': errors.district = isNotEmpty(value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({ errors });\r\n    }\r\n\r\n    handleAddressInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            address: {\r\n                ...this.state.address,\r\n                [name]: value\r\n            }\r\n        })\r\n        this.validateAddress(name, value);\r\n    }\r\n\r\n\r\n    handleAddressSelectChange = (selectname, event) => {\r\n        this.setState({\r\n            address: {\r\n                ...this.state.address,\r\n                [selectname]: event\r\n            }\r\n        })\r\n        this.validateAddress(selectname, event);\r\n    }\r\n\r\n\r\n    getPincodeData = (selectname, event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            address: {\r\n                ...this.state.address,\r\n                [name]: value\r\n            }\r\n        })\r\n        this.validateAddress(name, value);\r\n        if (value.length == 6) {\r\n            fetchAddressDetailsBasedOnPincode(value).then((jsondata) => {\r\n                let jsonobjects = JSON.parse(jsondata.data);\r\n                let taluk = [];\r\n                let pincode = [];\r\n                let cityVillage = [];\r\n                let states = [];\r\n                let district = [];\r\n\r\n                this.formData.village.length = 0;\r\n                this.formData.pincodes.length = 0;\r\n                this.formData.city.length = 0;\r\n                this.formData.state.length = 0;\r\n                this.formData.district.length = 0;\r\n\r\n                jsonobjects.map(item => { cityVillage.push({ label: item.cityVillage, value: item.id }) });\r\n                cityVillage = underscore.uniq(cityVillage, true, \"label\");\r\n                cityVillage.map(item => {\r\n                    this.formData.village.push({\r\n                        label: item.label, value: (item.label).toString()\r\n                    })\r\n                });\r\n                this.setState({ village: this.formData.village });\r\n\r\n                jsonobjects.map(item => { taluk.push({ label: item.taluk, value: item.id }) });\r\n                taluk = underscore.uniq(taluk, true, \"label\");\r\n                taluk.map(item => {\r\n                    this.formData.city.push({\r\n                        label: item.label, value: (item.label).toString()\r\n                    })\r\n                });\r\n                this.setState({ city: this.formData.city });\r\n\r\n                jsonobjects.map(item => { states.push({ label: item.state, value: item.id }) });\r\n                states = underscore.uniq(states, true, \"label\");\r\n                states.map(item => {\r\n                    this.formData.state.push({\r\n                        label: item.label, value: (item.value).toString()\r\n                    })\r\n                });\r\n                this.setState({ state: this.formData.state }, () => { /*console.log(this.state.state)*/ });\r\n\r\n                jsonobjects.map(item => { district.push({ label: item.district, value: item.id }) });\r\n                district = underscore.uniq(district, true, \"label\");\r\n                district.map(item => {\r\n                    this.formData.district.push({\r\n                        label: item.label, value: (item.value).toString()\r\n                    })\r\n                });\r\n                this.setState({ district: this.formData.district });\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    mySubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        var errorsExist = true;\r\n        Object.values(this.state.errors).forEach(\r\n            (errorValue) => {\r\n                if(errorValue.length>0){\r\n                    console.log(\"error length ==> \", errorValue.length)\r\n                    alert('Please fill all the fields before proceeding ')\r\n                    errorValue.length > 0 && (errorsExist = false)\r\n                }\r\n            }\r\n        );\r\n        if(errorsExist) {\r\n            this.submitAddressDetails();\r\n        }\r\n        else{\r\n            console.log('one or more errors are in the form please check the errors before submitting the form!')\r\n        }\r\n    }\r\n\r\n    submitPlacedAddressDetails = () => {\r\n        saveAddressDetails(JSON.stringify(this.state.address)).then((jsondata) => {\r\n            let jsonobjects = JSON.parse(jsondata.data);\r\n            //alert(jsonobjects[0].id);\r\n            this.set.state({\r\n              placementData: {\r\n                ...this.state.placementData,\r\n                'addressId': jsonobjects[0].id\r\n              }\r\n            }, () => {this.savePlacedFormDetails();});\r\n        })\r\n    }\r\n\r\n    savePlacedFormDetails = () => {\r\n        savePlacementDetails(this.state.placementData).then((jsondata) => {\r\n            if (jsondata.appError == null || jsondata.status == 'success') {\r\n                let jsonobjects = JSON.parse(jsondata.data);\r\n                console.log(jsonobjects)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleSelectChange = (selectname, event) => {\r\n        this.setState({\r\n            placementData: {\r\n                ...this.state.placementData,\r\n                [selectname]: event\r\n            }\r\n        });\r\n        console.log(\"value ====> \", this.state)\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        let value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            placementData: {\r\n                ...this.state.placementData,\r\n                [name]: value\r\n            }\r\n        });\r\n        console.log(\"value ====> \", this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div style={{ width: '100%' }}>\r\n                    <form onSubmit={this.mySubmitHandler} method=\"post\">\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <FormControl>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <br></br>\r\n\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <SingleSelect name=\"domainName\" id=\"domainName\" label=\"Domain\"\r\n                                        onChange={this.handleSelectChange.bind(this, 'domainName')}\r\n                                        value={this.state.placementData.domainName || ''}\r\n                                        // helperText={this.state.errors.domainName}\r\n                                        // error={this.state.errors.domainName === '' ? false : true}\r\n                                        options={domains} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={3} id=\"studentRemark\">\r\n                                    <FormControl>\r\n                                        <TextField type=\"text\" name=\"noOfPeopleEmployed\" id=\"noOfPeopleEmployed\" label=\"No. of people employed\"\r\n                                            // helperText={this.state.errors.noOfPeopleEmployed}\r\n                                            // error={this.state.errors.noOfPeopleEmployed === '' ? false : true}\r\n                                            onChange={this.handleInputChange}\r\n                                            value={this.state.placementData.noOfPeopleEmployed || ''}\r\n                                            onInput={(e) => {\r\n                                                e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 4)\r\n                                            }} required />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} />\r\n\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <SingleSelect name=\"familyBusiness\" id=\"familyBusiness\" label=\"Is it a Family Business\"\r\n                                        onChange={this.handleSelectChange.bind(this, 'familyBusiness')}\r\n                                        value={this.state.placementData.familyBusiness || ''}\r\n                                        // helperText={this.state.errors.familyBusiness}\r\n                                        // error={this.state.errors.familyBusiness === '' ? false : true}\r\n                                        options={yesOrNo} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <SingleSelect name=\"availedLoan\" id=\"availedLoan\" label=\"Availed Loan\"\r\n                                        onChange={this.handleSelectChange.bind(this, 'availedLoan')}\r\n                                        value={this.state.placementData.availedLoan || ''}\r\n                                        // helperText={this.state.errors.availedLoan}\r\n                                        // error={this.state.errors.availedLoan === '' ? false : true}\r\n                                        options={yesOrNo} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={3}>\r\n                                    <FormControl>\r\n                                        <TextField type=\"number\" name=\"monthlyGrossSal\" id=\"monthlyGrossSal\"\r\n                                            label=\"Monthly Gross Income\"\r\n                                            // helperText={this.state.errors.monthlyGrossSal}\r\n                                            // error={this.state.errors.monthlyGrossSal === '' ? false : true}\r\n                                            onChange={this.handleInputChange}\r\n                                            value={this.state.placementData.monthlyGrossSal || ''}\r\n                                            onInput={(e) => {\r\n                                                e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 6)\r\n                                            }} required\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                            <br /><br /><br />\r\n                            {/* <PlacementDetailsAddress parentCallback={this.callbackFunction}/><Grid container spacing={2}> */}\r\n                            <Grid item xs={12}></Grid> <Grid item xs={12}></Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControl>\r\n                                    <h6 style={{ fontWeight: 'bold' }}>Job Location</h6>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <AddressForPlacement\r\n                                pincodeName=\"pincode\" pincodeId=\"pincode\"\r\n                                pincodeOnChange={this.getPincodeData.bind(this, 'pincode')}\r\n                                pincodeValue={this.state.address.pincode || ''}\r\n                                pincodeHelperText={this.state.errors.pincode} pincodeError={this.state.errors.pincode == '' ? false : true}\r\n                                villageName=\"villageName\" villageId=\"villageName\"\r\n                                villageInputValue={this.handleAddressSelectChange.bind(this, 'villageName')}\r\n                                villageData={this.state.village} villageValue={this.state.address.villageName || ''}\r\n                                villageHelperText={this.state.errors.village} villageError={this.state.errors.village == '' ? false : true}\r\n                                cityName=\"cityName\" cityId=\"cityName\" cityValue={this.state.address.cityName || ''}\r\n                                cityData={this.state.city}\r\n                                cityInputValue={this.handleAddressSelectChange.bind(this, 'cityName')}\r\n                                cityNameHelperText={this.state.errors.cityName} cityNameError={this.state.errors.cityName == '' ? false : true}\r\n                                stateName=\"state\" stateId=\"state\" stateData={this.state.state}\r\n                                stateValue={this.state.address.state || ''}\r\n                                stateInputValue={this.handleAddressSelectChange.bind(this, 'state')}\r\n                                stateHelperText={this.state.errors.state} stateError={this.state.errors.state == '' ? false : true}\r\n                                districtName=\"district\" districtId=\"district\" districtValue={this.state.address.district || ''}\r\n                                districtData={this.state.district}\r\n                                districtInputValue={this.handleAddressSelectChange.bind(this, 'district')}\r\n                                districtHelperText={this.state.errors.district} districtError={this.state.errors.district == '' ? false : true}\r\n                            />\r\n\r\n\r\n                        <br /><br />\r\n                        <Grid item xs={12} sm={6} >\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        // onChange={this.handleCheckboxChange}\r\n                                        name=\"documentsUploaded\" id=\"documentsUploaded\"\r\n                                        color=\"primary\" required\r\n                                    />\r\n                                }\r\n                                label=\"I have uploaded appropriate Evidence\"\r\n                            />\r\n                            <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                                {/* {(this.state.errors.documentsUploaded || '')} */}\r\n                            </InputLabel>\r\n                        </Grid>\r\n\r\n                        <Grid container direction=\"row\" justify=\"flex-end\" id=\"btn\" alignItems=\"flex-end\">\r\n                            <Button variant=\"contained\" type=\"submit\" size=\"small\" color=\"primary\"\r\n                            // disabled={(this.state.buttonStatus == \"Enrolled\") ? false : true}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default PlacementDetailsSubEntNP;"]},"metadata":{},"sourceType":"module"}