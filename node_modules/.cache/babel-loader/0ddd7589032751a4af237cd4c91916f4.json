{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\BulkUpload.js\";\nimport React, { Component } from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport UserContext from '../components/GolbalContext';\nimport { fetchNotCompletedBatchDetails, saveBulkMetaData, saveBulkStudentData } from '../util/api';\nimport excel from 'xlsx';\nlet today = new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\nlet yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd;\nexport default class bulkUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.readExcel = file => {\n      // \n      let file_name = file.name;\n      this.setState({\n        fileName: file_name\n      });\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        console.log(e);\n        const bufferArray = e.target.result;\n        const wb = XLSX.read(bufferArray, {\n          type: \"buffer\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname]; // console.log(\"file name : \",file.name)\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1\n        });\n        console.log(\"Header file \", data);\n        let student_data = XLSX.utils.sheet_to_json(ws);\n        this.setState({\n          studentInfo: student_data\n        });\n        this.setState({\n          student_count: data.length - 1\n        });\n        console.log(\"DataCount : \", this.state.student_count);\n        const requiredHeader = ['Reg_No', 'Aadhar_Number', 'First_Name', 'Middle_Name', 'Last_Name', 'DOB', 'Gender', 'Highest_Qualification', 'Religion', 'Passing_Year', 'Address_Line_1', 'Village', 'District', 'State', 'PINCODE', 'Category', 'Primary_Contact_Number', 'Primary_Mail_ID', 'Created_date', 'Created_by', 'Updated_date', 'Updated_by', 'Student_ID', 'Eng_ID', 'Status', 'Reason'];\n        let flag = true; // var x= requiredHeader.findIndex(element =>{\n        //   element == \"Created_by\"\n        // })\n        // console.log(x)\n        // console.log(data[0] )\n\n        requiredHeader.map((element, id) => {\n          // console.log(\"header comparison \",element, \"data : \",data[0][id])\n          if (flag) {\n            if (element == data[0][id]) {\n              if (id + 1 == requiredHeader.length) {// alert(\"Data in proper format\");\n                // setDisabled(false)\n                // uploadDocuments(file_name,student_data,student_data_count)                \n              }\n            } else {\n              flag = false;\n              alert(\"please fill the all column as per sample template\");\n              return;\n            }\n          }\n        });\n      };\n    };\n\n    this.state = {\n      options: [{\n        value: \"Mobilization\",\n        label: \"Mobilization\"\n      }, {\n        value: \"Enrollment\",\n        label: \"Enrollment\"\n      }],\n      regions: [{\n        value: 'All',\n        label: 'All'\n      }, {\n        value: 'East',\n        label: 'East'\n      }, {\n        value: 'west',\n        label: 'West'\n      }, {\n        value: 'North',\n        label: 'North'\n      }, {\n        value: 'South',\n        label: 'South'\n      }],\n      batchList: [],\n      Selectedoption: \"\",\n      student_count: 0,\n      fileName: \"\",\n      studentInfo: []\n    };\n  } // optind change handler\n\n\n  handleOptionsChange(selectname, event) {\n    const value = event;\n    console.log(value);\n    this.setState({\n      Selectedoption: value\n    });\n\n    if (event === \"Enrollment\") {\n      // setDisabled(false)\n      fetchNotCompletedBatchDetails(UserContext.centerId).then(jsondata => {\n        let result = JSON.parse(jsondata.data);\n        console.log(\"center : \", result);\n        result.forEach(element => {\n          //  console.log(\"Condition for date \" , element.freezeDate > today)\n          if (element.freezeDate > today) {\n            this.state.batchList.push({\n              \"value\": element.batchId,\n              \"label\": element.batchName\n            });\n          }\n        });\n      });\n    } else {// setDisabled(true)\n    }\n  } // Hhandle batch changes\n\n\n  handleBatchChange(selectname, event) {\n    // console.log(\"selected optins : \",this.state.Selectedoption)\n    let value = event;\n    console.log(event);\n    let index = this.state.batchList.findIndex(object => object.value == value);\n    let batchname = this.state.batchList[index].label; // console.log(this.state.batcheList)\n\n    this.setState({\n      batchId: event,\n      batchName: batchname\n    });\n  } // Handle for excel file change\n\n\n  // Uploadinh the doumnet\n  uploadDocuments() {\n    console.log(this.state.student_count);\n    console.log(this.state.studentInfo);\n    console.log(this.state.fileName);\n    let studentInfo = this.state.studentInfo;\n    saveBulkMetaData(this.state.fileName, today, this.state.selectedOption, this.state.batchName, this.state.batchId, this.state.student_count, \"P\", UserContext.centerName, UserContext.centerId, \"under test\").then(jsondata => {\n      let result = JSON.parse(jsondata.data);\n      console.log(result[0].regId);\n      const user_unique_id = result[0].regId;\n\n      for (var i = 0; i < this.state.student_count; i++) {\n        saveBulkStudentData(user_unique_id, studentInfo[i].First_Name, studentInfo[i].Last_Name, studentInfo[i].Middle_Name, studentInfo[i].DOB, studentInfo[i].Aadhar_Number, studentInfo[i].Highest_Qualification, studentInfo[i].Passing_Year, studentInfo[i].Gender, studentInfo[i].Religion, studentInfo[i].Category, studentInfo[i].Primary_Contact_Number, studentInfo[i].Primary_Mail_ID, studentInfo[i].Address_Line_1, studentInfo[i].Village, studentInfo[i].District, studentInfo[i].State, studentInfo[i].PINCODE, today, this.state.selectedOption, UserContext.userid, \"P\", \"Sample creation by us\").then(jsondata => {\n          let result = JSON.parse(jsondata.data);\n          console.log(result);\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, \"Options\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"Selectedoption\",\n      id: \"Selectedoption\",\n      options: this.state.options,\n      value: this.state.Selectedoption || '',\n      key: this.state.Selectedoption || '',\n      onChange: this.handleOptionsChange.bind(this, 'Selectedoption') // helperText={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.label : ''}\n      // error={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.value : ''}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }, \"Batches\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"SelectedBatch\",\n      id: \"SelectedBatch\",\n      key: this.state.SelectedBatch || '',\n      options: this.state.batchList,\n      value: this.state.SelectedBatch || '',\n      onChange: this.handleBatchChange.bind(this, 'SelectedBatch') // helperText={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.label : ''}\n      // error={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.value : ''}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      style: {\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"upload-photo\",\n      type: \"file\",\n      accept: \".xlsx/*, .xls/*\",\n      onClick: e => {\n        e.target.value = null; // setDisabled(true)\n      },\n      onChange: e => {\n        const file = e.target.files[0];\n        var substr1 = file.name.substring(file.name.length - 4, file.name.length);\n        var substr2 = file.name.substring(file.name.length - 3, file.name.length);\n\n        if (substr1 == \"xlsx\" || substr2 == \"xls\") {\n          this.readExcel(file);\n        } else {\n          alert(\"Please Upload Excel file\");\n          return;\n        }\n      },\n      maxFileSize: 2000000,\n      filesLimit: 1,\n      showFileNames: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 15\n      }\n    }, \"Note-:Please upload Excel file\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 15\n      }\n    }, \"and size should not be greater than 2mb.\"))))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      onSubmit: this.uploadDocuments.bind(this) // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 15\n      }\n    }, \"Upload Document\")));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/BulkUpload.js"],"names":["React","Component","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","useHistory","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","UserContext","fetchNotCompletedBatchDetails","saveBulkMetaData","saveBulkStudentData","excel","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","bulkUpload","constructor","props","readExcel","file","file_name","name","setState","fileName","fileReader","FileReader","readAsArrayBuffer","onload","e","console","log","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","student_data","studentInfo","student_count","length","state","requiredHeader","flag","map","element","id","alert","options","value","regions","batchList","Selectedoption","handleOptionsChange","selectname","event","centerId","then","jsondata","JSON","parse","forEach","freezeDate","push","batchId","batchName","handleBatchChange","index","findIndex","object","batchname","uploadDocuments","selectedOption","centerName","regId","user_unique_id","i","First_Name","Last_Name","Middle_Name","DOB","Aadhar_Number","Highest_Qualification","Passing_Year","Gender","Religion","Category","Primary_Contact_Number","Primary_Mail_ID","Address_Line_1","Village","District","State","PINCODE","userid","render","width","bind","SelectedBatch","files","substr1","substring","substr2","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,KAA/B,EAAsCC,IAAtC,EAA4CC,MAA5C,QAA0D,mBAA1D;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,SAASC,QAAT,QAAwB,OAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAAQC,YAAR,QAA2B,sBAA3B;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAAQC,6BAAR,EAAsCC,gBAAtC,EAAuDC,mBAAvD,QAAiF,aAAjF;AACA,OAAOC,KAAP,MAAkB,MAAlB;AACA,IAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,IAAIC,EAAE,GAAGC,MAAM,CAACH,KAAK,CAACI,OAAN,EAAD,CAAN,CAAwBC,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,CAAT;AACA,IAAIC,EAAE,GAAGH,MAAM,CAACH,KAAK,CAACO,QAAN,KAAmB,CAApB,CAAN,CAA6BF,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAT,C,CAAwD;;AACxD,IAAIG,IAAI,GAAGR,KAAK,CAACS,WAAN,EAAX;AACAT,KAAK,GAAGQ,IAAI,GAAG,GAAP,GAAaF,EAAb,GAAkB,GAAlB,GAAwBJ,EAAhC;AAEA,eAAe,MAAMQ,UAAN,SAAyBhC,SAAzB,CAAkC;AAC/CiC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SA+DlBC,SA/DkB,GA+DLC,IAAD,IAAU;AACpB;AACA,UAAIC,SAAS,GAAGD,IAAI,CAACE,IAArB;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAEH;AAAX,OAAd;AACD,YAAMI,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,MAAAA,UAAU,CAACE,iBAAX,CAA6BP,IAA7B;;AAEAK,MAAAA,UAAU,CAACG,MAAX,GAAqBC,CAAD,IAAO;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,cAAMG,WAAW,GAAGH,CAAC,CAACI,MAAF,CAASC,MAA7B;AAEA,cAAMC,EAAE,GAAGlD,IAAI,CAACmD,IAAL,CAAUJ,WAAV,EAAuB;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAvB,CAAX;AAEA,cAAMC,MAAM,GAAGH,EAAE,CAACI,UAAH,CAAc,CAAd,CAAf;AAEA,cAAMC,EAAE,GAAGL,EAAE,CAACM,MAAH,CAAUH,MAAV,CAAX,CARyB,CAU1B;;AACC,cAAMI,IAAI,GAAGzD,IAAI,CAAC0D,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,EAA4B;AAACK,UAAAA,MAAM,EAAC;AAAR,SAA5B,CAAb;AAEAf,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BW,IAA3B;AACA,YAAII,YAAY,GAAG7D,IAAI,CAAC0D,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,CAAnB;AACA,aAAKjB,QAAL,CAAc;AAACwB,UAAAA,WAAW,EAACD;AAAb,SAAd;AAGD,aAAKvB,QAAL,CAAc;AAACyB,UAAAA,aAAa,EAAEN,IAAI,CAACO,MAAL,GAAY;AAA5B,SAAd;AACCnB,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2B,KAAKmB,KAAL,CAAWF,aAAtC;AAED,cAAMG,cAAc,GAAE,CAAC,QAAD,EAAW,eAAX,EAA4B,YAA5B,EAA0C,aAA1C,EAAyD,WAAzD,EAAsE,KAAtE,EAA6E,QAA7E,EAAuF,uBAAvF,EAAgH,UAAhH,EAA4H,cAA5H,EAA4I,gBAA5I,EAA8J,SAA9J,EAAyK,UAAzK,EAAqL,OAArL,EAA8L,SAA9L,EAAyM,UAAzM,EAAqN,wBAArN,EAA+O,iBAA/O,EAAkQ,cAAlQ,EAAkR,YAAlR,EAAgS,cAAhS,EAAgT,YAAhT,EAA8T,YAA9T,EAA4U,QAA5U,EAAsV,QAAtV,EAAgW,QAAhW,CAAtB;AACA,YAAIC,IAAI,GAAG,IAAX,CAtB0B,CAuB1B;AACA;AACA;AACA;AACA;;AACAD,QAAAA,cAAc,CAACE,GAAf,CAAmB,CAACC,OAAD,EAASC,EAAT,KAAe;AAChC;AAEA,cAAGH,IAAH,EAAQ;AACN,gBAAGE,OAAO,IAAEZ,IAAI,CAAC,CAAD,CAAJ,CAAQa,EAAR,CAAZ,EAAwB;AACpB,kBAAGA,EAAE,GAAC,CAAH,IAAQJ,cAAc,CAACF,MAA1B,EACA,CACA;AAEA;AACA;AACH;AACF,aARC,MASI;AACFG,cAAAA,IAAI,GAAG,KAAP;AACAI,cAAAA,KAAK,CAAC,mDAAD,CAAL;AACA;AACD;AACF;AACF,SAnBD;AAoBA,OAhDD;AAiDF,KAvHmB;;AAEhB,SAAKN,KAAL,GAAW;AACTO,MAAAA,OAAO,EAAC,CAAC;AAACC,QAAAA,KAAK,EAAC,cAAP;AAAuBlE,QAAAA,KAAK,EAAC;AAA7B,OAAD,EACE;AAACkE,QAAAA,KAAK,EAAC,YAAP;AAAqBlE,QAAAA,KAAK,EAAC;AAA3B,OADF,CADC;AAGXmE,MAAAA,OAAO,EAAE,CAAC;AAAED,QAAAA,KAAK,EAAE,KAAT;AAAgBlE,QAAAA,KAAK,EAAE;AAAvB,OAAD,EACD;AAAEkE,QAAAA,KAAK,EAAE,MAAT;AAAiBlE,QAAAA,KAAK,EAAE;AAAxB,OADC,EAED;AAAEkE,QAAAA,KAAK,EAAE,MAAT;AAAiBlE,QAAAA,KAAK,EAAE;AAAxB,OAFC,EAGD;AAAEkE,QAAAA,KAAK,EAAE,OAAT;AAAkBlE,QAAAA,KAAK,EAAE;AAAzB,OAHC,EAID;AAAEkE,QAAAA,KAAK,EAAE,OAAT;AAAkBlE,QAAAA,KAAK,EAAE;AAAzB,OAJC,CAHE;AAQToE,MAAAA,SAAS,EAAC,EARD;AASTC,MAAAA,cAAc,EAAC,EATN;AAUTb,MAAAA,aAAa,EAAC,CAVL;AAWTxB,MAAAA,QAAQ,EAAC,EAXA;AAYTuB,MAAAA,WAAW,EAAC;AAZH,KAAX;AAgBD,GAnB8C,CAoBjD;;;AACEe,EAAAA,mBAAmB,CAACC,UAAD,EAAYC,KAAZ,EAAkB;AACnC,UAAMN,KAAK,GAAGM,KAAd;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAY2B,KAAZ;AACA,SAAKnC,QAAL,CAAc;AACZsC,MAAAA,cAAc,EAAEH;AADJ,KAAd;;AAIA,QAAGM,KAAK,KAAK,YAAb,EAA0B;AACxB;AACA9D,MAAAA,6BAA6B,CAACD,WAAW,CAACgE,QAAb,CAA7B,CAAoDC,IAApD,CAA0DC,QAAD,IAAc;AACrE,YAAIjC,MAAM,GAAGkC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACzB,IAApB,CAAb;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBG,MAAxB;AACDA,QAAAA,MAAM,CAACoC,OAAP,CAAehB,OAAO,IAAI;AACzB;AACE,cAAGA,OAAO,CAACiB,UAAR,GAAqBjE,KAAxB,EAA+B;AAC7B,iBAAK4C,KAAL,CAAWU,SAAX,CAAqBY,IAArB,CAA0B;AACxB,uBAASlB,OAAO,CAACmB,OADO;AAExB,uBAASnB,OAAO,CAACoB;AAFO,aAA1B;AAID;AACH,SARD;AASA,OAZD;AAaD,KAfD,MAgBI,CACF;AACD;AACF,GA/C8C,CAgD9C;;;AACAC,EAAAA,iBAAiB,CAACZ,UAAD,EAAYC,KAAZ,EAAkB;AAClC;AACA,QAAIN,KAAK,GAAGM,KAAZ;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAYiC,KAAZ;AACA,QAAIY,KAAK,GAAG,KAAK1B,KAAL,CAAWU,SAAX,CAAqBiB,SAArB,CAAgCC,MAAD,IAAYA,MAAM,CAACpB,KAAP,IAAgBA,KAA3D,CAAZ;AACA,QAAIqB,SAAS,GAAG,KAAK7B,KAAL,CAAWU,SAAX,CAAqBgB,KAArB,EAA4BpF,KAA5C,CALkC,CAMlC;;AACA,SAAK+B,QAAL,CAAc;AACZkD,MAAAA,OAAO,EAACT,KADI;AAEZU,MAAAA,SAAS,EAAEK;AAFC,KAAd;AAID,GA5D8C,CA8D/C;;;AA2DF;AAEAC,EAAAA,eAAe,GAAE;AAEflD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKmB,KAAL,CAAWF,aAAvB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKmB,KAAL,CAAWH,WAAvB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKmB,KAAL,CAAW1B,QAAvB;AACA,QAAIuB,WAAW,GAAI,KAAKG,KAAL,CAAWH,WAA9B;AACE5C,IAAAA,gBAAgB,CAAC,KAAK+C,KAAL,CAAW1B,QAAZ,EAAqBlB,KAArB,EAA2B,KAAK4C,KAAL,CAAW+B,cAAtC,EAAqD,KAAK/B,KAAL,CAAWwB,SAAhE,EAA0E,KAAKxB,KAAL,CAAWuB,OAArF,EAA6F,KAAKvB,KAAL,CAAWF,aAAxG,EAAsH,GAAtH,EAA0H/C,WAAW,CAACiF,UAAtI,EAAiJjF,WAAW,CAACgE,QAA7J,EAAsK,YAAtK,CAAhB,CAAoMC,IAApM,CAA0MC,QAAD,IAAY;AACnN,UAAIjC,MAAM,GAAGkC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACzB,IAApB,CAAb;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAAC,CAAD,CAAN,CAAUiD,KAAtB;AACA,YAAMC,cAAc,GAAGlD,MAAM,CAAC,CAAD,CAAN,CAAUiD,KAAjC;;AAEA,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKnC,KAAL,CAAWF,aAAzB,EAAuCqC,CAAC,EAAxC,EAA2C;AACzCjF,QAAAA,mBAAmB,CAACgF,cAAD,EAAgBrC,WAAW,CAACsC,CAAD,CAAX,CAAeC,UAA/B,EACjBvC,WAAW,CAACsC,CAAD,CAAX,CAAeE,SADE,EAEjBxC,WAAW,CAACsC,CAAD,CAAX,CAAeG,WAFE,EAGjBzC,WAAW,CAACsC,CAAD,CAAX,CAAeI,GAHE,EAIjB1C,WAAW,CAACsC,CAAD,CAAX,CAAeK,aAJE,EAKjB3C,WAAW,CAACsC,CAAD,CAAX,CAAeM,qBALE,EAMjB5C,WAAW,CAACsC,CAAD,CAAX,CAAeO,YANE,EAOjB7C,WAAW,CAACsC,CAAD,CAAX,CAAeQ,MAPE,EAQjB9C,WAAW,CAACsC,CAAD,CAAX,CAAeS,QARE,EASjB/C,WAAW,CAACsC,CAAD,CAAX,CAAeU,QATE,EAUjBhD,WAAW,CAACsC,CAAD,CAAX,CAAeW,sBAVE,EAWjBjD,WAAW,CAACsC,CAAD,CAAX,CAAeY,eAXE,EAajBlD,WAAW,CAACsC,CAAD,CAAX,CAAea,cAbE,EAcjBnD,WAAW,CAACsC,CAAD,CAAX,CAAec,OAdE,EAgBjBpD,WAAW,CAACsC,CAAD,CAAX,CAAee,QAhBE,EAiBjBrD,WAAW,CAACsC,CAAD,CAAX,CAAegB,KAjBE,EAkBjBtD,WAAW,CAACsC,CAAD,CAAX,CAAeiB,OAlBE,EAoBjBhG,KApBiB,EAqBjB,KAAK4C,KAAL,CAAW+B,cArBM,EAsBjBhF,WAAW,CAACsG,MAtBK,EAuBjB,GAvBiB,EAwBjB,uBAxBiB,CAAnB,CAwB2BrC,IAxB3B,CAwBiCC,QAAD,IAAY;AAC1C,cAAIjC,MAAM,GAAGkC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACzB,IAApB,CAAb;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACD,SA3BD;AA6BD;AACF,KApCD;AAqCH;;AAECsE,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADA,eAEI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,gBADP;AACwB,MAAA,EAAE,EAAC,gBAD3B;AAEE,MAAA,OAAO,EAAE,KAAKvD,KAAL,CAAWO,OAFtB;AAGE,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWW,cAAX,IAA6B,EAHtC;AAIE,MAAA,GAAG,EAAE,KAAKX,KAAL,CAAWW,cAAX,IAA6B,EAJpC;AAKE,MAAA,QAAQ,EAAE,KAAKC,mBAAL,CAAyB4C,IAAzB,CAA8B,IAA9B,EAAoC,gBAApC,CALZ,CAME;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFJ,eAeI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,eAiBI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,eADP;AACuB,MAAA,EAAE,EAAC,eAD1B;AAEE,MAAA,GAAG,EAAE,KAAKxD,KAAL,CAAWyD,aAAX,IAA4B,EAFnC;AAGE,MAAA,OAAO,EAAE,KAAKzD,KAAL,CAAWU,SAHtB;AAIE,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWyD,aAAX,IAA4B,EAJrC;AAKE,MAAA,QAAQ,EAAE,KAAKhC,iBAAL,CAAuB+B,IAAvB,CAA4B,IAA5B,EAAkC,eAAlC,CALZ,CAME;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAjBJ,CADA,eAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCF,eAiCE,oBAAC,KAAD;AAAQ,oBAAW,cAAnB;AAAkC,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAC;AAAR,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AACG,MAAA,IAAI,EAAC,cADR;AAEG,MAAA,IAAI,EAAC,MAFR;AAGG,MAAA,MAAM,EAAC,iBAHV;AAIG,MAAA,OAAO,EAAE5E,CAAC,IAAI;AACZA,QAAAA,CAAC,CAACI,MAAF,CAASyB,KAAT,GAAiB,IAAlB,CADa,CAEb;AACD,OAPH;AASG,MAAA,QAAQ,EAAG7B,CAAD,IAAO;AAChB,cAAMT,IAAI,GAAGS,CAAC,CAACI,MAAF,CAAS2E,KAAT,CAAe,CAAf,CAAb;AACA,YAAIC,OAAO,GAAGzF,IAAI,CAACE,IAAL,CAAUwF,SAAV,CAAoB1F,IAAI,CAACE,IAAL,CAAU2B,MAAV,GAAiB,CAArC,EAAwC7B,IAAI,CAACE,IAAL,CAAU2B,MAAlD,CAAd;AACA,YAAI8D,OAAO,GAAG3F,IAAI,CAACE,IAAL,CAAUwF,SAAV,CAAoB1F,IAAI,CAACE,IAAL,CAAU2B,MAAV,GAAiB,CAArC,EAAwC7B,IAAI,CAACE,IAAL,CAAU2B,MAAlD,CAAd;;AACA,YAAG4D,OAAO,IAAG,MAAV,IAAoBE,OAAO,IAAI,KAAlC,EAAwC;AACtC,eAAK5F,SAAL,CAAeC,IAAf;AACD,SAFD,MAGI;AACFoC,UAAAA,KAAK,CAAC,0BAAD,CAAL;AACA;AACD;AAEF,OArBH;AAsBE,MAAA,WAAW,EAAE,OAtBf;AAsBwB,MAAA,UAAU,EAAE,CAtBpC;AAsBuC,MAAA,aAAa,EAAE,IAtBtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAyBE;AAAI,MAAA,KAAK,EAAE;AAACwD,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAzBF,eA0BE;AAAI,MAAA,KAAK,EAAE;AAACA,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDA1BF,CADF,CADA,CADF,CAjCF,eAmEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnEN,oBAmEa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnEb,eAoEM,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAC,UAAxC;AAAmD,MAAA,UAAU,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAC,WAA9B;AAA0C,MAAA,KAAK,EAAC,SAAhD;AAA0D,MAAA,IAAI,EAAC,OAA/D;AAAwE,MAAA,QAAQ,EAAE,KAAKhC,eAAL,CAAqB0B,IAArB,CAA0B,IAA1B,CAAlF,CACM;AADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CApEN,CADF;AA4ED;;AArP8C","sourcesContent":["import React, { Component } from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {DropzoneArea} from 'material-ui-dropzone';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchNotCompletedBatchDetails,saveBulkMetaData,saveBulkStudentData} from '../util/api';\r\nimport excel from 'xlsx';\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + '-' + mm + '-' + dd;\r\n\r\nexport default class bulkUpload extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      options:[{value:\"Mobilization\", label:\"Mobilization\"},\r\n                {value:\"Enrollment\" ,label:\"Enrollment\"}],\r\n    regions: [{ value: 'All', label: 'All' },\r\n            { value: 'East', label: 'East' },\r\n            { value: 'west', label: 'West' },\r\n            { value: 'North', label: 'North' },\r\n            { value: 'South', label: 'South' }],\r\n      batchList:[],\r\n      Selectedoption:\"\",\r\n      student_count:0,\r\n      fileName:\"\",\r\n      studentInfo:[],\r\n\r\n\r\n    }\r\n  }\r\n// optind change handler\r\n  handleOptionsChange(selectname,event){\r\n    const value = event\r\n    console.log(value)\r\n    this.setState({\r\n      Selectedoption: value\r\n    })\r\n    \r\n    if(event === \"Enrollment\"){\r\n      // setDisabled(false)\r\n      fetchNotCompletedBatchDetails(UserContext.centerId).then((jsondata) => {\r\n        let result = JSON.parse(jsondata.data);\r\n        console.log(\"center : \",result)\r\n       result.forEach(element => {\r\n        //  console.log(\"Condition for date \" , element.freezeDate > today)\r\n          if(element.freezeDate > today ){\r\n            this.state.batchList.push({\r\n              \"value\": element.batchId,\r\n              \"label\": element.batchName\r\n            })\r\n          }\r\n       });\r\n      })\r\n    }\r\n    else{\r\n      // setDisabled(true)\r\n    }\r\n  }\r\n   // Hhandle batch changes\r\n   handleBatchChange(selectname,event){\r\n    // console.log(\"selected optins : \",this.state.Selectedoption)\r\n    let value = event\r\n    console.log(event)\r\n    let index = this.state.batchList.findIndex((object) => object.value == value)\r\n    let batchname = this.state.batchList[index].label\r\n    // console.log(this.state.batcheList)\r\n    this.setState({\r\n      batchId:event,\r\n      batchName: batchname\r\n    })\r\n  }\r\n\r\n  // Handle for excel file change\r\n\r\n  readExcel = (file) => {\r\n    // \r\n    let file_name = file.name\r\n    this.setState({fileName :file_name })\r\n   const fileReader = new FileReader();\r\n   fileReader.readAsArrayBuffer(file);\r\n\r\n   fileReader.onload = (e) => {\r\n     console.log(e)\r\n     const bufferArray = e.target.result;\r\n\r\n     const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n\r\n     const wsname = wb.SheetNames[0];\r\n\r\n     const ws = wb.Sheets[wsname];\r\n    \r\n    // console.log(\"file name : \",file.name)\r\n     const data = XLSX.utils.sheet_to_json(ws,{header:1});\r\n\r\n     console.log(\"Header file \",data)\r\n     let student_data = XLSX.utils.sheet_to_json(ws);\r\n     this.setState({studentInfo:student_data })\r\n    \r\n    \r\n    this.setState({student_count :data.length-1})\r\n     console.log(\"DataCount : \",this.state.student_count )\r\n\r\n    const requiredHeader =['Reg_No', 'Aadhar_Number', 'First_Name', 'Middle_Name', 'Last_Name', 'DOB', 'Gender', 'Highest_Qualification', 'Religion', 'Passing_Year', 'Address_Line_1', 'Village', 'District', 'State', 'PINCODE', 'Category', 'Primary_Contact_Number', 'Primary_Mail_ID', 'Created_date', 'Created_by', 'Updated_date', 'Updated_by', 'Student_ID', 'Eng_ID', 'Status', 'Reason']\r\n    let flag = true\r\n    // var x= requiredHeader.findIndex(element =>{\r\n    //   element == \"Created_by\"\r\n    // })\r\n    // console.log(x)\r\n    // console.log(data[0] )\r\n    requiredHeader.map((element,id) =>{\r\n      // console.log(\"header comparison \",element, \"data : \",data[0][id])\r\n    \r\n      if(flag){\r\n        if(element==data[0][id]){\r\n            if(id+1 == requiredHeader.length)\r\n            {\r\n            // alert(\"Data in proper format\");\r\n\r\n            // setDisabled(false)\r\n            // uploadDocuments(file_name,student_data,student_data_count)                \r\n        }\r\n      }\r\n        else{\r\n          flag = false\r\n          alert(\"please fill the all column as per sample template\")\r\n          return;\r\n        }\r\n      }\r\n    })\r\n   }\r\n}\r\n// Uploadinh the doumnet\r\n\r\nuploadDocuments(){\r\n  \r\n  console.log(this.state.student_count)\r\n  console.log(this.state.studentInfo)\r\n  console.log(this.state.fileName)\r\n  let studentInfo =  this.state.studentInfo\r\n    saveBulkMetaData(this.state.fileName,today,this.state.selectedOption,this.state.batchName,this.state.batchId,this.state.student_count,\"P\",UserContext.centerName,UserContext.centerId,\"under test\").then((jsondata)=>{\r\n      let result = JSON.parse(jsondata.data)\r\n      console.log(result[0].regId)\r\n      const user_unique_id = result[0].regId\r\n\r\n      for(var i=0;i<this.state.student_count;i++){\r\n        saveBulkStudentData(user_unique_id,studentInfo[i].First_Name,\r\n          studentInfo[i].Last_Name,\r\n          studentInfo[i].Middle_Name,\r\n          studentInfo[i].DOB,\r\n          studentInfo[i].Aadhar_Number,\r\n          studentInfo[i].Highest_Qualification,\r\n          studentInfo[i].Passing_Year,\r\n          studentInfo[i].Gender,\r\n          studentInfo[i].Religion,\r\n          studentInfo[i].Category,\r\n          studentInfo[i].Primary_Contact_Number,\r\n          studentInfo[i].Primary_Mail_ID,\r\n\r\n          studentInfo[i].Address_Line_1,\r\n          studentInfo[i].Village,\r\n\r\n          studentInfo[i].District,\r\n          studentInfo[i].State,\r\n          studentInfo[i].PINCODE,\r\n        \r\n          today,\r\n          this.state.selectedOption,\r\n          UserContext.userid,\r\n          \"P\",\r\n          \"Sample creation by us\").then((jsondata)=>{\r\n          let result = JSON.parse(jsondata.data)\r\n          console.log(result)\r\n        })\r\n        \r\n      }\r\n    })\r\n}\r\n\r\n  render(){\r\n    return(\r\n      <div style={{ width: '100%' }}>\r\n      <Grid container>\r\n      <Grid item xs={12}> </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Options</InputLabel>\r\n            <SingleSelect\r\n              name=\"Selectedoption\" id=\"Selectedoption\"\r\n              options={this.state.options}\r\n              value={this.state.Selectedoption || ''}\r\n              key={this.state.Selectedoption || ''}\r\n              onChange={this.handleOptionsChange.bind(this, 'Selectedoption')}\r\n              // helperText={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.label : ''}\r\n              // error={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.value : ''}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={2}></Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Batches</InputLabel>\r\n            <SingleSelect\r\n              name=\"SelectedBatch\" id=\"SelectedBatch\"\r\n              key={this.state.SelectedBatch || ''}\r\n              options={this.state.batchList}\r\n              value={this.state.SelectedBatch || ''}\r\n              onChange={this.handleBatchChange.bind(this, 'SelectedBatch')}\r\n              // helperText={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.label : ''}\r\n              // error={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.value : ''}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <br />\r\n        <Table  aria-label=\"simple table\" style={{ width:\"100%\"}}>\r\n          <TableBody>\r\n          <TableRow>\r\n            <TableCell> \r\n            <Input \r\n               name=\"upload-photo\"\r\n               type=\"file\"\r\n               accept='.xlsx/*, .xls/*'\r\n               onClick={e => {\r\n                (e.target.value = null)\r\n                // setDisabled(true)\r\n              }\r\n               }\r\n               onChange={(e) => {\r\n                const file = e.target.files[0];\r\n                var substr1 = file.name.substring(file.name.length-4, file.name.length);\r\n                var substr2 = file.name.substring(file.name.length-3, file.name.length);\r\n                if(substr1== \"xlsx\" || substr2 == \"xls\"){\r\n                  this.readExcel(file); \r\n                }\r\n                else{\r\n                  alert(\"Please Upload Excel file\")\r\n                  return;\r\n                }\r\n               \r\n              }}\r\n              maxFileSize={2000000} filesLimit={1} showFileNames={true}\r\n              />\r\n              <p  style={{color:\"red\"}}>Note-:Please upload Excel file</p>\r\n              <p  style={{color:\"red\"}}>and size should not be greater than 2mb.</p>\r\n            </TableCell>\r\n            </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n            <br /> <br />\r\n            <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\"  onSubmit={this.uploadDocuments.bind(this)}\r\n                    // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\r\n             >Upload Document</Button>\r\n             </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}