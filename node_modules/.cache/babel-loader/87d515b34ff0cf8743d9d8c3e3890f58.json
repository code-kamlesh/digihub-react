{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\ShortlistCandidates.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport MUIDataTable from \"mui-datatables\";\nimport Button from '@material-ui/core/Button';\nimport UserContext from '../components/GolbalContext';\nimport { fetchAllStudentDataByEngagementId, calculatePercentile } from './../util/api';\nimport { createMuiTheme, MuiThemeProvider, withStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport { serviceEndPoint } from './../util/serviceEndPoint';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Card from \"./../components/Card/Card.js\";\nimport GridContainer from \"./../components/Grid/GridContainer.js\";\nimport GridItem from \"./../components/Grid/GridItem.js\";\nconst customStyles = {\n  ShorlistedRow: {\n    '& td': {\n      backgroundColor: \"#B3F9A2\"\n    }\n  },\n  RejectedRow: {\n    '& td': {\n      backgroundColor: \"#FB8478\"\n    }\n  },\n  NameCell: {\n    fontWeight: 900\n  }\n};\n\nclass ShortlistCandidates extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      console.log(\"clicked on icon!\");\n    };\n\n    this.calculatePercentiles = event => {\n      event.preventDefault();\n      calculatePercentile().then(jsondata => {\n        this.formData.engagementId.length = 0;\n        this.state.info.map(item => {\n          this.formData.engagementId.push({\n            engagementId: item.engagement_id\n          });\n        });\n        fetchAllStudentDataByEngagementId(JSON.stringify(this.formData.engagementId)).then(jsondata => {\n          let studentInfo = [];\n\n          if (jsondata.data) {\n            let studentDetails = JSON.parse(jsondata.data);\n\n            for (var i = 0; i < studentDetails.length; i++) {\n              if (studentDetails[i].remarks == \"qualified\") {\n                var details = {\n                  'student_id': studentDetails[i].dbUserId,\n                  'engagement_id': studentDetails[i].engagementId,\n                  'name': studentDetails[i].firstName + \" \" + studentDetails[i].lastName,\n                  'status': studentDetails[i].status\n                };\n                studentInfo.push(details);\n              } else {\n                var details = {\n                  'student_id': studentDetails[i].dbUserId,\n                  'engagement_id': studentDetails[i].engagementId,\n                  'name': studentDetails[i].firstName + \" \" + studentDetails[i].lastName,\n                  'status': studentDetails[i].status\n                };\n                studentInfo.push(details);\n              }\n            }\n          }\n\n          this.setState(() => {\n            this.setState({\n              info: studentInfo,\n              postCalculation: true\n            });\n          });\n          studentInfo = null;\n        });\n      });\n    };\n\n    this.state = {\n      postCalculation: false,\n      selectedIndex: [],\n      rowsSelected: {\n        'dbUserId': '',\n        'engagementId': ''\n      },\n      info: [],\n      roleid: UserContext.roleid,\n      roleName: UserContext.roleName\n    };\n    this.formData = {\n      engagementId: []\n    };\n    this.fetchStudentDetails(); // alert(UserContext.centerId);\n  }\n\n  fetchStudentDetails() {\n    let studentInfo = [];\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenterAndStatus\", \"data\" : [{\"centerId\":' + UserContext.centerId + ',\"status\":\"Mobilised\"}]}');\n    fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json()).then(jsondata => {\n      let studentDetails = JSON.parse(jsondata.data);\n\n      for (var i = 0; i < studentDetails.length; i++) {\n        if (studentDetails[i].remarks == \"evaluated\") // score = fetchTotalScore(studentDetails[i].engagementId) \n          {\n            var details = {\n              'student_id': studentDetails[i].dbUserId,\n              'engagement_id': studentDetails[i].engagementId,\n              'name': studentDetails[i].firstName + \" \" + studentDetails[i].lastName,\n              'status': studentDetails[i].status // ,\n              // 'percent' : score\n\n            };\n            studentInfo.push(details);\n          }\n      }\n\n      this.setState({\n        info: studentInfo\n      });\n    });\n  }\n\n  render() {\n    let displayButton = \"\";\n\n    if (!this.state.postCalculation) {\n      displayButton = /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        id: \"save\",\n        variant: \"contained\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, \"Calculate Percentiles\");\n    }\n\n    if (this.state.info.length < 20) {\n      displayButton = /*#__PURE__*/React.createElement(\"h2\", {\n        style: {\n          fontWeight: \"600\",\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, \" Please complete evaluation for at least 20 candidates \");\n    } // let action=<Link to=\"/dashboard/updatebeneficiary\"><EditIcon/></Link>\n\n\n    const columns = [{\n      label: 'Student Id',\n      name: 'student_id',\n      headerStyle: {\n        color: '#FF9800'\n      }\n    }, {\n      label: 'Engagement Id',\n      name: 'engagement_id',\n      options: {\n        sortDirection: 'desc'\n      },\n      headerStyle: {\n        color: '#FF9800'\n      }\n    }, {\n      label: 'Name',\n      name: 'name',\n      headerStyle: {\n        color: '#FF9800'\n      }\n    }, {\n      label: 'Status',\n      name: 'status',\n      headerStyle: {\n        color: '#FF9800'\n      },\n      options: {\n        sortDirection: 'desc'\n      }\n    }];\n    const options = {\n      filterType: \"dropdown\",\n      //  responsive: \"scroll\",\n      selectableRows: 'single',\n      disableToolbarSelect: true,\n      // textLabels: {\n      //   body: {\n      //     noMatch: <span style={{color:\"blue\"}}>Please wait data is loading...</span>\n      //   }\n      // },\n      rowsSelected: this.state.selectedIndex,\n      onRowsSelect: allRows => {\n        let rows = this.state.selectedIndex;\n        rows[0] = allRows[0].dataIndex;\n        this.setState({\n          rowsSelected: this.state.info[allRows[0].dataIndex],\n          selectedIndex: rows\n        }); // this is the row in your data source       \n      },\n      setRowProps: row => {\n        for (var i = 0; i < this.state.info.length; i++) {\n          return {\n            className: classnames({\n              [this.props.classes.ShorlistedRow]: row[3] === 'Shortlisted',\n              [this.props.classes.RejectedRow]: row[3] === 'Rejected'\n            })\n          };\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.calculatePercentiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MUIDataTable, {\n      label: \"List of Students\",\n      data: this.state.info,\n      columns: columns,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }), displayButton);\n  }\n\n}\n\nexport default withStyles(customStyles, {\n  name: \"ShortlistCandidates.js\"\n})(ShortlistCandidates);","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/ShortlistCandidates.js"],"names":["React","Component","ReactDOM","MUIDataTable","Button","UserContext","fetchAllStudentDataByEngagementId","calculatePercentile","createMuiTheme","MuiThemeProvider","withStyles","classnames","BrowserRouter","Router","Link","serviceEndPoint","EditIcon","Card","GridContainer","GridItem","customStyles","ShorlistedRow","backgroundColor","RejectedRow","NameCell","fontWeight","ShortlistCandidates","constructor","handleClick","console","log","calculatePercentiles","event","preventDefault","then","jsondata","formData","engagementId","length","state","info","map","item","push","engagement_id","JSON","stringify","studentInfo","data","studentDetails","parse","i","remarks","details","dbUserId","firstName","lastName","status","setState","postCalculation","selectedIndex","rowsSelected","roleid","roleName","fetchStudentDetails","requestFormData","FormData","append","centerId","fetch","engagementServiceEndPoint","method","headers","token","body","response","json","render","displayButton","color","columns","label","name","headerStyle","options","sortDirection","filterType","selectableRows","disableToolbarSelect","onRowsSelect","allRows","rows","dataIndex","setRowProps","row","className","props","classes"],"mappings":"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","sourcesContent":["\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport Button from '@material-ui/core/Button';\r\nimport UserContext from '../components/GolbalContext';\r\nimport { fetchAllStudentDataByEngagementId, calculatePercentile} from './../util/api';\r\nimport {createMuiTheme, MuiThemeProvider, withStyles} from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  \r\n} from 'react-router-dom';\r\nimport { serviceEndPoint } from './../util/serviceEndPoint';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Card from \"./../components/Card/Card.js\";\r\nimport GridContainer from \"./../components/Grid/GridContainer.js\";\r\nimport GridItem from \"./../components/Grid/GridItem.js\";\r\nconst customStyles = {\r\n    ShorlistedRow: {\r\n      '& td': {backgroundColor: \"#B3F9A2\"}\r\n    },\r\n    RejectedRow: {\r\n        '& td': {backgroundColor: \"#FB8478\"}\r\n      },\r\n    NameCell: {\r\n      fontWeight: 900\r\n    },\r\n  };\r\nclass ShortlistCandidates extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {postCalculation : false , selectedIndex : []  , rowsSelected : {'dbUserId' : '', 'engagementId' : ''},\r\n      info:[],roleid:UserContext.roleid,roleName:UserContext.roleName};\r\n      this.formData = {engagementId:[]};    \r\n    this.fetchStudentDetails();\r\n   // alert(UserContext.centerId);\r\n    \r\n}\r\n\r\n\r\n\r\nhandleClick = () => {\r\n  console.log(\"clicked on icon!\");\r\n}\r\n\r\n\r\ncalculatePercentiles = (event) => {\r\n    event.preventDefault();\r\n   calculatePercentile().then((jsondata)=>{ \r\n        this.formData.engagementId.length=0;\r\n        this.state.info.map(item => {\r\n            this.formData.engagementId.push({engagementId:item.engagement_id}) \r\n        });\r\n        fetchAllStudentDataByEngagementId(JSON.stringify(this.formData.engagementId)).then((jsondata) => {\r\n            let studentInfo=[];\r\n            if(jsondata.data){\r\n                let studentDetails = JSON.parse(jsondata.data);   \r\n                for(var i=0;i<studentDetails.length;i++){\r\n                if(studentDetails[i].remarks == \"qualified\")\r\n                {\r\n                    var  details =\r\n                        {    'student_id':studentDetails[i].dbUserId,\r\n                            'engagement_id':studentDetails[i].engagementId,\r\n                            'name' :studentDetails[i].firstName+\" \"+studentDetails[i].lastName,\r\n                            'status':studentDetails[i].status,\r\n                        }; \r\n                        studentInfo.push(details);    \r\n                }\r\n                else\r\n                {\r\n                        var  details =\r\n                            {    'student_id':studentDetails[i].dbUserId,\r\n                                'engagement_id':studentDetails[i].engagementId,\r\n                                'name' :studentDetails[i].firstName+\" \"+studentDetails[i].lastName,\r\n                                'status':studentDetails[i].status,\r\n                            }; \r\n                            studentInfo.push(details);    \r\n                    \r\n                }\r\n                \r\n            } \r\n\r\n            }    \r\n\r\n            this.setState( \r\n                ()=>{this.setState({info:studentInfo,postCalculation : true})});\r\n            studentInfo=null;  \r\n                    });\r\n                });\r\n}\r\n\r\n\r\nfetchStudentDetails() {\r\n    let studentInfo=[];\r\n    let requestFormData = new FormData();  \r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenterAndStatus\", \"data\" : [{\"centerId\":'+UserContext.centerId+',\"status\":\"Mobilised\"}]}');\r\n    fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n    method: \"POST\",\r\n    headers: {\r\n      'Authorization': 'Bearer '+UserContext.token\r\n  }, \r\n    body: requestFormData,\r\n    }).then(response => response.json()).then((jsondata)=>{    \r\n      let  studentDetails = JSON.parse(jsondata.data);\r\n            for(var i=0;i<studentDetails.length;i++){\r\n            if(studentDetails[i].remarks == \"evaluated\") // score = fetchTotalScore(studentDetails[i].engagementId) \r\n            {\r\n                var  details =\r\n                {   'student_id':studentDetails[i].dbUserId,\r\n                    'engagement_id':studentDetails[i].engagementId,\r\n                    'name' :studentDetails[i].firstName+\" \"+studentDetails[i].lastName,\r\n                    'status':studentDetails[i].status // ,\r\n                    // 'percent' : score\r\n                }; \r\n                studentInfo.push(details);  \r\n            }\r\n           \r\n    }\r\n    this.setState({\r\n        info: studentInfo\r\n      });\r\n       \r\n     })  \r\n} \r\n  render() {\r\n      let displayButton = \"\";\r\n      if(!this.state.postCalculation )\r\n      {\r\n        displayButton = <Button type = \"submit\" id = \"save\" variant=\"contained\"  color=\"primary\" >\r\n        Calculate Percentiles\r\n        </Button>\r\n      }\r\n      if(this.state.info.length < 20)\r\n      {\r\n        displayButton = <h2 style = {{fontWeight : \"600\" , color : \"red\"}}> Please complete evaluation for at least 20 candidates </h2>\r\n      }\r\n\r\n   \r\n   // let action=<Link to=\"/dashboard/updatebeneficiary\"><EditIcon/></Link>\r\n    const columns = [{label: 'Student Id', name: 'student_id',headerStyle: {color:'#FF9800'}},\r\n    {label: 'Engagement Id', name: 'engagement_id',options : {\r\n      sortDirection : 'desc'\r\n    },headerStyle: {color:'#FF9800'}},\r\n    {label: 'Name', name: 'name',headerStyle: {color:'#FF9800'}},\r\n    {label: 'Status', name: 'status',headerStyle: {color:'#FF9800'}, options : {\r\n        sortDirection : 'desc'}}]\r\n\r\n    const options = {\r\n      filterType: \"dropdown\",\r\n    //  responsive: \"scroll\",\r\n      selectableRows : 'single',\r\n      disableToolbarSelect:true,\r\n      // textLabels: {\r\n      //   body: {\r\n      //     noMatch: <span style={{color:\"blue\"}}>Please wait data is loading...</span>\r\n      //   }\r\n      // },\r\n      rowsSelected : this.state.selectedIndex,\r\n      onRowsSelect: (allRows) => {\r\n          let rows = this.state.selectedIndex;\r\n          rows[0] = allRows[0].dataIndex;\r\n          this.setState({\r\n            rowsSelected : this.state.info[allRows[0].dataIndex],\r\n            selectedIndex : rows\r\n          }) // this is the row in your data source       \r\n     },\r\n     setRowProps: (row) => {\r\n        for(var i=0;i<this.state.info.length;i++){\r\n                return {         \r\n                    className: classnames(\r\n                      {[this.props.classes.ShorlistedRow]: row[3] === 'Shortlisted',\r\n                      [this.props.classes.RejectedRow]: row[3] === 'Rejected'\r\n                      }),\r\n                  };\r\n        }\r\n                },\r\n    };\r\n    return ( \r\n      <form onSubmit = {this.calculatePercentiles}>\r\n        <MUIDataTable label={\"List of Students\"} data={this.state.info} columns={columns} options={options}\r\n      />\r\n      <br/>\r\n      {displayButton}\r\n    </form>\r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(customStyles, {name: \"ShortlistCandidates.js\"})(ShortlistCandidates);\r\n"]},"metadata":{},"sourceType":"module"}