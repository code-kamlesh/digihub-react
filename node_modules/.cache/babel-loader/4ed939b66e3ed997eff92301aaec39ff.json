{"ast":null,"code":"import * as fs from './FsPromise.js';\nimport * as core from './core.js';\nexport { fromFile } from './FileTokenizer.js';\nexport { EndOfStreamError, fromBuffer } from './core.js';\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */\n\nexport async function fromStream(stream, fileInfo) {\n  fileInfo = fileInfo ? fileInfo : {};\n\n  if (stream.path) {\n    const stat = await fs.stat(stream.path);\n    fileInfo.path = stream.path;\n    fileInfo.size = stat.size;\n  }\n\n  return core.fromStream(stream, fileInfo);\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/node_modules/strtok3/lib/index.js"],"names":["fs","core","fromFile","EndOfStreamError","fromBuffer","fromStream","stream","fileInfo","path","stat","size"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,gBAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,WAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,UAAf,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;AAC/CA,EAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAH,GAAc,EAAjC;;AACA,MAAID,MAAM,CAACE,IAAX,EAAiB;AACb,UAAMC,IAAI,GAAG,MAAMT,EAAE,CAACS,IAAH,CAAQH,MAAM,CAACE,IAAf,CAAnB;AACAD,IAAAA,QAAQ,CAACC,IAAT,GAAgBF,MAAM,CAACE,IAAvB;AACAD,IAAAA,QAAQ,CAACG,IAAT,GAAgBD,IAAI,CAACC,IAArB;AACH;;AACD,SAAOT,IAAI,CAACI,UAAL,CAAgBC,MAAhB,EAAwBC,QAAxB,CAAP;AACH","sourcesContent":["import * as fs from './FsPromise.js';\r\nimport * as core from './core.js';\r\nexport { fromFile } from './FileTokenizer.js';\r\nexport { EndOfStreamError, fromBuffer } from './core.js';\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */\r\nexport async function fromStream(stream, fileInfo) {\r\n    fileInfo = fileInfo ? fileInfo : {};\r\n    if (stream.path) {\r\n        const stat = await fs.stat(stream.path);\r\n        fileInfo.path = stream.path;\r\n        fileInfo.size = stat.size;\r\n    }\r\n    return core.fromStream(stream, fileInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}