{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\CourseCoverageTracker.js\";\nimport React, { Component } from 'react';\nimport { fetchCentersOfUser, fetchCentersDetails, fetchRunningBatchDetails, saveCourseCovrageData, saveCourseCovrageDatawithId, fetchsubModuleList, fetchtabledatawithModuleId, fetchcourseModuleList } from './../util/api';\nimport UserContext from '../components/GolbalContext';\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nlet today = new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\nlet yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd;\nexport default class CourseCovrageTracker extends Component {\n  constructor(props) {\n    super(props); //state for this particular class\n\n    this.state = {\n      year: [{\n        value: '1',\n        label: 'First Year'\n      }, {\n        value: '2',\n        label: 'Second Year'\n      }],\n      checked: false,\n      module: [],\n      errors: {},\n      compDate: '',\n      tableData: [],\n      selectedModuleId: '',\n      batchs: [],\n      userId: UserContext.userid,\n      selectedYear: '',\n      selectedModule: '',\n      batchName: '',\n      createdDate: today,\n      subModuleList: [],\n      timeSpentList: [],\n      tableError: [],\n      batchId: ''\n    }; //function binding with the current instance\n\n    this.SaveOrUpdateData = this.SaveOrUpdateData.bind(this);\n    this.handleChangeDate = this.handleChangeDate.bind(this);\n    this.handleChangeRemark = this.handleChangeRemark.bind(this);\n    this.handleCheckChange = this.handleCheckChange.bind(this);\n    this.arrayProcessingFunction = this.arrayProcessingFunction.bind(this); // Api calling for center name \n\n    let centerId = [];\n    let currentComponent = this;\n    fetchCentersOfUser(UserContext.userid).then(jsondata => {\n      let userJsonObjects = JSON.parse(jsondata.data);\n      currentComponent.setState({\n        userScope: userJsonObjects\n      });\n      userJsonObjects.forEach(user => {\n        centerId.push({\n          \"id\": user.centerId\n        });\n      });\n    }).then(function (result) {\n      let centerDetails = [];\n      fetchCentersDetails(JSON.stringify(centerId)).then(jsondata => {\n        let centerObjects = JSON.parse(jsondata.data);\n        centerObjects.forEach(center => {\n          centerDetails.push({\n            label: center.name,\n            value: center.id\n          });\n        });\n        currentComponent.setState({\n          center: centerDetails\n        });\n      });\n    }); //constructor ends\n  } // Api calling for batch name based on center\n\n\n  handleCenterChange(selectcenter, event) {\n    this.setState({\n      [selectcenter]: event\n    });\n    this.setState({\n      batchId: \"\",\n      batchName: \"\",\n      attendanceDetails: [],\n      batchs: []\n    });\n    fetchRunningBatchDetails(event).then(jsondata => {\n      let studentInfo = [];\n      let batchDetails = JSON.parse(jsondata.data);\n\n      for (var i = 0; i < batchDetails.length; i++) {\n        var details = {\n          'value': batchDetails[i].batchId,\n          'label': batchDetails[i].batchName\n        };\n        studentInfo.push(details);\n      } //saving the data from API calls to the state adding error to identify all the compulsary fields \n\n\n      this.setState({\n        batchs: studentInfo,\n        tableData: [],\n        errors: { ...this.state.errors,\n          centerId: {\n            'label': '',\n            'value': false\n          },\n          batchId: {\n            'label': 'Please select some option',\n            'value': true\n          },\n          selectedYear: {\n            'label': 'Please select some option',\n            'value': true\n          },\n          selectedModule: {\n            'label': 'Please select some option',\n            'value': true\n          }\n        },\n        batchId: '',\n        batchName: '',\n        selectedYear: '',\n        module: [],\n        selectedModule: ''\n      });\n    }); //end of handle center change\n  } // batch drop down \n\n\n  handleBatchChange(selectbatch, event) {\n    //setting the state value to the selected batch and unfilled data as error\n    this.setState({\n      selectbatch: event,\n      tableData: [],\n      errors: { ...this.state.errors,\n        batchId: {\n          'label': '',\n          'value': false\n        },\n        selectedYear: {\n          'label': 'Please select some option',\n          'value': true\n        },\n        selectedModule: {\n          'label': 'Please select some option',\n          'value': true\n        }\n      },\n      selectedYear: '',\n      module: [],\n      selectedModule: ''\n    });\n    this.state.batchId = event; //end of batch change dropdown\n  } // Year drop down\n\n\n  handleSelectChangeyear(selectename, event) {\n    //setting the year in state and getting the data error for the unselected\n    this.setState({\n      selectedYear: event,\n      tableData: [],\n      errors: { ...this.state.errors,\n        selectedYear: {\n          'label': '',\n          'value': false\n        }\n      },\n      module: [],\n      selectedModule: ''\n    }); // API calling for coursemodule list\n\n    fetchcourseModuleList(event).then(jsondata => {\n      let response = jsondata.data;\n      response = JSON.parse(response);\n      response.forEach(value => {\n        value.forEach(module => {\n          this.setState({\n            module: [...this.state.module, {\n              value: module.moduleName,\n              label: module.moduleName,\n              moduleId: module.moduleId\n            }]\n          });\n        });\n      });\n    }); //end of change handle select\n  } // module drop down\n\n\n  handleSelectChangemodule(selectcenter, event) {\n    let module_id = '';\n    this.setState({\n      [selectcenter]: event,\n      remarks: \"\",\n      compDate: \"\",\n      checked: false,\n      tableData: [],\n      subModuleList: [],\n      timeSpentList: [],\n      errors: { ...this.state.errors,\n        selectedModule: {\n          'label': '',\n          'value': false\n        }\n      }\n    });\n    this.state.module.forEach(value => {\n      if (value.value == event) {\n        module_id = value.moduleId;\n        this.state.selectedModuleId = module_id;\n      }\n    }); //this is the main function for processing and putting the data in table\n\n    this.arrayProcessingFunction(module_id); //end of select change module function\n  }\n\n  arrayProcessingFunction(moduleId) {\n    var tableData = []; //fetch sub-module list\n\n    fetchsubModuleList(moduleId, this.state.selectedYear).then(jsondata => {\n      let data = JSON.parse(jsondata.data);\n      var arrData = {};\n      data[0].map((element, id) => {\n        arrData = element;\n        tableData = [...tableData, {\n          \"Id\": '',\n          \"subtopicName\": arrData.subtopicName,\n          \"subtopicId\": arrData.subtopicId,\n          \"remarks\": '',\n          \"compDate\": '',\n          \"isActive\": '',\n          \"createdDate\": '',\n          \"disabledStatus\": ''\n        }];\n      });\n      this.setState({\n        tableData\n      });\n    }); //fetch time spent in course module table data with moduleId, batchID and is Active status(this will always remain \"Y\")\n\n    fetchtabledatawithModuleId(this.state.batchId, this.state.selectedModuleId, \"Y\").then(jsondata => {\n      let data = JSON.parse(jsondata.data);\n      var tableDataCopy = [...tableData];\n      var arrData = {};\n      data[0].map((element, id) => {\n        arrData = element;\n        var index = tableDataCopy.findIndex(obj => obj.subtopicId == arrData.subtopicId);\n\n        if (index != -1) {\n          tableDataCopy[index].Id = arrData.id;\n          tableDataCopy[index].remarks = arrData.remarks;\n          tableDataCopy[index].compDate = arrData.compDate;\n          tableDataCopy[index].isActive = arrData.isActive;\n          tableDataCopy[index].createdDate = arrData.createdDate;\n          let createdDate = new Date(arrData.createdDate);\n          let res = createdDate.getFullYear() !== yyyy ? true : createdDate.getMonth() !== new Date().getMonth() ? true : createdDate.getDate() === new Date().getDate() || createdDate.getDate() === new Date().getDate() - 1 ? false : true;\n          tableDataCopy[index].disabledStatus = res;\n        }\n      });\n      this.setState({\n        tableData: tableDataCopy\n      });\n    });\n  } // handle is Active Status if checked the status is \"Y\" else \"N\"\n\n\n  handleCheckChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    var tableData = [...this.state.tableData];\n    var index = tableData.findIndex(obj => obj.subtopicId == name);\n    tableData[index].isActive = target.checked ? \"Y\" : \"N\";\n    this.setState({\n      tableData\n    });\n  } // handle change date\n\n\n  handleChangeDate(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    var tableData = [...this.state.tableData];\n    var index = tableData.findIndex(obj => obj.subtopicId == name);\n    tableData[index].compDate = value;\n    this.setState({\n      tableData\n    });\n  } //handle change remarks\n\n\n  handleChangeRemark(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    var tableData = [...this.state.tableData];\n    var index = tableData.findIndex(obj => obj.subtopicId == name);\n    tableData[index].remarks = value;\n    this.setState({\n      tableData\n    });\n  } // Save/ Update Data function\n\n\n  SaveOrUpdateData() {\n    if (this.state.batchId == \"\" || this.state.batchId == undefined || this.state.selectedYear == '' || this.state.selectedYear == undefined || this.state.selectedModuleId == '' || this.state.selectedModuleId == undefined) {\n      alert('Each field is mandatory!');\n    } else {\n      let isSaved = true;\n      let isUpdated = true;\n      this.state.tableData.map((value, id) => {\n        if (value.Id != '' && value.Id != undefined) {\n          if (!value.disabledStatus) {\n            saveCourseCovrageDatawithId(value.Id, UserContext.userid, this.state.batchId, value.isActive, value.subtopicId, this.state.selectedModuleId, this.state.createdDate, value.remarks, value.compDate).then(jsondata => {\n              let resultSave = jsondata.status;\n\n              if (resultSave === \"success\" && isUpdated) {\n                // alert('Data Updated Successfully!')\n                isUpdated = false;\n              }\n            });\n          }\n        } else if (!(UserContext.userid == '' || UserContext.userid == undefined || this.state.batchId == '' || this.state.batchId == undefined || this.state.selectedModuleId == '' || this.state.selectedModuleId == undefined || value.isActive == '' || value.isActive == undefined || value.subtopicId == '' || value.subtopicId == undefined || this.state.createdDate == '' || this.state.createdDate == undefined || value.compDate == '' || value.compDate == undefined)) {\n          saveCourseCovrageData(UserContext.userid, this.state.batchId, value.isActive, value.subtopicId, this.state.selectedModuleId, this.state.createdDate, value.remarks || '', value.compDate).then(jsondata => {\n            let resultSave = jsondata.status;\n\n            if (resultSave === \"success\" && isSaved) {\n              alert('Data saved successfully!');\n              isSaved = false;\n            } else {// console.log('')\n            }\n          });\n        }\n      });\n    } // setTimeout(() => { this.props.history.push({ pathname: '/dashboard/courseCoverageTracker', state: {} }) }, 2500)\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 15\n      }\n    }, \"Center Name\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"centerId\",\n      id: \"centerId\",\n      key: this.state.centerId || '',\n      options: this.state.center,\n      value: this.state.centerId || '',\n      onChange: this.handleCenterChange.bind(this, 'centerId'),\n      helperText: this.state.errors.centerId != undefined ? this.state.errors.centerId.label : '',\n      error: this.state.errors.centerId != undefined ? this.state.errors.centerId.value : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 15\n      }\n    }, \"Batch Name\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"batchId\",\n      id: \"batchId\",\n      options: this.state.batchs,\n      value: this.state.batchId || '',\n      onChange: this.handleBatchChange.bind(this, 'batchId'),\n      helperText: this.state.errors.batchId != undefined ? this.state.errors.batchId.label : '',\n      error: this.state.errors.batchId != undefined ? this.state.errors.batchId.value : '',\n      key: this.state.batchId || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 15\n      }\n    }, \"Year\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      onChange: this.handleSelectChangeyear.bind(this, 'selectedYear'),\n      name: \"selectedYear\",\n      id: \"selectedYear\",\n      value: this.state.selectedYear || '',\n      helperText: this.state.errors.selectedYear != undefined ? this.state.errors.selectedYear.label : '',\n      error: this.state.errors.selectedYear != undefined ? this.state.errors.selectedYear.value : '',\n      options: this.state.year,\n      key: this.state.selectedYear,\n      disabled: this.state.batchId == '' || this.state.batchId == undefined ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    }, \"Module\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      onChange: this.handleSelectChangemodule.bind(this, 'selectedModule'),\n      name: \"selectedModule\",\n      id: \"selectedModule\",\n      value: this.state.selectedModule || '',\n      helperText: this.state.errors.selectedModule != undefined ? this.state.errors.selectedModule.label : '',\n      error: this.state.errors.selectedModule != undefined ? this.state.errors.selectedModule.value : '',\n      options: this.state.module,\n      key: this.state.selectedModule,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    }, \"Sr No\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }\n    }, \"Sub Module\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }\n    }, \"Status\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }\n    }, \"Completion Date\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 17\n      }\n    }, \"Remarks\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 13\n      }\n    }, this.state.tableData.map((dataValue, id) => /*#__PURE__*/React.createElement(TableRow, {\n      id: \"tablerow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 19\n      }\n    }, id + 1), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 19\n      }\n    }, dataValue.subtopicName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      checked: dataValue.isActive == \"Y\" || dataValue.isActive == 'Y' ? true : false,\n      onChange: this.handleCheckChange,\n      name: dataValue.subtopicId,\n      color: \"primary\",\n      id: \"checked\" //  helperText = {this.state.errors.checked != undefined ? this.state.errors.checked.label : '' } \n      //  error = {this.state.errors.checked != undefined ? this.state.errors.checked.value : '' }\n      ,\n      disabled: dataValue.disabledStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 21\n      }\n    }, dataValue.isActive == \"\" || dataValue.isActive == undefined ? 'In-Active' : '')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: dataValue.subtopicId,\n      onChange: this.handleChangeDate,\n      value: dataValue.compDate //  helperText = {this.state.tableError[id] != undefined ? this.state.tableError[id].label : '' } \n      ,\n      error: dataValue.compDate == \"\" || dataValue.compDate === undefined ? true : false //    onMouseOut={this.SaveOrUpdateData}\n      ,\n      disabled: dataValue.disabledStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 21\n      }\n    }, dataValue.compDate == \"\" || dataValue.compDate === undefined ? 'This field is compulsary' : '')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"Data\",\n      name: dataValue.subtopicId,\n      onChange: this.handleChangeRemark // onMouseOut={this.handleChangeRemark}\n      ,\n      value: dataValue.remarks,\n      disabled: dataValue.disabledStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 21\n      }\n    })))))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.SaveOrUpdateData,\n      disabled: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 13\n      }\n    }, \"Save\"))));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/CourseCoverageTracker.js"],"names":["React","Component","fetchCentersOfUser","fetchCentersDetails","fetchRunningBatchDetails","saveCourseCovrageData","saveCourseCovrageDatawithId","fetchsubModuleList","fetchtabledatawithModuleId","fetchcourseModuleList","UserContext","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","Table","TableBody","TableCell","TableHead","TableRow","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","CourseCovrageTracker","constructor","props","state","year","value","label","checked","module","errors","compDate","tableData","selectedModuleId","batchs","userId","userid","selectedYear","selectedModule","batchName","createdDate","subModuleList","timeSpentList","tableError","batchId","SaveOrUpdateData","bind","handleChangeDate","handleChangeRemark","handleCheckChange","arrayProcessingFunction","centerId","currentComponent","then","jsondata","userJsonObjects","JSON","parse","data","setState","userScope","forEach","user","push","result","centerDetails","stringify","centerObjects","center","name","id","handleCenterChange","selectcenter","event","attendanceDetails","studentInfo","batchDetails","i","length","details","handleBatchChange","selectbatch","handleSelectChangeyear","selectename","response","moduleName","moduleId","handleSelectChangemodule","module_id","remarks","arrData","map","element","subtopicName","subtopicId","tableDataCopy","index","findIndex","obj","Id","isActive","res","disabledStatus","target","undefined","alert","isSaved","isUpdated","resultSave","status","render","width","dataValue","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  fetchCentersOfUser, fetchCentersDetails, fetchRunningBatchDetails, saveCourseCovrageData,\r\n  saveCourseCovrageDatawithId, fetchsubModuleList, fetchtabledatawithModuleId, fetchcourseModuleList\r\n} from './../util/api';\r\nimport UserContext from '../components/GolbalContext'\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + '-' + mm + '-' + dd;\r\n\r\nexport default class CourseCovrageTracker extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    //state for this particular class\r\n    this.state = {\r\n\r\n      year: [\r\n        { value: '1', label: 'First Year' },\r\n        { value: '2', label: 'Second Year' },\r\n      ],\r\n      checked: false,\r\n      module: [],\r\n      errors: {},\r\n      compDate: '',\r\n      tableData: [],\r\n      selectedModuleId: '',\r\n      batchs: [],\r\n      userId: UserContext.userid,\r\n      selectedYear: '',\r\n      selectedModule: '',\r\n      batchName: '',\r\n      createdDate: today,\r\n      subModuleList: [],\r\n      timeSpentList: [],\r\n      tableError: [],\r\n      batchId: '',\r\n    };\r\n    //function binding with the current instance\r\n    this.SaveOrUpdateData = this.SaveOrUpdateData.bind(this);\r\n    this.handleChangeDate = this.handleChangeDate.bind(this);\r\n    this.handleChangeRemark = this.handleChangeRemark.bind(this);\r\n    this.handleCheckChange = this.handleCheckChange.bind(this);\r\n    this.arrayProcessingFunction = this.arrayProcessingFunction.bind(this);\r\n    // Api calling for center name \r\n    let centerId = [];\r\n    let currentComponent = this;\r\n    fetchCentersOfUser(UserContext.userid).then((jsondata) => {\r\n      let userJsonObjects = JSON.parse(jsondata.data);\r\n      currentComponent.setState({ userScope: userJsonObjects });\r\n      userJsonObjects.forEach(user => {\r\n        centerId.push({ \"id\": user.centerId });\r\n      })\r\n    }).then(function (result) {\r\n      let centerDetails = [];\r\n      fetchCentersDetails(JSON.stringify(centerId)).then((jsondata) => {\r\n        let centerObjects = JSON.parse(jsondata.data);\r\n        centerObjects.forEach(center => {\r\n          centerDetails.push({ label: center.name, value: center.id });\r\n        })\r\n        currentComponent.setState({ center: centerDetails });\r\n      });\r\n    })\r\n    //constructor ends\r\n  }\r\n\r\n\r\n  // Api calling for batch name based on center\r\n  handleCenterChange(selectcenter, event) {\r\n    this.setState({ [selectcenter]: event });\r\n    this.setState({ batchId: \"\", batchName: \"\", attendanceDetails: [], batchs: [] });\r\n    fetchRunningBatchDetails(event).then((jsondata) => {\r\n      let studentInfo = [];\r\n      let batchDetails = JSON.parse(jsondata.data);\r\n      for (var i = 0; i < batchDetails.length; i++) {\r\n        var details =\r\n        {\r\n          'value': batchDetails[i].batchId,\r\n          'label': batchDetails[i].batchName\r\n        };\r\n        studentInfo.push(details)\r\n      }\r\n      //saving the data from API calls to the state adding error to identify all the compulsary fields \r\n      this.setState({\r\n        batchs: studentInfo,\r\n        tableData: [],\r\n        errors: {\r\n          ...this.state.errors,\r\n          centerId: {\r\n            'label': '',\r\n            'value': false\r\n          },\r\n          batchId: {\r\n            'label': 'Please select some option',\r\n            'value': true\r\n          },\r\n          selectedYear: {\r\n            'label': 'Please select some option',\r\n            'value': true\r\n          },\r\n          selectedModule: {\r\n            'label': 'Please select some option',\r\n            'value': true\r\n          }\r\n        },\r\n        batchId: '',\r\n        batchName: '',\r\n        selectedYear: '',\r\n        module: [],\r\n        selectedModule: ''\r\n      });\r\n    })\r\n    //end of handle center change\r\n  }\r\n\r\n  // batch drop down \r\n  handleBatchChange(selectbatch, event) {\r\n    //setting the state value to the selected batch and unfilled data as error\r\n    this.setState({\r\n      selectbatch: event,\r\n      tableData: [],\r\n      errors: {\r\n        ...this.state.errors,\r\n        batchId: {\r\n          'label': '',\r\n          'value': false\r\n        },\r\n        selectedYear: {\r\n          'label': 'Please select some option',\r\n          'value': true\r\n        },\r\n        selectedModule: {\r\n          'label': 'Please select some option',\r\n          'value': true\r\n        }\r\n      },\r\n      selectedYear: '',\r\n      module: [],\r\n      selectedModule: '',\r\n    });\r\n    this.state.batchId = event;\r\n    //end of batch change dropdown\r\n  }\r\n\r\n  // Year drop down\r\n  handleSelectChangeyear(selectename, event) {\r\n    //setting the year in state and getting the data error for the unselected\r\n    this.setState({\r\n      selectedYear: event,\r\n      tableData: [],\r\n      errors: {\r\n        ...this.state.errors,\r\n        selectedYear: {\r\n          'label': '',\r\n          'value': false\r\n        }\r\n      },\r\n      module: [],\r\n      selectedModule: ''\r\n    })\r\n    // API calling for coursemodule list\r\n    fetchcourseModuleList(event).then((jsondata) => {\r\n      let response = jsondata.data\r\n      response = JSON.parse(response)\r\n      response.forEach((value) => {\r\n        value.forEach((module) => {\r\n          this.setState({\r\n            module: [\r\n              ...this.state.module,\r\n              {\r\n                value: module.moduleName,\r\n                label: module.moduleName,\r\n                moduleId: module.moduleId\r\n              }\r\n            ]\r\n          })\r\n        })\r\n      })\r\n    })\r\n    //end of change handle select\r\n  }\r\n\r\n  // module drop down\r\n  handleSelectChangemodule(selectcenter, event) {\r\n    let module_id = '';\r\n    this.setState({\r\n      [selectcenter]: event,\r\n      remarks: \"\",\r\n      compDate: \"\",\r\n      checked: false,\r\n      tableData: [],\r\n      subModuleList: [],\r\n      timeSpentList: [],\r\n      errors: {\r\n        ...this.state.errors,\r\n        selectedModule: {\r\n          'label': '',\r\n          'value': false\r\n        }\r\n      }\r\n    })\r\n    this.state.module.forEach((value) => {\r\n      if (value.value == event) {\r\n        module_id = value.moduleId\r\n        this.state.selectedModuleId = module_id;\r\n      }\r\n    })\r\n    //this is the main function for processing and putting the data in table\r\n    this.arrayProcessingFunction(module_id)\r\n    //end of select change module function\r\n  }\r\n\r\n  arrayProcessingFunction(moduleId) {\r\n    var tableData = []\r\n    //fetch sub-module list\r\n    fetchsubModuleList(moduleId, this.state.selectedYear).then((jsondata) => {\r\n      let data = JSON.parse(jsondata.data)\r\n      var arrData = {}\r\n      data[0].map((element, id) => {\r\n        arrData = element\r\n        tableData = [\r\n          ...tableData,\r\n          {\r\n            \"Id\": '',\r\n            \"subtopicName\": arrData.subtopicName,\r\n            \"subtopicId\": arrData.subtopicId,\r\n            \"remarks\": '',\r\n            \"compDate\": '',\r\n            \"isActive\": '',\r\n            \"createdDate\": '',\r\n            \"disabledStatus\": ''\r\n          }]\r\n      })\r\n      this.setState({ tableData })\r\n    })\r\n    //fetch time spent in course module table data with moduleId, batchID and is Active status(this will always remain \"Y\")\r\n    fetchtabledatawithModuleId(this.state.batchId, this.state.selectedModuleId, \"Y\").then((jsondata) => {\r\n      let data = JSON.parse(jsondata.data)\r\n      var tableDataCopy = [...tableData];\r\n      var arrData = {}\r\n      data[0].map((element, id) => {\r\n        arrData = element\r\n        var index = tableDataCopy.findIndex(obj => obj.subtopicId == arrData.subtopicId)\r\n        if (index != -1) {\r\n          tableDataCopy[index].Id = arrData.id\r\n          tableDataCopy[index].remarks = arrData.remarks\r\n          tableDataCopy[index].compDate = arrData.compDate\r\n          tableDataCopy[index].isActive = arrData.isActive\r\n          tableDataCopy[index].createdDate = arrData.createdDate\r\n          let createdDate = new Date(arrData.createdDate)\r\n          let res = ((createdDate.getFullYear() !== yyyy) ? true : ((createdDate.getMonth() !== new Date().getMonth()) ? true : ((createdDate.getDate() === new Date().getDate() || createdDate.getDate() === new Date().getDate() - 1) ? false : true)))\r\n          tableDataCopy[index].disabledStatus = res\r\n        }\r\n      })\r\n      this.setState({ tableData: tableDataCopy })\r\n    })\r\n  }\r\n\r\n  // handle is Active Status if checked the status is \"Y\" else \"N\"\r\n  handleCheckChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    var tableData = [...this.state.tableData];\r\n    var index = tableData.findIndex(obj => obj.subtopicId == name)\r\n    tableData[index].isActive = target.checked ? \"Y\" : \"N\"\r\n    this.setState({ tableData });\r\n  }\r\n\r\n\r\n  // handle change date\r\n  handleChangeDate(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    var tableData = [...this.state.tableData];\r\n    var index = tableData.findIndex(obj => obj.subtopicId == name)\r\n    tableData[index].compDate = value\r\n    this.setState({ tableData });\r\n  }\r\n\r\n\r\n  //handle change remarks\r\n  handleChangeRemark(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    var tableData = [...this.state.tableData];\r\n    var index = tableData.findIndex(obj => obj.subtopicId == name)\r\n    tableData[index].remarks = value\r\n    this.setState({ tableData });\r\n  }\r\n\r\n\r\n  // Save/ Update Data function\r\n  SaveOrUpdateData() {\r\n\r\n    if (this.state.batchId == \"\" || this.state.batchId == undefined || this.state.selectedYear == '' || this.state.selectedYear == undefined || this.state.selectedModuleId == '' || this.state.selectedModuleId == undefined) {\r\n      alert('Each field is mandatory!');\r\n    }\r\n\r\n    else {\r\n      let isSaved = true\r\n      let isUpdated = true\r\n      this.state.tableData.map((value, id) => {\r\n\r\n        if (value.Id != '' && value.Id != undefined) {\r\n          if (!value.disabledStatus) {\r\n            saveCourseCovrageDatawithId(value.Id, UserContext.userid, this.state.batchId, value.isActive, value.subtopicId, this.state.selectedModuleId,\r\n              this.state.createdDate, value.remarks, value.compDate).then((jsondata) => {\r\n                let resultSave = jsondata.status\r\n                if (resultSave === \"success\" && (isUpdated)) {\r\n                  // alert('Data Updated Successfully!')\r\n                  isUpdated = false\r\n                }\r\n              })\r\n          }\r\n        }\r\n        else if (!(UserContext.userid == '' || UserContext.userid == undefined || this.state.batchId == ''\r\n          || this.state.batchId == undefined || this.state.selectedModuleId == '' || this.state.selectedModuleId == undefined || value.isActive == '' || value.isActive == undefined\r\n          || value.subtopicId == '' || value.subtopicId == undefined || this.state.createdDate == '' || this.state.createdDate == undefined\r\n          || value.compDate == '' || value.compDate == undefined)) {\r\n          saveCourseCovrageData(UserContext.userid, this.state.batchId, value.isActive, value.subtopicId, this.state.selectedModuleId,\r\n            this.state.createdDate, value.remarks || '', value.compDate).then((jsondata) => {\r\n              let resultSave = jsondata.status\r\n              if (resultSave === \"success\" && (isSaved)) {\r\n                alert('Data saved successfully!')\r\n                isSaved = false\r\n              }\r\n              else {\r\n                // console.log('')\r\n              }\r\n            })\r\n        }\r\n\r\n      })\r\n    }\r\n    // setTimeout(() => { this.props.history.push({ pathname: '/dashboard/courseCoverageTracker', state: {} }) }, 2500)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n        <form >\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n              <InputLabel shrink={true} >Center Name</InputLabel>\r\n              <SingleSelect\r\n                name=\"centerId\" id=\"centerId\"\r\n                key={this.state.centerId || ''}\r\n                options={this.state.center}\r\n                value={this.state.centerId || ''}\r\n                onChange={this.handleCenterChange.bind(this, 'centerId')}\r\n                helperText={this.state.errors.centerId != undefined ? this.state.errors.centerId.label : ''}\r\n                error={this.state.errors.centerId != undefined ? this.state.errors.centerId.value : ''}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={2}></Grid>\r\n\r\n            <Grid item xs={12} sm={4}>\r\n              <InputLabel shrink={true} >Batch Name</InputLabel>\r\n              <SingleSelect\r\n                isClearable\r\n                name=\"batchId\" id=\"batchId\"\r\n                options={this.state.batchs}\r\n                value={this.state.batchId || ''}\r\n                onChange={this.handleBatchChange.bind(this, 'batchId')}\r\n                helperText={this.state.errors.batchId != undefined ? this.state.errors.batchId.label : ''}\r\n                error={this.state.errors.batchId != undefined ? this.state.errors.batchId.value : ''}\r\n                key={this.state.batchId || ''}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <br />\r\n          <Grid container>\r\n            <Grid item xs={12} sm={4}>\r\n              <InputLabel shrink={true} >Year</InputLabel>\r\n              <SingleSelect isClearable={true} onChange={this.handleSelectChangeyear.bind(this, 'selectedYear')}\r\n                name=\"selectedYear\" id=\"selectedYear\"\r\n                value={this.state.selectedYear || ''}\r\n                helperText={this.state.errors.selectedYear != undefined ? this.state.errors.selectedYear.label : ''}\r\n                error={this.state.errors.selectedYear != undefined ? this.state.errors.selectedYear.value : ''}\r\n                options={this.state.year}\r\n                key={this.state.selectedYear}\r\n                disabled={(this.state.batchId == '' || this.state.batchId == undefined) ? true : false}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={2}></Grid>\r\n            <Grid item xs={12} sm={4}>\r\n\r\n              <InputLabel shrink={true} >Module</InputLabel>\r\n              <SingleSelect isClearable={true} onChange={this.handleSelectChangemodule.bind(this, 'selectedModule')}\r\n                name=\"selectedModule\" id=\"selectedModule\"\r\n                value={this.state.selectedModule || ''}\r\n                helperText={this.state.errors.selectedModule != undefined ? this.state.errors.selectedModule.label : ''}\r\n                error={this.state.errors.selectedModule != undefined ? this.state.errors.selectedModule.value : ''}\r\n                options={this.state.module}\r\n                key={this.state.selectedModule}\r\n\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <br />\r\n          <br />\r\n\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Sr No</TableCell>\r\n                <TableCell>Sub Module</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell>Completion Date</TableCell>\r\n                <TableCell>Remarks</TableCell>\r\n\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.tableData.map((dataValue, id) => (\r\n                <TableRow id=\"tablerow\">\r\n                  <TableCell>\r\n                    {id + 1}\r\n                  </TableCell>\r\n\r\n                  <TableCell>{dataValue.subtopicName}</TableCell>\r\n\r\n                  <TableCell>\r\n                    <Checkbox\r\n                      checked={(dataValue.isActive == \"Y\" || dataValue.isActive == 'Y') ? true : false}\r\n                      onChange={this.handleCheckChange}\r\n                      name={dataValue.subtopicId}\r\n                      color=\"primary\"\r\n                      id=\"checked\"\r\n                      //  helperText = {this.state.errors.checked != undefined ? this.state.errors.checked.label : '' } \r\n                      //  error = {this.state.errors.checked != undefined ? this.state.errors.checked.value : '' }\r\n                      disabled={dataValue.disabledStatus}\r\n                    />\r\n                    <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                      {(dataValue.isActive == \"\" || dataValue.isActive == undefined) ? 'In-Active' : ''}\r\n                    </InputLabel>\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    <Input type=\"date\" name={dataValue.subtopicId}\r\n                      onChange={this.handleChangeDate}\r\n                      value={dataValue.compDate}\r\n                      //  helperText = {this.state.tableError[id] != undefined ? this.state.tableError[id].label : '' } \r\n                      error={(dataValue.compDate == \"\" || dataValue.compDate === undefined) ? true : false}\r\n                      //    onMouseOut={this.SaveOrUpdateData}\r\n                      disabled={dataValue.disabledStatus}\r\n                    />\r\n                    <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                      {(dataValue.compDate == \"\" || dataValue.compDate === undefined) ? 'This field is compulsary' : ''}\r\n                    </InputLabel>\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    <Input type=\"Data\" name={dataValue.subtopicId}\r\n                      onChange={this.handleChangeRemark}\r\n                      // onMouseOut={this.handleChangeRemark}\r\n                      value={dataValue.remarks}\r\n                      disabled={dataValue.disabledStatus}\r\n                    />\r\n                  </TableCell>\r\n\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n\r\n          <br />\r\n          <Grid item xs={12} sm={2}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.SaveOrUpdateData}\r\n              disabled={false}\r\n            >Save</Button>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}