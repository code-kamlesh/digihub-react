{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\ChangePassword.js\";\nimport React, { Component } from 'react';\nimport { FormControl, InputLabel, Input, Grid, TextField, Button } from '@material-ui/core';\nimport UserContext from '../components/GolbalContext';\nimport { changePassword, isCurrentPasswordValid } from './../util/api';\nimport { isPasswordsSame, passwordStrength, isNotEmpty } from './../util/validation';\nimport AlertDialog from './../util/AlertDialog';\nconst alertDialogOptions = {\n  message: ''\n};\nexport default class ChangePassword extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateForm = errors => {\n      this.validate(\"currentPassword\", this.state.currentPassword);\n      this.validate(\"newPassword\", this.state.newPassword);\n      this.validate(\"confirmPassword\", this.state.confirmPassword);\n      let valid = true;\n      Object.values(errors).forEach( // if we have an error string set valid to false\n      val => val.length > 0 && (valid = false));\n      return valid;\n    };\n\n    this.validate = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'currentPassword':\n          errors.currentPasswordError = isNotEmpty(value);\n          break;\n\n        case 'newPassword':\n          errors.newPasswordError = isNotEmpty(value);\n\n          if (!isNotEmpty(value)) {\n            errors.newPasswordError = passwordStrength(value);\n          }\n\n          break;\n\n        case 'confirmPassword':\n          errors.confirmPasswordError = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.updatePassword = event => {\n      let errors = this.state.errors;\n      this.setState({\n        alertDialogFlag: false\n      });\n      event.preventDefault(); // console.log(this.state.currentPassword)\n\n      if (this.validateCurrentPassowrd(this.state.currentPassword)) {\n        if (this.validateForm(errors)) {\n          if (isPasswordsSame(this.state.newPassword, this.state.confirmPassword)) {\n            changePassword(UserContext.userid, this.state.newPassword).then(jsondata => {\n              this.resetForm();\n              alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n                style: {\n                  color: \"green\"\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 41\n                }\n              }, \"Password Changed Sucessfully\");\n              this.setState({\n                alertDialogFlag: true\n              }); // window.location.href = \"http://localhost:3000/\";\n              // window.location.href = \"https://digihubdev.tatastrive.com\";\n              // window.location.href = \"https://digihubtest.tatastrive.com\";\n              // window.location.href = \"https://digihub.tatastrive.com\";\n            });\n          } else {\n            errors.confirmPasswordError = 'New and confirm password are not same';\n            this.setState({\n              errors\n            });\n          }\n        }\n      }\n    };\n\n    this.isCurrentPasswordValid = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      this.setState({ ...this.state,\n        currentPassword: value\n      });\n      this.setState({\n        disabledButton: false\n      });\n    };\n\n    this.validateCurrentPassowrd = currentPassword => {\n      let errors = this.state.errors;\n      this.validate(currentPassword, currentPassword);\n      isCurrentPasswordValid(UserContext.userName, currentPassword).then(jsondata => {\n        let userDetails = JSON.parse(jsondata.data);\n        console.log(\"datalength>>>>>>>>>>\", userDetails);\n\n        if (userDetails.length == 0) {\n          // errors.currentPasswordError='Current Password is not valid';\n          // this.setState({errors});\n          // this.setState({ ...this.state, disabledButton: true });\n          // verifyPassowrd = false\n          this.setState({\n            verifyPassowrd: false\n          });\n          console.log(\"point 1\");\n          return this.state.verifyPassowrd;\n        } else {\n          errors.currentPasswordError = \"\";\n          this.setState({\n            errors\n          }); // verifyPassowrd = true\n\n          this.setState({\n            verifyPassowrd: true\n          });\n          console.log(\"point 2\");\n          return this.state.verifyPassowrd;\n        }\n      }); // console.log(this.state.verifyPassowrd)\n      // return this.state.verifyPassowrd;\n    };\n\n    this.state = {\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      disabledButton: false,\n      verifyPassowrd: true,\n      errors: {\n        newPasswordError: '',\n        confirmPasswordError: '',\n        currentPasswordError: ''\n      }\n    };\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n    this.validate(name, value);\n  }\n\n  resetForm() {\n    this.setState({\n      newPassword: ''\n    });\n    this.setState({\n      confirmPassword: ''\n    });\n    this.setState({\n      currentPassword: ''\n    });\n    let errors = this.state.errors;\n    errors.currentPasswordError = \"\";\n    errors.confirmPasswordError = \"\";\n    errors.newPasswordError = \"\";\n    this.setState({\n      errors\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.updatePassword,\n      method: \"post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, \"Change Password\"))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"Password\",\n      name: \"currentPassword\",\n      id: \"currentPassword\",\n      error: this.state.errors.currentPasswordError == '' ? false : true,\n      label: \"Current Password\",\n      onChange: this.isCurrentPasswordValid.bind(this),\n      value: this.state.currentPassword,\n      helperText: this.state.errors.currentPasswordError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"Password\",\n      name: \"newPassword\",\n      id: \"newPassword\",\n      error: this.state.errors.newPasswordError == '' ? false : true,\n      label: \"New Password\",\n      onChange: this.handleInputChange.bind(this),\n      value: this.state.newPassword,\n      helperText: this.state.errors.newPasswordError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      type: \"Password\",\n      name: \"confirmPassword\",\n      id: \"confirmPassword\",\n      error: this.state.errors.confirmPasswordError == '' ? false : true,\n      label: \"Confirm Password\",\n      onChange: this.handleInputChange.bind(this),\n      value: this.state.confirmPassword,\n      helperText: this.state.errors.confirmPasswordError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: this.state.disabledButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, \"Update Password\")), this.state.alertDialogFlag && /*#__PURE__*/React.createElement(AlertDialog, {\n      message: alertDialogOptions.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 1\n      }\n    }, \" Password Policy : \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: '12px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 1\n      }\n    }, \"1. Password min 8 characters. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 38\n      }\n    }), \"2. Password max 15 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 38\n      }\n    }), \"3. Password must contain at least one number (0-9).\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 59\n      }\n    }), \"4. Password must contain at least one lowercase letter (a-z).\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 69\n      }\n    }), \"5. Password must contain at least one uppercase letter (A-Z).\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 69\n      }\n    }), \"6. Password must contain at least one special character (@#$%^&+=).\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 75\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/ChangePassword.js"],"names":["React","Component","FormControl","InputLabel","Input","Grid","TextField","Button","UserContext","changePassword","isCurrentPasswordValid","isPasswordsSame","passwordStrength","isNotEmpty","AlertDialog","alertDialogOptions","message","ChangePassword","constructor","props","validateForm","errors","validate","state","currentPassword","newPassword","confirmPassword","valid","Object","values","forEach","val","length","name","value","currentPasswordError","newPasswordError","confirmPasswordError","setState","updatePassword","event","alertDialogFlag","preventDefault","validateCurrentPassowrd","userid","then","jsondata","resetForm","color","target","disabledButton","userName","userDetails","JSON","parse","data","console","log","verifyPassowrd","handleInputChange","render","width","bind","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormControl, InputLabel, Input, Grid, TextField, Button } from '@material-ui/core';\r\nimport UserContext from '../components/GolbalContext'\r\nimport { changePassword, isCurrentPasswordValid } from './../util/api';\r\nimport { isPasswordsSame,passwordStrength,isNotEmpty} from './../util/validation';\r\nimport AlertDialog from './../util/AlertDialog';\r\nconst alertDialogOptions = {\r\n  message: ''\r\n}\r\nexport default class ChangePassword extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentPassword: '', newPassword: '', confirmPassword: '',disabledButton: false,verifyPassowrd :true,\r\n      errors:{newPasswordError:'',confirmPasswordError:'',currentPasswordError:''}\r\n    };\r\n  }\r\n\r\n  validateForm = (errors) => {\r\n\r\n    this.validate(\"currentPassword\",this.state.currentPassword);\r\n    this.validate(\"newPassword\",this.state.newPassword);\r\n    this.validate(\"confirmPassword\",this.state.confirmPassword);\r\n    let valid = true;\r\n    Object.values(errors).forEach(\r\n      // if we have an error string set valid to false\r\n      (val) => val.length > 0 && (valid = false)\r\n    );\r\n    return valid;\r\n  }\r\n\r\n\r\n\r\n\r\n  validate = (name,value)=>{\r\n    let errors = this.state.errors;\r\n    switch (name) {\r\n      case 'currentPassword': \r\n      errors.currentPasswordError =isNotEmpty(value);\r\n        break;\r\n      case 'newPassword': \r\n      errors.newPasswordError = isNotEmpty(value);\r\n        if(!isNotEmpty(value)){\r\n          errors.newPasswordError=passwordStrength(value);\r\n         }  \r\n      break;\r\n      case 'confirmPassword': errors.confirmPasswordError =  isNotEmpty(value);\r\n        break;\r\n   \r\n      default:\r\n      break;\r\n  }\r\n  this.setState({errors});\r\n\r\n}\r\n\r\n\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    this.setState({ [name]: value });\r\n    this.validate(name,value);\r\n\r\n  }\r\n  resetForm() {\r\n    this.setState({ newPassword: '' });\r\n    this.setState({ confirmPassword: '' });\r\n    this.setState({ currentPassword: '' });\r\n    let errors = this.state.errors;\r\n    errors.currentPasswordError=\"\";\r\n    errors.confirmPasswordError=\"\";\r\n    errors.newPasswordError=\"\";    \r\n    this.setState({errors});\r\n  }\r\n updatePassword =(event) => {\r\n    let errors = this.state.errors;\r\n    this.setState({ alertDialogFlag: false });\r\n    event.preventDefault();\r\n    // console.log(this.state.currentPassword)\r\n    if(this.validateCurrentPassowrd(this.state.currentPassword)){\r\n      if(this.validateForm(errors)){ \r\n        if (isPasswordsSame(this.state.newPassword, this.state.confirmPassword)) {\r\n            changePassword(UserContext.userid, this.state.newPassword).then((jsondata) => {\r\n            this.resetForm();\r\n            alertDialogOptions.message =<span style={{color:\"green\"}}>Password Changed Sucessfully</span>;\r\n            this.setState({ alertDialogFlag: true });\r\n            // window.location.href = \"http://localhost:3000/\";\r\n            // window.location.href = \"https://digihubdev.tatastrive.com\";\r\n            // window.location.href = \"https://digihubtest.tatastrive.com\";\r\n            // window.location.href = \"https://digihub.tatastrive.com\";\r\n           \r\n    \r\n          });\r\n        }\r\n        else {\r\n          errors.confirmPasswordError='New and confirm password are not same';\r\n          this.setState({errors});\r\n          \r\n            }\r\n      }  \r\n    }  \r\n}\r\n\r\n\r\n  isCurrentPasswordValid = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    this.setState({ ...this.state, currentPassword: value });\r\n    this.setState({disabledButton: false });\r\n  }\r\n\r\n// Validate Current password\r\nvalidateCurrentPassowrd=(currentPassword)=>{\r\n    let errors = this.state.errors;\r\n    this.validate(currentPassword,currentPassword);\r\n    isCurrentPasswordValid(UserContext.userName, currentPassword).then((jsondata) => {\r\n      let userDetails = JSON.parse(jsondata.data);\r\n      console.log(\"datalength>>>>>>>>>>\",userDetails)\r\n      if (userDetails.length == 0) {\r\n        // errors.currentPasswordError='Current Password is not valid';\r\n        // this.setState({errors});\r\n        // this.setState({ ...this.state, disabledButton: true });\r\n        // verifyPassowrd = false\r\n        this.setState({verifyPassowrd : false});\r\n        console.log(\"point 1\")\r\n        return this.state.verifyPassowrd;\r\n      }\r\n      else {\r\n        errors.currentPasswordError=\"\";\r\n        this.setState({errors});\r\n        // verifyPassowrd = true\r\n        this.setState({verifyPassowrd : true});\r\n        console.log(\"point 2\")\r\n        return this.state.verifyPassowrd;\r\n      }\r\n    });\r\n    // console.log(this.state.verifyPassowrd)\r\n    // return this.state.verifyPassowrd;\r\n  }\r\n    \r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n        <form onSubmit={this.updatePassword} method=\"post\">\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <FormControl>\r\n                <h5>Change Password</h5>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} sm={3}>\r\n              <FormControl>\r\n                <TextField type=\"Password\" name=\"currentPassword\" id=\"currentPassword\"\r\n                  error={this.state.errors.currentPasswordError==''?false:true}\r\n                  label=\"Current Password\" onChange={this.isCurrentPasswordValid.bind(this)}\r\n                  value={this.state.currentPassword}\r\n                  helperText={this.state.errors.currentPasswordError}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={3}>\r\n              <FormControl>\r\n                <TextField type=\"Password\" name=\"newPassword\" id=\"newPassword\"\r\n                  error={this.state.errors.newPasswordError==''?false:true}\r\n                  label=\"New Password\" \r\n                  \r\n                  onChange={this.handleInputChange.bind(this)}\r\n                  value={this.state.newPassword}\r\n                  helperText={this.state.errors.newPasswordError}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={3}>\r\n              <FormControl>\r\n                <TextField type=\"Password\" name=\"confirmPassword\" id=\"confirmPassword\"\r\n                  error={this.state.errors.confirmPasswordError==''?false:true}\r\n                  label=\"Confirm Password\"\r\n                  onChange={this.handleInputChange.bind(this)}\r\n                  value={this.state.confirmPassword}\r\n                  helperText={this.state.errors.confirmPasswordError}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <br />\r\n          <Button variant=\"contained\" size=\"small\" type=\"submit\" color=\"primary\" disabled={this.state.disabledButton}>Update Password</Button>\r\n        </form>\r\n    \r\n\r\n        {\r\n          (this.state.alertDialogFlag) && <AlertDialog message={alertDialogOptions.message}></AlertDialog>\r\n        }\r\n\r\n<br/><br/><br/>\r\n\r\n<div style={{fontWeight: 'bold'}}> Password Policy : </div> <br/> \r\n<span style={{fontSize: '12px'}}>\r\n       1. Password min 8 characters. <br/>\r\n       2. Password max 15 characters.<br/>\r\n       3. Password must contain at least one number (0-9).<br/>\r\n       4. Password must contain at least one lowercase letter (a-z).<br/>\r\n       5. Password must contain at least one uppercase letter (A-Z).<br/>\r\n       6. Password must contain at least one special character (@#$%^&+=).<br/>\r\n       </span>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}