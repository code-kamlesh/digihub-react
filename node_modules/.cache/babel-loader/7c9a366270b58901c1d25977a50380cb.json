{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport parseDate from './parseDate'; // https://hexdocs.pm/xlsxir/number_styles.html\n\nvar BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 36, 45, 46, 47, 50, 57];\nexport default function getCellValue(value, type, _ref) {\n  var getInlineStringValue = _ref.getInlineStringValue,\n      getStyleId = _ref.getStyleId,\n      styles = _ref.styles,\n      values = _ref.values,\n      properties = _ref.properties,\n      options = _ref.options;\n\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n';\n  } // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n\n\n  switch (type) {\n    // If the cell contains formula string.\n    case 'str':\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n    // If the cell contains an \"inline\" (not \"shared\") string.\n\n    case 'inlineStr':\n      value = getInlineStringValue();\n\n      if (value === undefined) {\n        throw new Error(\"Unsupported \\\"inline string\\\" cell value structure\"); // : ${cellNode.textContent}`)\n      }\n\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n    // If the cell contains a \"shared\" string.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      value = values[parseInt(value)];\n      value = value.trim();\n\n      if (value === '') {\n        value = undefined;\n      }\n\n      break;\n\n    case 'b':\n      value = value === '1' ? true : false;\n      break;\n    // Stub: blank stub cell that is ignored by data processing utilities.\n\n    case 'z':\n      value = undefined;\n      break;\n    // Error: `value` is a numeric code.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n\n    case 'e':\n      value = decodeError(value);\n      break;\n    // Date: a string to be parsed as a date.\n    // (usually a string in \"ISO 8601\" format)\n\n    case 'd':\n      if (value === undefined) {\n        break;\n      }\n\n      value = new Date(value);\n      break;\n\n    case 'n':\n      if (value === undefined) {\n        break;\n      }\n\n      value = parseFloat(value); // XLSX does have \"d\" type for dates, but it's not commonly used.\n      //  specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      //\n      // Format IDs:\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\n      //\n\n      var styleId = getStyleId();\n\n      if (styleId) {\n        // styleId = parseInt(styleId)\n        var style = styles[styleId];\n\n        if (!style) {\n          throw new Error(\"Cell style not found: \".concat(styleId));\n        }\n\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 || options.dateFormat && style.numberFormat.template === options.dateFormat || options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template)) {\n          value = parseDate(value, properties);\n        }\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Cell type not supported: \".concat(type));\n  } // Convert empty values to `null`.\n\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  return value;\n} // Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!';\n\n    case 0x07:\n      return '#DIV/0!';\n\n    case 0x0F:\n      return '#VALUE!';\n\n    case 0x17:\n      return '#REF!';\n\n    case 0x1D:\n      return '#NAME?';\n\n    case 0x24:\n      return '#NUM!';\n\n    case 0x2A:\n      return '#N/A';\n\n    case 0x2B:\n      return '#GETTING_DATA';\n\n    default:\n      // Such error code doesn't exist. I made it up.\n      return \"#ERROR_\".concat(errorCode);\n  }\n}\n\nfunction isDateTemplate(template) {\n  var tokens = template.split(/\\W+/);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../source/read/parseCellValue.js"],"names":["BUILT_IN_DATE_NUMBER_FORMAT_IDS","getInlineStringValue","getStyleId","styles","values","properties","options","type","value","parseInt","decodeError","parseFloat","styleId","style","isDateTemplate","parseDate","tokens","template","token"],"mappings":"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","sourcesContent":["import parseDate from './parseDate'\r\n\r\n// https://hexdocs.pm/xlsxir/number_styles.html\r\nconst BUILT_IN_DATE_NUMBER_FORMAT_IDS = [14,15,16,17,18,19,20,21,22,27,30,36,45,46,47,50,57]\r\n\r\nexport default function getCellValue(value, type, {\r\n\tgetInlineStringValue,\r\n\tgetStyleId,\r\n\tstyles,\r\n\tvalues,\r\n\tproperties,\r\n\toptions\r\n}) {\r\n  if (!type) {\r\n    // Default cell type is \"n\" (numeric).\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    type = 'n'\r\n  }\r\n\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    // If the cell contains formula string.\r\n    case 'str':\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains an \"inline\" (not \"shared\") string.\r\n    case 'inlineStr':\r\n      value = getInlineStringValue()\r\n      if (value === undefined) {\r\n        throw new Error(`Unsupported \"inline string\" cell value structure`) // : ${cellNode.textContent}`)\r\n      }\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    // If the cell contains a \"shared\" string.\r\n    // \"Shared\" strings is a way for an Excel editor to reduce\r\n    // the file size by storing \"commonly used\" strings in a dictionary\r\n    // and then referring to such strings by their index in that dictionary.\r\n    case 's':\r\n      // If a cell has no value then there's no `<c/>` element for it.\r\n      // If a `<c/>` element exists then it's not empty.\r\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\r\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\r\n      value = values[parseInt(value)]\r\n      value = value.trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    case 'b':\r\n      value = value === '1' ? true : false\r\n      break\r\n\r\n    // Stub: blank stub cell that is ignored by data processing utilities.\r\n    case 'z':\r\n      value = undefined\r\n      break\r\n\r\n    // Error: `value` is a numeric code.\r\n    // They also wrote: \"and `w` property stores its common name\".\r\n    // It's unclear what they meant by that.\r\n    case 'e':\r\n      value = decodeError(value)\r\n      break\r\n\r\n    // Date: a string to be parsed as a date.\r\n    // (usually a string in \"ISO 8601\" format)\r\n    case 'd':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = new Date(value)\r\n      break\r\n\r\n    case 'n':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = parseFloat(value)\r\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\r\n      //  specific format for dates.\r\n      // Sometimes a date can be heuristically detected.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      //\r\n      // Format IDs:\r\n      // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n      //\r\n      const styleId = getStyleId()\r\n      if (styleId) {\r\n        // styleId = parseInt(styleId)\r\n        const style = styles[styleId]\r\n        if (!style) {\r\n          throw new Error(`Cell style not found: ${styleId}`)\r\n        }\r\n        if (BUILT_IN_DATE_NUMBER_FORMAT_IDS.indexOf(parseInt(style.numberFormat.id)) >= 0 ||\r\n          (options.dateFormat && style.numberFormat.template === options.dateFormat) ||\r\n          (options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template))) {\r\n          value = parseDate(value, properties)\r\n        }\r\n      }\r\n      break\r\n\r\n    default:\r\n      throw new TypeError(`Cell type not supported: ${type}`)\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// Decodes numeric error code to a string code.\r\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\nfunction decodeError(errorCode) {\r\n  // While the error values are determined by the application,\r\n  // the following are some example error values that could be used:\r\n  switch (errorCode) {\r\n    case 0x00:\r\n      return '#NULL!'\r\n    case 0x07:\r\n      return '#DIV/0!'\r\n    case 0x0F:\r\n      return '#VALUE!'\r\n    case 0x17:\r\n      return '#REF!'\r\n    case 0x1D:\r\n      return '#NAME?'\r\n    case 0x24:\r\n      return '#NUM!'\r\n    case 0x2A:\r\n      return '#N/A'\r\n    case 0x2B:\r\n      return '#GETTING_DATA'\r\n    default:\r\n      // Such error code doesn't exist. I made it up.\r\n      return `#ERROR_${errorCode}`\r\n  }\r\n}\r\n\r\nfunction isDateTemplate(template) {\r\n  const tokens = template.split(/\\W+/)\r\n  for (const token of tokens) {\r\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n"]},"metadata":{},"sourceType":"module"}