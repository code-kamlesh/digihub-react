{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\BulkUpload.js\";\nimport React, { Component } from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport UserContext from '../components/GolbalContext';\nimport { fetchNotCompletedBatchDetails, saveBulkMetaData, saveBulkStudentData } from '../util/api';\nimport excel from 'xlsx';\nlet today = new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\nlet yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd;\nexport default class bulkUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: [{\n        value: \"Mobilization\",\n        label: \"Mobilization\"\n      }, {\n        value: \"Enrollment\",\n        label: \"Enrollment\"\n      }],\n      regions: [{\n        value: 'All',\n        label: 'All'\n      }, {\n        value: 'East',\n        label: 'East'\n      }, {\n        value: 'west',\n        label: 'West'\n      }, {\n        value: 'North',\n        label: 'North'\n      }, {\n        value: 'South',\n        label: 'South'\n      }],\n      batchList: [],\n      Selectedoption: \"\"\n    };\n  } // optind change handler\n\n\n  handleOptionsChange(selectname, event) {\n    const value = event;\n    console.log(value);\n    this.setState({\n      Selectedoption: value\n    });\n\n    if (event === \"Enrollment\") {\n      // setDisabled(false)\n      fetchNotCompletedBatchDetails(UserContext.centerId).then(jsondata => {\n        let result = JSON.parse(jsondata.data);\n        console.log(\"center : \", result);\n        result.forEach(element => {\n          //  console.log(\"Condition for date \" , element.freezeDate > today)\n          if (element.freezeDate > today) {\n            this.state.batchList.push({\n              \"value\": element.batchId,\n              \"label\": element.batchName\n            });\n          }\n        });\n      });\n    } else {// setDisabled(true)\n    }\n  } // Hhandle batch changes\n\n\n  handleBatchChange(selectname, event) {\n    // console.log(\"selected optins : \",this.state.Selectedoption)\n    let value = event;\n    console.log(event);\n    let index = this.state.batchList.findIndex(object => object.value == value);\n    let batchname = this.state.batchList[index].label; // console.log(this.state.batcheList)\n\n    this.setState({\n      batchId: event\n    });\n    console.log();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \"Options\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"Selectedoption\",\n      id: \"Selectedoption\",\n      options: this.state.options,\n      value: this.state.Selectedoption || '',\n      key: this.state.Selectedoption || '',\n      onChange: this.handleOptionsChange.bind(this, 'Selectedoption') // helperText={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.label : ''}\n      // error={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.value : ''}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"Batches\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"SelectedBatch\",\n      id: \"SelectedBatch\",\n      key: this.state.SelectedBatch || '',\n      options: this.state.batchList,\n      value: this.state.SelectedBatch || '',\n      onChange: this.handleBatchChange.bind(this, 'SelectedBatch') // helperText={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.label : ''}\n      // error={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.value : ''}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/BulkUpload.js"],"names":["React","Component","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","useHistory","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","UserContext","fetchNotCompletedBatchDetails","saveBulkMetaData","saveBulkStudentData","excel","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","bulkUpload","constructor","props","state","options","value","regions","batchList","Selectedoption","handleOptionsChange","selectname","event","console","log","setState","centerId","then","jsondata","result","JSON","parse","data","forEach","element","freezeDate","push","batchId","batchName","handleBatchChange","index","findIndex","object","batchname","render","width","bind","SelectedBatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {DropzoneArea} from 'material-ui-dropzone';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchNotCompletedBatchDetails,saveBulkMetaData,saveBulkStudentData} from '../util/api';\r\nimport excel from 'xlsx';\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + '-' + mm + '-' + dd;\r\n\r\nexport default class bulkUpload extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      options:[{value:\"Mobilization\", label:\"Mobilization\"},\r\n                {value:\"Enrollment\" ,label:\"Enrollment\"}],\r\n    regions: [{ value: 'All', label: 'All' },\r\n            { value: 'East', label: 'East' },\r\n            { value: 'west', label: 'West' },\r\n            { value: 'North', label: 'North' },\r\n            { value: 'South', label: 'South' }],\r\n      batchList:[],\r\n      Selectedoption:\"\",\r\n\r\n\r\n    }\r\n  }\r\n// optind change handler\r\n  handleOptionsChange(selectname,event){\r\n    const value = event\r\n    console.log(value)\r\n    this.setState({\r\n      Selectedoption: value\r\n    })\r\n    \r\n    if(event === \"Enrollment\"){\r\n      // setDisabled(false)\r\n      fetchNotCompletedBatchDetails(UserContext.centerId).then((jsondata) => {\r\n        let result = JSON.parse(jsondata.data);\r\n        console.log(\"center : \",result)\r\n       result.forEach(element => {\r\n        //  console.log(\"Condition for date \" , element.freezeDate > today)\r\n          if(element.freezeDate > today ){\r\n            this.state.batchList.push({\r\n              \"value\": element.batchId,\r\n              \"label\": element.batchName\r\n            })\r\n          }\r\n       });\r\n      })\r\n    }\r\n    else{\r\n      // setDisabled(true)\r\n    }\r\n  }\r\n   // Hhandle batch changes\r\n   handleBatchChange(selectname,event){\r\n    // console.log(\"selected optins : \",this.state.Selectedoption)\r\n    \r\n    let value = event\r\n    console.log(event)\r\n    let index = this.state.batchList.findIndex((object) => object.value == value)\r\n    let batchname = this.state.batchList[index].label\r\n    // console.log(this.state.batcheList)\r\n    this.setState({\r\n      batchId:event\r\n    })\r\n    console.log()\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div style={{ width: '100%' }}>\r\n      <Grid container>\r\n      <Grid item xs={12}> </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Options</InputLabel>\r\n            <SingleSelect\r\n              name=\"Selectedoption\" id=\"Selectedoption\"\r\n              options={this.state.options}\r\n              value={this.state.Selectedoption || ''}\r\n              key={this.state.Selectedoption || ''}\r\n              onChange={this.handleOptionsChange.bind(this, 'Selectedoption')}\r\n              // helperText={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.label : ''}\r\n              // error={this.state.errors.Selectedoption != undefined ? this.state.errors.Selectedoption.value : ''}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={2}></Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Batches</InputLabel>\r\n            <SingleSelect\r\n              name=\"SelectedBatch\" id=\"SelectedBatch\"\r\n              key={this.state.SelectedBatch || ''}\r\n              options={this.state.batchList}\r\n              value={this.state.SelectedBatch || ''}\r\n              onChange={this.handleBatchChange.bind(this, 'SelectedBatch')}\r\n              // helperText={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.label : ''}\r\n              // error={this.state.errors.SelectedBatch != undefined ? this.state.errors.SelectedBatch.value : ''}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <br />\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}