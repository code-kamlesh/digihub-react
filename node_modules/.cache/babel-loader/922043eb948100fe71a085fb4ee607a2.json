{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\History.js\";\nimport React, { Component } from 'react';\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { fetchBulkData, fetchStudentFile } from './../util/api';\n\nconst XLSX = require('xlsx');\n\nexport default class History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disable: false,\n      metaData: []\n    };\n  }\n\n  async loadData() {\n    const response = await fetchBulkData().then(jsondata => {\n      var metaData = [];\n      let result = JSON.parse(jsondata.data);\n      var arrData = {};\n      console.log(\"Bulk Meta Data : \", result);\n      result[0].forEach((element, id) => {\n        arrData = element; // console.log(element)\n\n        metaData = [...metaData, {\n          \"regId\": arrData.regId,\n          \"uploadFileName\": arrData.uploadFileName,\n          \"centerName\": arrData.centerName,\n          \"records\": arrData.records,\n          \"uploadDate\": arrData.uploadDate\n        }];\n      });\n      this.setState({\n        metaData\n      });\n      console.log(this.state.metaData);\n    });\n  } // Download the data\n\n\n  downloadFile(e, x) {\n    let studentData = [];\n    const regId = e;\n    const file_name = x; // console.log(x)\n\n    var data = {};\n    fetchStudentFile(regId).then(jsondata => {\n      let res = JSON.parse(jsondata.data);\n      res[0].forEach(element => {\n        // console.log(res)\n        element.forEach(value => {\n          data = element;\n        });\n      });\n      console.log(\"Student data in bulk : \", res);\n      const workSheet = XLSX.utils.json_to_sheet(res);\n      const workBook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workBook, workSheet, file_name); // Genrarting buffer if there is large amount of data\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"buffer\"\n      }); // Binary String\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"binary\"\n      });\n      const x = XLSX.writeFile(workBook, file_name);\n      console.log(\"File : \", x);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      onClick: this.loadData.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }\n    }, \"Click to Load Data\")), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      style: {\n        width: '80%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Reg Id\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"File Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, \"Center Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, \"Records\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, \"Upload Date\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, this.state.metaData.map((dataValue, id) => /*#__PURE__*/React.createElement(TableRow, {\n      id: \"tablerow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }, dataValue.regId), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    }, dataValue.uploadFileName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }, dataValue.centerName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 23\n      }\n    }, dataValue.records), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 23\n      }\n    }, dataValue.uploadDate), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.downloadFile(dataValue.regId, dataValue.uploadFileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 35\n      }\n    }, \" Download \"))))))));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/History.js"],"names":["React","Component","Checkbox","InputLabel","Input","Grid","Button","Table","TableBody","TableCell","TableHead","TableRow","fetchBulkData","fetchStudentFile","XLSX","require","History","constructor","props","state","disable","metaData","loadData","response","then","jsondata","result","JSON","parse","data","arrData","console","log","forEach","element","id","regId","uploadFileName","centerName","records","uploadDate","setState","downloadFile","e","x","studentData","file_name","res","value","workSheet","utils","json_to_sheet","workBook","book_new","book_append_sheet","write","bookType","type","writeFile","render","width","bind","map","dataValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {fetchBulkData,fetchStudentFile} from './../util/api';\r\n\r\nconst XLSX = require('xlsx')\r\nexport default class History extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            disable:false,\r\n            metaData:[],\r\n        }\r\n        \r\n    }\r\nasync loadData(){\r\n       const response = await fetchBulkData().then((jsondata) => {\r\n            var metaData=[]\r\n            let result = JSON.parse(jsondata.data);\r\n            var arrData = {}\r\n            console.log(\"Bulk Meta Data : \",result)\r\n            result[0].forEach((element ,id)=> {\r\n                arrData=element\r\n                // console.log(element)\r\n                metaData=[\r\n                    ...metaData,\r\n                    {\r\n                        \"regId\":arrData.regId,\r\n                        \"uploadFileName\": arrData.uploadFileName,\r\n                        \"centerName\": arrData.centerName,\r\n                        \"records\":arrData.records,\r\n                        \"uploadDate\":arrData.uploadDate\r\n                    }]\r\n            });\r\n           this.setState({metaData})\r\n            console.log(this.state.metaData)\r\n        })\r\n    }\r\n\r\n    // Download the data\r\n    downloadFile(e,x){\r\n        let studentData=[]\r\n            const regId= e\r\n            const file_name = x\r\n            // console.log(x)\r\n            var data={}\r\n            fetchStudentFile(regId).then((jsondata)=>{\r\n                let res = JSON.parse(jsondata.data)\r\n                res[0].forEach(element=>{\r\n                    // console.log(res)\r\n                    element.forEach(value=>{\r\n                       data = element\r\n                    })\r\n                })\r\n                console.log(\"Student data in bulk : \",res)\r\n                const workSheet = XLSX.utils.json_to_sheet(res)\r\n                const workBook = XLSX.utils.book_new()\r\n\r\n                XLSX.utils.book_append_sheet(workBook,workSheet,file_name)\r\n// Genrarting buffer if there is large amount of data\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\r\n\r\n                // Binary String\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\r\n\r\n                const x = XLSX.writeFile(workBook,file_name)\r\n                console.log(\"File : \",x)\r\n            })\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{ width: '100%' }}>\r\n\r\n            <Grid container  justify=\"flex-end\" alignItems=\"flex-end\">\r\n\r\n             <Button type=\"submit\" color=\"primary\"  onClick={this.loadData.bind(this)}>\r\n               Click to Load Data\r\n             </Button>\r\n             </Grid>\r\n\r\n            <Grid>\r\n             <Table aria-label=\"simple table\"  style={{ width: '80%'}}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Reg Id</TableCell>\r\n                <TableCell>File Name</TableCell>\r\n                <TableCell>Center Name</TableCell>\r\n                <TableCell>Records</TableCell>\r\n                <TableCell>Upload Date</TableCell>\r\n\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {this.state.metaData.map((dataValue, id) => (\r\n                    <TableRow id=\"tablerow\">\r\n                      <TableCell>{dataValue.regId}</TableCell>\r\n                      <TableCell>{dataValue.uploadFileName}</TableCell>\r\n                      <TableCell>{dataValue.centerName}</TableCell>\r\n                      <TableCell>{dataValue.records}</TableCell>\r\n                      <TableCell>{dataValue.uploadDate}</TableCell>\r\n                      <TableCell>{<Button variant=\"contained\" color=\"primary\" onClick={() => this.downloadFile(dataValue.regId,dataValue.uploadFileName)} > Download </Button>}</TableCell>\r\n                    </TableRow>))}\r\n            </TableBody>\r\n           </Table>\r\n\r\n           </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}