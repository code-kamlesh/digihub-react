{"ast":null,"code":"import { serviceEndPoint } from './../util/serviceEndPoint';\nimport UserContext from './../components/GolbalContext';\nimport { isSessionValid, isTokenValid } from './../util/session.js';\nimport { regenerateToken } from './validation';\nexport async function fetchMasterSalutation() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.salutationServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllCenter() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchMasterGenderDetails() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.genderServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchPincodeData(pincode) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":' + pincode + '}]}');\n    return fetch(serviceEndPoint.cityVillageServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function businessCaseSaveOrUpdate(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : ' + data + '}');\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessCaseMetaData(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessCaseQuestions() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : []}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseBriefMdmService, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocuments(engagementId, documentType, typeOfDocument) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"engagementId\":' + engagementId + ',\"documentType\":\"' + documentType + '\",\"typeOfDocument\":\"' + typeOfDocument + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBatchDetails(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatches\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBatchDetailsForBatchOwner(batchOwner, centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatchesForBatchOwner\", \"data\" : [{\"domainFacilitator\":' + batchOwner + ',\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetcRoleDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchAll\", \"data\" : []}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.roleServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function passwordReset(dbUserId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"passwordReset\", \"data\" : [{\"id\":' + dbUserId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function enrollStudent(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltobatch\", \"data\" : [{' + data + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function changeStudentStatus(data) {\n  if (isSessionValid()) {\n    try {\n      let requestFormData = new FormData();\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStatus\", \"data\" : [{' + data + '}]}');\n      if (!isTokenValid()) await regenerateToken();\n      return fetch(serviceEndPoint.engagementServiceEndPoint, {\n        method: \"POST\",\n        headers: {\n          'Authorization': 'Bearer ' + UserContext.token\n        },\n        body: requestFormData\n      }).then(response => response.json());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return null;\n}\nexport async function fectEnrollmentDetails(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetails\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectUserDetails(userId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectUserNameFromId(userId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json()).then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data);\n      alert(jsonobjects[0].firstName);\n      return jsonobjects[0].firstName;\n    });\n  }\n\n  return null;\n}\nexport async function fectUserRoleDetails(roleId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : [{\"id\":\"' + roleId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.roleServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectAddressDetails(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllAddressForEntity\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"U\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // address for placement\n\nexport async function fectAddressDetailsByAddressID(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAddressById\", \"data\" : [{\"id\" : ' + id + ' }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStateDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.stateServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function changePassword(userId, newPassword) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"changePassword\" + '\", \"data\" : [{\"id\" : ' + userId + ',\"password\" : \"' + newPassword + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAddressDetailsBasedOnPincode(pincode) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":' + pincode + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.cityVillageServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveUserDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveUserDetails\", \"data\" : [' + data + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveAddressDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAddress\", \"data\" : [' + data + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function sendResetPasswordLink(userName) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"resetPassword\", \"data\" : [{\"userName\":\"' + userName + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUsersByCenterId(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterId\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDetailsById(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetailsById\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDetails(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function mapUserToRole(userId, centerId, roleId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"saveUserCenterRoleMapDetails\", \"data\" : [{\"userId\":' + userId + ',\"centerId\":' + centerId + ',\"roleId\":' + roleId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEnrollmentDetailsByBatchId(batchId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchEnrollmentDetailsByBatchId\", \"data\" : [{\"batchId\":' + batchId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStudentDataByEngagementId(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAllStudentDataByEngagementId\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function captureStudentEngagementDetails(dbUserId, centerId, userid) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function captureStudentEngagementDetailsB(dbUserId, centerId, userid, engId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ',\"linkedEngagementId\" : ' + engId + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function isCurrentPasswordValid(user, currentPassword) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"isCurrentPasswordValid\", \"data\" :[{\"userName\"  : \"' + userName + '\" , \"password\":\"' + currentPassword + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBatchDetailsByBatchId(batchId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"getBatchDetailsByBatchId\", \"data\" :[{\"batchId\"  : \"' + batchId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function BusinessIdeaEvaluationSaveOrUpdate(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveBusinessIdeaEvaluationDetails\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function FetchFinalScoreForBusinessIdea(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculateFinalScore\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessIdeaEvaluationData(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getBusinessIdeaEvaluationDetails\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCourseDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.courseServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveInterestInventoryCode(engagementId, finalScore, createdBy) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureInterestInventory\", \"data\" : [{\"engagementId\":' + engagementId + ',\"finalScore\":\"' + finalScore + '\",\"createdBy\":' + createdBy + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchInterestInventoryCode(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewInterestInventoryByEngId\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCentersOfUser(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllUserScopes\", \"data\" : [{\"userId\":' + UserContext.userid + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCentersDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcenter\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchRoleDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.roleServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function setDefaultSettings(userId, roleMapId, centerId, programId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"setDefaultSettings\", \"data\" : [{\"userId\":' + userId + ',\"roleMapId\":' + roleMapId + ',\"centerId\":' + centerId + ',\"programId\":' + programId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData,\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      }\n    }).then(response => response.json());\n  }\n\n  return null;\n} // export async function saveEducationDetails(data){\n//     if(isSessionValid()){\n//         let formData = new FormData();\n//         formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"captureAllEducation\" +'\", \"data\" : ' + JSON.stringify(this.state.rows) + '}');\n//         return fetch(serviceEndPoint.educationServiceEndPoint, {\n//         method: \"POST\",\n//         headers: {\n//           'Authorization': 'Bearer '+Cookies.get('token')\n//       },  \n//         body: formData  \n//         }).then(response => response.json());\n//     }\n//     return null;\n//     }\n\nexport async function saveCounsellingDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : [' + data + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.counsellingServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCounsellingDetails(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.counsellingServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCoursesByHollandCode(hollandCode) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByHollandCode\", \"data\" : [{\"hollandcode\":\"' + hollandCode + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findByAadharNo(aadharNo) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"isAadharNoDuplicate\", \"data\" : [{\"aadharNo\":\"' + aadharNo + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function searchByAadharNo(aadharNo) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByAadharNumber\", \"data\" : [{\"aadharNo\":\"' + aadharNo + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId(firstName, lastName, dob, primaryContactNumber, primaryEmailId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId\", \"data\" : [{\"firstName\":\"' + firstName + '\",\"lastName\":\"' + lastName + '\",\"dob\":\"' + dob + '\",\"primaryContactNumber\":\"' + primaryContactNumber + '\",\"primaryEmailId\":\"' + primaryEmailId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentDetailsByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewStudentEngagementById\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchNotCompletedBatchDetails(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getNotCompletedBatches\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function login(token, action, email, password) {\n  let requestFormData = new FormData();\n  requestFormData.append('data', '{\"token\" : \"' + token + '\", \"action\" : \"' + action + '\", \"data\" : [{\"userName\":\"' + email + '\",\"password\":\"' + password + '\"}]}');\n  return fetch(serviceEndPoint.loginService, {\n    method: \"POST\",\n    body: requestFormData\n  }).then(response => response.json());\n}\nexport async function fetchUserScope(userid) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getUserScope\", \"data\" : [{\"userId\":\"' + userid + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBasicData(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewBeneficiaryDetailsById\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAddressData(id) {\n  if (isSessionValid()) {\n    let formData2 = new FormData();\n    formData2.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllAddressForEntity\" + '\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"S\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData2\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function subMitBasicData(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : [' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function submitAddressData(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : [' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function submitEducationData(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : ' + JSON.stringify(data) + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.educationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEducationData(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllEducationForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.educationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveBatchDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" :[' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveObservationDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : ' + JSON.stringify(data) + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.observationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchObservationdetails(engagementId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllObservationsForUser\" + '\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.observationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchFamilydetails(dbUserId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllFamilyDetailsForUser\" + '\", \"data\" : [{\"dbUserId\":' + dbUserId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveFamilyDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : ' + JSON.stringify(data) + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchFamilyDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllFamilyDetailsForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchPlacementDetailsByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewPlacementDetailsByEngagementId\" + '\",  \"data\" : [{\"engagementId\" : ' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.placementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchExperienceDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllExperienceForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} //Socio Details added ashish\n\nexport async function saveSocioDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" :[ ' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveExpDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" :[ ' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function savePlacementDetails(data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"save\" , \"data\" :[ ' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.placementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} //ashish new screen family\n\nexport async function saveFamilyDetailsNew(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : [' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchExpDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllExperienceForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} //ashish socio economic\n\nexport async function fetchSocioDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewSocioEconomicById\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEvaluationData(eng) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewByEngagementId\", \"data\" : [{ \"engagementId\" : ' + eng + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchKnackScore(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"get\", \"data\" : [{ \"engagementId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.knackServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveEvaluationData(data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"captureAllEvaluationDetails\" + '\", \"data\" : ' + JSON.stringify(data) + ' }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentDataForList(role) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n\n    if (role === 3) {\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenterAndMultipleStatus\", \"data\" : [{\"centerId\":' + UserContext.centerId + '}]}');\n    } else {\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenter\", \"data\" : [{\"centerId\":' + UserContext.centerId + '}]}');\n    }\n\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function calculatePercentile() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculatePercentile\", \"data\" : [{\"createdBy\":' + UserContext.userid + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findNumberOfBeneficiaryInCenterByStatus(centerId, studentEngagementStatus) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"NumberOfBeneficiaryInCenterByStatus\", \"data\" : [{\"centerId\":\"' + centerId + '\",\"studentEngagementStatus\":\"' + studentEngagementStatus + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.dashboardService, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchQualificationDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.qualificationServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocumentsByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementId\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocumentsByEngagementIdAndTypeOfDocument(engagementId, typeOfDocument) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementIdAndDocumentType\", \"data\" : [{\"engagementId\":' + engagementId + ',\"typeOfDocument\":\"' + typeOfDocument + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocumentsByUserIdAndTypeOfDocument(dbUserId, typeOfDocument) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"dbUserId\":' + dbUserId + ',\"typeOfDocument\":\"' + typeOfDocument + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function deleteDocumentById(basicDocId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"deleteDocument\", \"data\" : [{\"basicDocId\":' + basicDocId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterCapacity() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerCapacity, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessIdeaEvaluationQuestions() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessIdeaEvaluation, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findAllObservationdetails() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"findall\" + '\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.masterObservation, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterActiveCourses(centerId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"getActiveCourse\" + '\", \"data\" : [{\"centerId\" :' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerService, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCourseDetailsByIds(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcourse\", \"data\" :' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.courseServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function uploadDocument(dbUserId, engagementId, documentType, typeOfDocument, documentName, document, documentNumber) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureDocDetails\", \"data\" : [{\"dbUserId\":' + dbUserId + ',\"engagementId\":' + engagementId + ',\"documentType\":\"' + documentType + '\",\"typeOfDocument\":\"' + typeOfDocument + '\",\"documentName\":\"' + documentName + '\",\"base64File\":\"' + document + '\",\"documentNo\":\"' + documentNumber + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchMasterExistingBusiness() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAll\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.mdmExistingBusiness, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveExistingBusiness(data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"saveExistingBusinessDetails\" , \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.existingBusiness, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchExistingBusinessDetails(engagementId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchExistingBusinessDetails\" , \"data\" :[{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.existingBusiness, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterCapacityByIds(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCapacityByCenter\", \"data\" :' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerCapacity, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStudentEngagementForUser(dbUserId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllStudentEngagementForUser\", \"data\" :[{\"dbUserId\":' + dbUserId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData,\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      }\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectEnrollmentDetailsByIds(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetailsByEngagementId\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterProgramMapping(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCenterProgramMapping\", \"data\" :[{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerProgramMapping, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchProgram(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findprogram\", \"data\" :' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.programservice, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchComponentsByProgramIdAndRoleId(programId, roleId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchByProgramIdAndRoleId\", \"data\" :[{\"programId\":' + programId + ',\"roleId\":' + roleId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.programrolecomponentmapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUsersByCenterIdAndRoleMapId(centerId, roleMapId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterIdAndRoleMapId\", \"data\" : [{\"centerId\":' + centerId + ',\"roleMapId\":' + roleMapId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEmployerDetails(accountStatus, typeOfRelationship) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findByAccountStatusAndTypeOfRelationshipLike\" , \"data\" : [{\"accountStatus\":\"' + accountStatus + '\",\"typeOfRelationship\":\"' + typeOfRelationship + '\"}]}');\n    return fetch(serviceEndPoint.employerservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getReports(pageNumber, pageSize, centerId, startDate, endDate, studentEngagementStatus, batchId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewData\" , \"data\" : [{\"pageNumber\":\"' + pageNumber + '\",\"pageSize\":\"' + pageSize + '\",\"centerId\":\"' + centerId + '\",\"startDate\":\"' + startDate + '\",\"endDate\":\"' + endDate + '\",\"studentEngagementStatus\":\"' + studentEngagementStatus + '\",\"batchId\":' + batchId + '}]}');\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function downloadReports(pageNumber, pageSize, centerId, startDate, endDate, studentEngagementStatus, batchId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"downloadExcel\" , \"data\" : [{\"pageNumber\":\"' + pageNumber + '\",\"pageSize\":\"' + pageSize + '\",\"centerId\":\"' + centerId + '\",\"startDate\":\"' + startDate + '\",\"endDate\":\"' + endDate + '\",\"studentEngagementStatus\":\"' + studentEngagementStatus + '\",\"batchId\":' + batchId + '}]}');\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentDropoutDetailByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewDropout\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.dropoutServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveDropoutDetails(effortSpent, engagementId, createdBy) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveDropout\", \"data\" : [{\"effortSpent\":\"' + effortSpent + '\",\"engagementId\":\"' + engagementId + '\",\"createdBy\":\"' + createdBy + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.dropoutServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function markDropout(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"markdropout\", \"data\" : [{' + data + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function updateReadyForDropout(engagementId, readyForDropout) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStudentEngagementDetails\", \"data\" : [{\"readyForDropout\":\"' + readyForDropout + '\",\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStudentDataByEngagementIdAndReadyForDropout(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAllStudentDataByEngagementIdAndReadyForDropout\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAttendanceDetailsByAttendanceDateAndBatchId(batchId, attendanceDate) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewAttendanceByBatchIdAndAttendanceDate\", \"data\" :[{\"batchId\":' + batchId + ',\"attendanceDate\":\"' + attendanceDate + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.attendanceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchRunningBatchDetails(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRunningBatches\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveAttendanceDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAllAttendance\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.attendanceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findSkillmithraByOrgId(orgId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgId\", \"data\" :[{ \"orgId\" : \"' + orgId + '\" }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getUdyogMitraAndSkillInstitute(orgType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithras\", \"data\" :[{\"orgType\" : \"' + orgType + '\" }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findInformalCourses() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByType\", \"data\" : [{\"type\" : \"informal\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.courseServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveInformalEnrollmentDetails(engagementId, batchId, courseId, updatedBy, startDate, endDate, orgId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltocourse\", \"data\" : [{\"engagementId\":\"' + engagementId + '\",\"batchId\":\"' + batchId + '\",\"courseId\":\"' + courseId + '\",\"updatedBy\":\"' + updatedBy + '\",\"startDate\":\"' + startDate + '\" , \"endDate\":\"' + endDate + '\",\"orgId\":\"' + orgId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // api for module list\n\nexport async function fetchcourseModuleList(selectedYear) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getModuleNameByYear\", \"data\" :[{\"year\" : \" ' + selectedYear + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API for sub Module list in table\n\nexport async function fetchsubModuleList(moduleId, selectedYear) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{ \"token\" : \"\", \"action\" : \"getSubtopicNameByYearAndModuleId\", \"data\" : [{\"moduleId\": \"' + moduleId + '\", \"year\":\"' + selectedYear + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API for loading table data\n\nexport async function fetchtabledata(batchId, isActive) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus\", \"data\" :[{\"batchId\" : \" ' + batchId + '\", \"isActive\" : \"' + isActive + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API for saved data if value id ic nor there\n\nexport async function saveCourseCovrageData(userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData(); // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\n\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"userId\":\"' + userId + '\", \"batchId\":\"' + batchId + '\", \"isActive\":\"' + isActive + '\", \"moduleId\":\"' + moduleId + '\", \"subtopicId\":\"' + subtopicId + '\", \"createdDate\":\"' + createdDate + '\", \"remarks\":\"' + remarks + '\", \"compDate\":\"' + compDate + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Api calling for data saving when value id is present\n\nexport async function saveCourseCovrageDatawithId(id, userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData(); // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\n\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"id\":\"' + id + '\", \"userId\":\"' + userId + '\", \"batchId\":\"' + batchId + '\", \"isActive\":\"' + isActive + '\", \"moduleId\":\"' + moduleId + '\", \"subtopicId\":\"' + subtopicId + '\", \"createdDate\":\"' + createdDate + '\", \"remarks\":\"' + remarks + '\", \"compDate\":\"' + compDate + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API call for submodule list\n\nexport async function fetchSubModulename(batchId, isActive) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus \" , \"data\" :[{\"batchId\":\"' + batchId + '\", \"isActive\" : \"' + isActive + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"post\",\n      header: {\n        'Authorization': 'Bearer ' + UserContext.token\n      }\n    }).then(response => response.json());\n  }\n\n  return null;\n} //API for loading table data for Course Coverage\n\nexport async function fetchtabledatawithModuleId(batchId, moduleId, isActive) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findByBatchIdAndModuleIdAndIsActive\", \"data\" :[{\"batchId\" : \"' + batchId + '\", \"moduleId\": \"' + moduleId + '\",\"isActive\" : \"' + isActive + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // fetching Centers By State Name\n\nexport async function fetchCenterByStateName(state) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"\", \"action\" : \"findallCenterbyState\" , \"data\" : [{\"state\" : \"' + state + '\"}]}');\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // ============ Api for Funder Mapping\n\nexport async function getBatchDetailsByBatchId(batchId, isActive, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"' + batchId + '\", \"isActive\":\"' + isActive + '\", \"fundingType\":\"' + fundingType + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getBatchDetailsByFunderId(funderId, isActive, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"funderId\" :\"' + funderId + '\", \"isActive\":\"' + isActive + '\", \"fundingType\":\"' + fundingType + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getBatchDetailsByBatchIdandFunderId(batchId, funderId, isActive, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"' + batchId + '\", \"funderId\" :\"' + funderId + '\", \"isActive\":\"' + isActive + '\", \"fundingType\":\"' + fundingType + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Fetching baised on Zone\n\nexport async function fetchStateByZone(zone) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findstatebyzone\", \"data\" : [{\"zone\":\"' + zone + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.stateServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveBatchFunderDetails(batchId, funderId, crmFunderId, isActive, fundingType, createdBy, createdOn, remarks) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveFunderMappingDetails\", \"data\" :[{\"batchId\": ' + batchId + ', \"funderId\": ' + funderId + ', \"crmFunderId\": \"' + crmFunderId + '\", \"isActive\": \"' + isActive + '\", \"fundingType\": \"' + fundingType + '\", \"createdBy\": ' + createdBy + ', \"createdOn\": \"' + createdOn + '\", \"remarks\": \"' + remarks + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function updateBatchFunderDetails(id, batchId, funderId, crmFunderId, isActive, remarks, updatedOn, updatedBy, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"UpdateExistingFunderMapping\", \"data\" :[{\"id\": ' + id + ', \"batchId\": ' + batchId + ', \"funderId\": ' + funderId + ',  \"crmFunderId\": \"' + crmFunderId + '\", \"isActive\": \"' + isActive + '\", \"fundingType\": \"' + fundingType + '\", \"updatedBy\": ' + updatedBy + ', \"updatedOn\": \"' + updatedOn + '\", \"remarks\": \"' + remarks + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getStudentStrengthByCenterIdAndStudentEngagementStatus(centerId, studentEngagementStatus) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"1234\", \"action\" : \"viewStrengthByEngagementStatus\" , \"data\" : [{ \"centerId\": \"' + centerId + '\", \"studentEngagementStatus\": \"' + studentEngagementStatus + '\" }]}');\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Informal sector\n// {\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\", \"data\" :[{\"orgType\" : \"udhyogmithra\",\"programId\":5}]}\n\nexport async function fetchSkillMithraByIdAndProgramId(orgType, programId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\" , \"data\" : [{ \"orgType\": \"' + orgType + '\", \"programId\": \"' + programId + '\" }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Buil upload\n// changes(add batch name)\n\nexport async function saveBulkStudentData(RegId, firstName, lastName, middleName, dob, aadharNo, batchName, highestQualification, passingYear, gender, religion, category, primaryContactNumber, primaryEmailId, collegeRegisterNo, itiGrade, itiTrade, addressLine1, villageName, district, state, pincode, createdOn, createdBy, status, remarks, reason) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveStudentDataBulk\", \"data\" : [{ \"regId\" : \"' + RegId + '\", \"firstName\": \"' + firstName + '\", \"lastName\" : \"' + lastName + '\", \"middleName\": \"' + middleName + '\", \"dob\" : \"' + dob + '\", \"aadharNo\": \"' + aadharNo + '\",\"batchName\" : \"' + batchName + '\", \"highestQualification\" : \"' + highestQualification + '\", \"passingYear\": \"' + passingYear + '\", \"gender\" : \"' + gender + '\", \"religion\": \"' + religion + '\", \"category\" : \"' + category + '\", \"primaryContactNumber\": \"' + primaryContactNumber + '\", \"primaryEmailId\" : \"' + primaryEmailId + '\", \"collegeRegisterNo\": \"' + collegeRegisterNo + '\",\"itiGrade\": \"' + itiGrade + '\",\"itiTrade\": \"' + itiTrade + '\",\"addressLine1\": \"' + addressLine1 + '\", \"villageName\" : \"' + villageName + '\", \"district\": \"' + district + '\", \"state\" : \"' + state + '\", \"pincode\": \"' + pincode + '\",  \"createdOn\": \"' + createdOn + '\", \"createdBy\" : \"' + createdBy + '\", \"status\" : \"' + status + '\",\"remarks\" : \"' + remarks + '\",\"reason\" : \"' + reason + '\"}] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveBulkMetaData(uploadFileName, uploadDate, activity, batchName, batchId, records, status, centerName, centerId, modelId, uploadedBy, remarks) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveMetaDataBulk\", \"data\" : [{ \"uploadFileName\" : \"' + uploadFileName + '\", \"uploadDate\" : \"' + uploadDate + '\", \"activity\" : \"' + activity + '\", \"batchName\" : \"' + batchName + '\", \"batchId\" : \"' + batchId + '\", \"records\" : \"' + records + '\", \"status\" : \"' + status + '\", \"centerName\" : \"' + centerName + '\", \"centerId\" : \"' + centerId + '\",\"modelId\" : \"' + modelId + '\",\"uploadedBy\" : \"' + uploadedBy + '\",\"remarks\" : \"' + remarks + '\" }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Get Bulk data for History page\n\nexport async function fetchBulkData() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllMetaDataBulk\", \"data\" : [{  }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentFile(regId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getStudentDataByRegIdBulk\", \"data\" : [{  \"regId\" : \"' + regId + '\"  }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // show baised on center id in upload meta data table\n\nexport async function fetchBulkAllMetaDataByCenterId(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getMetaDataByCenterIdBulk\", \"data\" : [{ \"centerId\" : ' + centerId + ' }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Changes\n\nexport async function saveBulkMetaDataAgain(regId, uploadFileName, uploadDate, activity, batchName, batchId, records, status, centerName, centerId, modelId, uploadedBy, remarks) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveMetaDataBulk\", \"data\" : [{ \"regId\" : \"' + regId + '\",\"uploadFileName\" : \"' + uploadFileName + '\", \"uploadDate\" : \"' + uploadDate + '\", \"activity\" : \"' + activity + '\", \"batchName\" : \"' + batchName + '\", \"batchId\" : \"' + batchId + '\", \"records\" : \"' + records + '\", \"status\" : \"' + status + '\", \"centerName\" : \"' + centerName + '\", \"centerId\" : \"' + centerId + '\",\"modelId\" : \"' + modelId + '\",\"uploadedBy\" : \"' + uploadedBy + '\",\"remarks\" : \"' + remarks + '\" }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Virtual to physical\n\nexport async function fetchStudentDetailsBaisedOnChannel(channel) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllStudentsBasedOnCreationChannel\", \"data\" :[{\"creationChannel\": \"' + channel + '\"}] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchVirtualData(centerId, presState) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewDataByCenterId\", \"data\" : [{ \"centerId\" : ' + centerId + ' , \"presState\" : \"' + presState + '\" }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // to save the data in student engagement table\n\nexport async function updateStudentData(engagementId, dbUserId, centerId, createdBy, updatedBy, remarks, status, linkedEngagementId, reason) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStudentEngagement\", \"data\" : [{ \"engagementId\" : ' + engagementId + ' , \"dbUserId\" : ' + dbUserId + ' , \"centerId\" : ' + centerId + ' , \"createdBy\" : ' + createdBy + ',\"updatedBy\" : ' + updatedBy + ',\"remarks\" : \"' + remarks + '\",\"status\" : \"' + status + '\", \"linkedEngagementId\" : ' + linkedEngagementId + ' ,\"reason\" : \"' + reason + '\", }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // for forget password\n\nexport async function CheckIfUserWithDetailsExists(emailAddress, userName) {\n  let requestFormData = new FormData();\n  requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"CheckIfUserWithDetailsExists\", \"data\" : [{  \"emailAddress\" : \"' + emailAddress + '\",\"userName\" : \"' + userName + '\"}] }');\n  return fetch(serviceEndPoint.loginService, {\n    method: \"POST\",\n    body: requestFormData\n  }).then(response => response.json());\n  return null;\n}\nexport async function ResetPasswordWithoutLoggingIn(id, password) {\n  let requestFormData = new FormData();\n  requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"ResetPasswordWithoutLoggingIn\", \"data\" : [{  \"id\" : \"' + id + '\",\"password\" : \"' + password + '\" }] }');\n  return fetch(serviceEndPoint.loginService, {\n    method: \"POST\",\n    body: requestFormData\n  }).then(response => response.json());\n  return null;\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/util/api.js"],"names":["serviceEndPoint","UserContext","isSessionValid","isTokenValid","regenerateToken","fetchMasterSalutation","formData","FormData","append","fetch","salutationServiceEndPoint","method","body","then","response","json","fetchAllCenter","centerServiceEndPoint","fetchMasterGenderDetails","genderServiceEndPoint","fetchPincodeData","pincode","requestFormData","cityVillageServiceEndPoint","businessCaseSaveOrUpdate","data","businessCaseEndPoint","headers","token","fetchBusinessCaseMetaData","engagementId","fetchBusinessCaseQuestions","businessCaseBriefMdmService","fetchUserDocuments","documentType","typeOfDocument","documentServiceEndPoint","fetchBatchDetails","centerId","batchDetailsServiceEndPoint","fetchBatchDetailsForBatchOwner","batchOwner","fetcRoleDetails","roleServiceEndPoint","passwordReset","dbUserId","userProfileServiceEndPoint","enrollStudent","enrollmentServiceEndPoint","changeStudentStatus","engagementServiceEndPoint","e","console","log","fectEnrollmentDetails","fectUserDetails","userId","fectUserNameFromId","jsondata","jsonobjects","JSON","parse","alert","firstName","fectUserRoleDetails","roleId","fectAddressDetails","id","addressServiceEndPoint","fectAddressDetailsByAddressID","fetchAllStateDetails","stateServiceEndPoint","changePassword","newPassword","fetchAddressDetailsBasedOnPincode","saveUserDetails","saveAddressDetails","sendResetPasswordLink","userName","fetchUsersByCenterId","fetchUserDetailsById","fetchUserDetails","mapUserToRole","fetchEnrollmentDetailsByBatchId","batchId","fetchAllStudentDataByEngagementId","captureStudentEngagementDetails","userid","captureStudentEngagementDetailsB","engId","isCurrentPasswordValid","user","currentPassword","fetchBatchDetailsByBatchId","BusinessIdeaEvaluationSaveOrUpdate","FetchFinalScoreForBusinessIdea","fetchBusinessIdeaEvaluationData","fetchCourseDetails","courseServiceEndPoint","saveInterestInventoryCode","finalScore","createdBy","interestinventoryServiceEndPoint","fetchInterestInventoryCode","fetchCentersOfUser","fetchCentersDetails","fetchRoleDetails","setDefaultSettings","roleMapId","programId","saveCounsellingDetails","counsellingServiceEndPoint","fetchCounsellingDetails","fetchCoursesByHollandCode","hollandCode","findByAadharNo","aadharNo","studentServiceEndPoint","searchByAadharNo","searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId","lastName","dob","primaryContactNumber","primaryEmailId","fetchStudentDetailsByEngagementId","fetchNotCompletedBatchDetails","login","action","email","password","loginService","fetchUserScope","fetchBasicData","fetchAddressData","formData2","subMitBasicData","stringify","submitAddressData","submitEducationData","educationServiceEndPoint","fetchEducationData","saveBatchDetails","saveObservationDetails","observationServiceEndPoint","fetchObservationdetails","fetchFamilydetails","familyServiceEndPoint","saveFamilyDetails","fetchFamilyDetails","fetchPlacementDetailsByEngagementId","placementServiceEndPoint","fetchExperienceDetails","experienceServiceEndPoint","saveSocioDetails","socioeconomicServiceEndPoint","saveExpDetails","savePlacementDetails","saveFamilyDetailsNew","fetchExpDetails","fetchSocioDetails","fetchEvaluationData","eng","evaluationServiceEndPoint","fetchKnackScore","knackServiceEndPoint","saveEvaluationData","fetchStudentDataForList","role","calculatePercentile","findNumberOfBeneficiaryInCenterByStatus","studentEngagementStatus","dashboardService","fetchQualificationDetails","qualificationServiceEndPoint","fetchUserDocumentsByEngagementId","fetchUserDocumentsByEngagementIdAndTypeOfDocument","fetchUserDocumentsByUserIdAndTypeOfDocument","deleteDocumentById","basicDocId","fetchCenterCapacity","centerCapacity","fetchBusinessIdeaEvaluationQuestions","businessIdeaEvaluation","findAllObservationdetails","masterObservation","fetchCenterActiveCourses","centerService","fetchCourseDetailsByIds","uploadDocument","documentName","document","documentNumber","fetchMasterExistingBusiness","mdmExistingBusiness","saveExistingBusiness","existingBusiness","fetchExistingBusinessDetails","fetchCenterCapacityByIds","fetchAllStudentEngagementForUser","fectEnrollmentDetailsByIds","fetchCenterProgramMapping","centerProgramMapping","fetchProgram","programservice","fetchComponentsByProgramIdAndRoleId","programrolecomponentmapping","fetchUsersByCenterIdAndRoleMapId","fetchEmployerDetails","accountStatus","typeOfRelationship","employerservice","getReports","pageNumber","pageSize","startDate","endDate","reportservice","downloadReports","fetchStudentDropoutDetailByEngagementId","dropoutServiceEndPoint","saveDropoutDetails","effortSpent","markDropout","updateReadyForDropout","readyForDropout","fetchAllStudentDataByEngagementIdAndReadyForDropout","fetchAttendanceDetailsByAttendanceDateAndBatchId","attendanceDate","attendanceServiceEndPoint","fetchRunningBatchDetails","saveAttendanceDetails","findSkillmithraByOrgId","orgId","udyogmitraandskillinstitute","getUdyogMitraAndSkillInstitute","orgType","findInformalCourses","saveInformalEnrollmentDetails","courseId","updatedBy","fetchcourseModuleList","selectedYear","coursecoveragetracker","fetchsubModuleList","moduleId","fetchtabledata","isActive","saveCourseCovrageData","subtopicId","createdDate","remarks","compDate","saveCourseCovrageDatawithId","fetchSubModulename","header","fetchtabledatawithModuleId","fetchCenterByStateName","state","getBatchDetailsByBatchId","fundingType","fundermapping","getBatchDetailsByFunderId","funderId","getBatchDetailsByBatchIdandFunderId","fetchStateByZone","zone","saveBatchFunderDetails","crmFunderId","createdOn","updateBatchFunderDetails","updatedOn","getStudentStrengthByCenterIdAndStudentEngagementStatus","fetchSkillMithraByIdAndProgramId","saveBulkStudentData","RegId","middleName","batchName","highestQualification","passingYear","gender","religion","category","collegeRegisterNo","itiGrade","itiTrade","addressLine1","villageName","district","status","reason","bulkupload","saveBulkMetaData","uploadFileName","uploadDate","activity","records","centerName","modelId","uploadedBy","fetchBulkData","fetchStudentFile","regId","fetchBulkAllMetaDataByCenterId","saveBulkMetaDataAgain","fetchStudentDetailsBaisedOnChannel","channel","fetchVirtualData","presState","updateStudentData","linkedEngagementId","CheckIfUserWithDetailsExists","emailAddress","ResetPasswordWithoutLoggingIn"],"mappings":"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","sourcesContent":["import { serviceEndPoint } from './../util/serviceEndPoint';\r\nimport UserContext from './../components/GolbalContext'\r\nimport {isSessionValid, isTokenValid} from './../util/session.js';\r\nimport { regenerateToken } from './validation';\r\n\r\n\r\nexport async function fetchMasterSalutation() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.salutationServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchAllCenter() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchMasterGenderDetails() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.genderServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchPincodeData(pincode) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":' + pincode + '}]}');\r\n    return fetch(serviceEndPoint.cityVillageServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function businessCaseSaveOrUpdate(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : ' + data + '}');\r\n   return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchBusinessCaseMetaData(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchBusinessCaseQuestions() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : []}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.businessCaseBriefMdmService, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchUserDocuments(engagementId,documentType,typeOfDocument) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"engagementId\":'+engagementId+',\"documentType\":\"'+documentType+'\",\"typeOfDocument\":\"'+typeOfDocument+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchBatchDetails(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatches\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\nexport async function fetchBatchDetailsForBatchOwner(batchOwner,centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatchesForBatchOwner\", \"data\" : [{\"domainFacilitator\":'+batchOwner+',\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\n\r\nexport async function fetcRoleDetails() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchAll\", \"data\" : []}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.roleServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\nexport async function passwordReset(dbUserId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"passwordReset\", \"data\" : [{\"id\":'+dbUserId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;    \r\n}\r\n\r\n\r\nexport async function enrollStudent(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltobatch\", \"data\" : [{'+data+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    },\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\nexport async function changeStudentStatus(data) {\r\n    if(isSessionValid()){\r\n    try{\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStatus\", \"data\" : [{'+data+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    catch(e)\r\n    {\r\n        console.log(e);\r\n    }\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fectEnrollmentDetails(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetails\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function fectUserDetails(userId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\nexport async function fectUserNameFromId(userId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json()).then((jsondata)=>{\r\n\r\n        let jsonobjects = JSON.parse(jsondata.data);\r\n        alert(jsonobjects[0].firstName);\r\n        return jsonobjects[0].firstName;\r\n           \r\n         });\r\n        }\r\n        return null;     \r\n}\r\n\r\nexport async function fectUserRoleDetails(roleId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : [{\"id\":\"'+roleId+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.roleServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function fectAddressDetails(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllAddressForEntity\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"U\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n\r\n   return  fetch(serviceEndPoint.addressServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n// address for placement\r\nexport async function fectAddressDetailsByAddressID(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAddressById\", \"data\" : [{\"id\" : ' + id + ' }]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n\r\n   return  fetch(serviceEndPoint.addressServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchAllStateDetails() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.stateServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function changePassword(userId,newPassword) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"changePassword\" +'\", \"data\" : [{\"id\" : ' + userId + ',\"password\" : \"' +newPassword + '\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\nexport async function fetchAddressDetailsBasedOnPincode(pincode) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":'+pincode+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.cityVillageServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;    \r\n}\r\n\r\nexport async function saveUserDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveUserDetails\", \"data\" : ['+data+']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\nexport async function saveAddressDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAddress\", \"data\" : ['+data+']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.addressServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function sendResetPasswordLink(userName) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"resetPassword\", \"data\" : [{\"userName\":\"'+userName+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchUsersByCenterId(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterId\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchUserDetailsById(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetailsById\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchUserDetails(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + id + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\n\r\nexport async function mapUserToRole(userId,centerId,roleId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"saveUserCenterRoleMapDetails\", \"data\" : [{\"userId\":'+userId+',\"centerId\":'+centerId+',\"roleId\":'+roleId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\nexport async function fetchEnrollmentDetailsByBatchId(batchId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchEnrollmentDetailsByBatchId\", \"data\" : [{\"batchId\":'+batchId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;    \r\n}\r\nexport async function fetchAllStudentDataByEngagementId(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchAllStudentDataByEngagementId\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\nexport async function captureStudentEngagementDetails(dbUserId,centerId,userid) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\r\n    \r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\nexport async function captureStudentEngagementDetailsB(dbUserId,centerId,userid,engId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ',\"linkedEngagementId\" : ' + engId + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\nexport async function isCurrentPasswordValid(user,currentPassword) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"isCurrentPasswordValid\", \"data\" :[{\"userName\"  : \"' + userName + '\" , \"password\":\"'+currentPassword+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\n\r\nexport async function fetchBatchDetailsByBatchId(batchId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"getBatchDetailsByBatchId\", \"data\" :[{\"batchId\"  : \"' + batchId + '\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function BusinessIdeaEvaluationSaveOrUpdate(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n   requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveBusinessIdeaEvaluationDetails\", \"data\" : ' + data + '}');\r\n   if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function FetchFinalScoreForBusinessIdea(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n   requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculateFinalScore\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n   if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchBusinessIdeaEvaluationData(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getBusinessIdeaEvaluationDetails\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchCourseDetails() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.courseServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function saveInterestInventoryCode(engagementId,finalScore,createdBy) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureInterestInventory\", \"data\" : [{\"engagementId\":' + engagementId + ',\"finalScore\":\"' + finalScore + '\",\"createdBy\":'+createdBy+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchInterestInventoryCode(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewInterestInventoryByEngId\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchCentersOfUser(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllUserScopes\", \"data\" : [{\"userId\":'+UserContext.userid+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.userProfileServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchCentersDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcenter\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchRoleDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.roleServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function setDefaultSettings(userId,roleMapId,centerId,programId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"setDefaultSettings\", \"data\" : [{\"userId\":'+userId+',\"roleMapId\":'+roleMapId+',\"centerId\":'+centerId+',\"programId\":'+programId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.userProfileServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n// export async function saveEducationDetails(data){\r\n//     if(isSessionValid()){\r\n//         let formData = new FormData();\r\n//         formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"captureAllEducation\" +'\", \"data\" : ' + JSON.stringify(this.state.rows) + '}');\r\n//         return fetch(serviceEndPoint.educationServiceEndPoint, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           'Authorization': 'Bearer '+Cookies.get('token')\r\n//       },  \r\n//         body: formData  \r\n//         }).then(response => response.json());\r\n//     }\r\n//     return null;\r\n//     }\r\n   \r\n\r\n\r\nexport async function saveCounsellingDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : ['+data+']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.counsellingServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCounsellingDetails(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.counsellingServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCoursesByHollandCode(hollandCode) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByHollandCode\", \"data\" : [{\"hollandcode\":\"'+hollandCode+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function findByAadharNo(aadharNo) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"isAadharNoDuplicate\", \"data\" : [{\"aadharNo\":\"'+aadharNo+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function searchByAadharNo(aadharNo) {\r\n  if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByAadharNumber\", \"data\" : [{\"aadharNo\":\"'+aadharNo+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId(firstName,lastName,dob,primaryContactNumber,primaryEmailId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId\", \"data\" : [{\"firstName\":\"'+firstName+'\",\"lastName\":\"'+lastName+'\",\"dob\":\"'+dob+'\",\"primaryContactNumber\":\"'+primaryContactNumber+'\",\"primaryEmailId\":\"'+primaryEmailId+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchStudentDetailsByEngagementId(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewStudentEngagementById\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return fetch(serviceEndPoint.engagementServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchNotCompletedBatchDetails(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getNotCompletedBatches\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\n\r\nexport async function login(token,action,email,password) {\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"'+token+'\", \"action\" : \"'+action+'\", \"data\" : [{\"userName\":\"'+email+'\",\"password\":\"'+password+'\"}]}');\r\n    return  fetch(serviceEndPoint.loginService,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json()); \r\n}\r\n\r\n\r\n\r\nexport async function fetchUserScope(userid) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getUserScope\", \"data\" : [{\"userId\":\"'+userid+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json()); \r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchBasicData(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewBeneficiaryDetailsById\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },    \r\n          body: formData \r\n          }).\r\n          then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\nexport async function fetchAddressData(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData2 = new FormData();\r\n          formData2.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllAddressForEntity\" +'\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"S\"}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.addressServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData2 \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function subMitBasicData(action , data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : [' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      },  \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function submitAddressData(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n       formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : [' + JSON.stringify(data) + ']}');\r\n       if(!isTokenValid()) \r\n        await regenerateToken();\r\n         return fetch(serviceEndPoint.addressServiceEndPoint, {\r\n         method: \"POST\",\r\n         headers: {\r\n           'Authorization': 'Bearer '+UserContext.token\r\n       },  \r\n         body: formData \r\n         }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function submitEducationData(action,data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : ' + JSON.stringify(data) + '}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.educationServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      },  \r\n        body: formData  \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchEducationData(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n         formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllEducationForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n         if(!isTokenValid()) \r\n        await regenerateToken();\r\n         return fetch(serviceEndPoint.educationServiceEndPoint, {\r\n         method: \"POST\",\r\n         headers: {\r\n           'Authorization': 'Bearer '+UserContext.token\r\n       }, \r\n         body: formData \r\n         }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function saveBatchDetails(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" :[' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      }, \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function saveObservationDetails(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : ' + JSON.stringify(data) + '}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.observationServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      }, \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchObservationdetails(engagementId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllObservationsForUser\" +'\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.observationServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchFamilydetails(dbUserId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllFamilyDetailsForUser\" +'\", \"data\" : [{\"dbUserId\":'+dbUserId+'}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function saveFamilyDetails(action, data)\r\n{if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : ' + JSON.stringify(data) + '}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      }, \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\nexport async function fetchFamilyDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllFamilyDetailsForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchPlacementDetailsByEngagementId(engagementId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewPlacementDetailsByEngagementId\" +'\",  \"data\" : [{\"engagementId\" : ' + engagementId + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.placementServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\nexport async function fetchExperienceDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllExperienceForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.experienceServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n//Socio Details added ashish\r\nexport async function saveSocioDetails(action, data)\r\n{\r\n   \r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" :[ ' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function saveExpDetails(action, data)\r\n{\r\n   \r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" :[ ' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.experienceServiceEndPoint, {\r\n method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function savePlacementDetails(data)\r\n{\r\n   \r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"save\" , \"data\" :[ ' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.placementServiceEndPoint, {\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n//ashish new screen family\r\nexport async function saveFamilyDetailsNew(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : [' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchExpDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n     let formData = new FormData();\r\n     formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllExperienceForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n     if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\r\n       method: \"POST\",\r\n       headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n       body: formData \r\n       }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n//ashish socio economic\r\nexport async function fetchSocioDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n     let formData = new FormData();\r\n     formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewSocioEconomicById\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n     if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\r\n       method: \"POST\",\r\n       headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n       body: formData \r\n       }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchEvaluationData(eng)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"viewByEngagementId\", \"data\" : [{ \"engagementId\" : ' + eng + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n         return fetch(serviceEndPoint.evaluationServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchKnackScore(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"get\", \"data\" : [{ \"engagementId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.knackServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\nexport async function saveEvaluationData(data)\r\n{if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"captureAllEvaluationDetails\" +'\", \"data\" : ' + JSON.stringify(data) + ' }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\r\n    method: \"POST\",\r\n    headers: {\r\n      'Authorization': 'Bearer '+UserContext.token\r\n  }, \r\n    body: formData \r\n    }).then(response => response.json())\r\n}\r\nreturn null;\r\n\r\n}\r\n\r\n\r\nexport async function fetchStudentDataForList(role)\r\n{if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    if ( role===3){\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenterAndMultipleStatus\", \"data\" : [{\"centerId\":'+UserContext.centerId+'}]}');\r\n    }\r\n    else{\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenter\", \"data\" : [{\"centerId\":'+UserContext.centerId+'}]}');\r\n    }\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n            method: \"POST\",\r\n            headers: {\r\n              'Authorization': 'Bearer '+UserContext.token\r\n          },\r\n            body: requestFormData,\r\n            }).then(response => response.json())\r\n      \r\n       \r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function calculatePercentile()\r\n{\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculatePercentile\", \"data\" : [{\"createdBy\":'+UserContext.userid+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.evaluationServiceEndPoint,{\r\n  method: \"POST\",\r\n  headers: {\r\n    'Authorization': 'Bearer '+UserContext.token\r\n}, \r\n  body: requestFormData,\r\n  }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function findNumberOfBeneficiaryInCenterByStatus(centerId,studentEngagementStatus) {\r\n    if(isSessionValid()){\r\n      let requestFormData = new FormData();\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"NumberOfBeneficiaryInCenterByStatus\", \"data\" : [{\"centerId\":\"'+centerId+'\",\"studentEngagementStatus\":\"'+studentEngagementStatus+'\"}]}');\r\n      if(!isTokenValid()) \r\n          await regenerateToken();\r\n      return fetch(serviceEndPoint.dashboardService, {\r\n          method: \"POST\",\r\n          body: requestFormData\r\n      }).then(response => response.json());\r\n  }\r\n  return null;\r\n  }\r\n\r\n\r\n\r\n  export async function fetchQualificationDetails() {\r\n    if(isSessionValid()){\r\n      let requestFormData = new FormData();\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n      if(!isTokenValid()) \r\n          await regenerateToken();\r\n      return fetch(serviceEndPoint.qualificationServiceEndPoint, {\r\n          method: \"POST\",\r\n          body: requestFormData\r\n      }).then(response => response.json());\r\n  }\r\n  return null;\r\n  }\r\n\r\n\r\n  export async function fetchUserDocumentsByEngagementId(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementId\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchUserDocumentsByEngagementIdAndTypeOfDocument(engagementId,typeOfDocument) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementIdAndDocumentType\", \"data\" : [{\"engagementId\":'+engagementId+',\"typeOfDocument\":\"'+typeOfDocument+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n  \r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchUserDocumentsByUserIdAndTypeOfDocument(dbUserId,typeOfDocument) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"dbUserId\":'+dbUserId+',\"typeOfDocument\":\"'+typeOfDocument+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function deleteDocumentById(basicDocId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"deleteDocument\", \"data\" : [{\"basicDocId\":'+basicDocId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function fetchCenterCapacity() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerCapacity, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function fetchBusinessIdeaEvaluationQuestions() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.businessIdeaEvaluation, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function findAllObservationdetails()\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"findall\" +'\", \"data\" : [{}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.masterObservation, {\r\n          method: \"POST\",\r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCenterActiveCourses(centerId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"getActiveCourse\" +'\", \"data\" : [{\"centerId\" :'+centerId+'}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.centerService, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCourseDetailsByIds(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcourse\", \"data\" :'+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.courseServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function uploadDocument(dbUserId,engagementId,documentType,typeOfDocument,documentName,document,documentNumber) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureDocDetails\", \"data\" : [{\"dbUserId\":'+dbUserId+',\"engagementId\":'+engagementId+',\"documentType\":\"'+documentType+'\",\"typeOfDocument\":\"'+typeOfDocument+'\",\"documentName\":\"'+documentName+'\",\"base64File\":\"'+document+'\",\"documentNo\":\"'+documentNumber+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchMasterExistingBusiness() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAll\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.mdmExistingBusiness, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function saveExistingBusiness(data) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"saveExistingBusinessDetails\" , \"data\" : '+data+'}');\r\n    \r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.existingBusiness, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },\r\n        body: formData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchExistingBusinessDetails(engagementId) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchExistingBusinessDetails\" , \"data\" :[{\"engagementId\":'+engagementId+'}]}');\r\n    \r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.existingBusiness, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },\r\n        body: formData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchCenterCapacityByIds(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCapacityByCenter\", \"data\" :'+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerCapacity, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchAllStudentEngagementForUser(dbUserId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllStudentEngagementForUser\", \"data\" :[{\"dbUserId\":'+dbUserId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.engagementServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fectEnrollmentDetailsByIds(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetailsByEngagementId\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchCenterProgramMapping(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCenterProgramMapping\", \"data\" :[{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerProgramMapping, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchProgram(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findprogram\", \"data\" :'+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.programservice, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchComponentsByProgramIdAndRoleId(programId,roleId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchByProgramIdAndRoleId\", \"data\" :[{\"programId\":'+programId+',\"roleId\":'+roleId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.programrolecomponentmapping, {\r\n        method: \"POST\",\r\n         headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchUsersByCenterIdAndRoleMapId(centerId,roleMapId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterIdAndRoleMapId\", \"data\" : [{\"centerId\":'+centerId+',\"roleMapId\":'+roleMapId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function fetchEmployerDetails(accountStatus,typeOfRelationship) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findByAccountStatusAndTypeOfRelationshipLike\" , \"data\" : [{\"accountStatus\":\"'+accountStatus+'\",\"typeOfRelationship\":\"'+typeOfRelationship+'\"}]}');\r\n    return fetch(serviceEndPoint.employerservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function getReports(pageNumber,pageSize,centerId,startDate,endDate,studentEngagementStatus,batchId) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewData\" , \"data\" : [{\"pageNumber\":\"'+pageNumber+'\",\"pageSize\":\"'+pageSize+'\",\"centerId\":\"'+centerId+'\",\"startDate\":\"'+startDate+'\",\"endDate\":\"'+endDate+'\",\"studentEngagementStatus\":\"'+studentEngagementStatus+'\",\"batchId\":'+batchId+'}]}');\r\n    return fetch(serviceEndPoint.reportservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function downloadReports(pageNumber,pageSize,centerId,startDate,endDate,studentEngagementStatus,batchId) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"downloadExcel\" , \"data\" : [{\"pageNumber\":\"'+pageNumber+'\",\"pageSize\":\"'+pageSize+'\",\"centerId\":\"'+centerId+'\",\"startDate\":\"'+startDate+'\",\"endDate\":\"'+endDate+'\",\"studentEngagementStatus\":\"'+studentEngagementStatus+'\",\"batchId\":'+batchId+'}]}');\r\n    return fetch(serviceEndPoint.reportservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchStudentDropoutDetailByEngagementId(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewDropout\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.dropoutServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function saveDropoutDetails(effortSpent,engagementId,createdBy) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveDropout\", \"data\" : [{\"effortSpent\":\"'+effortSpent+'\",\"engagementId\":\"'+engagementId+'\",\"createdBy\":\"'+createdBy+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.dropoutServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function markDropout(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"markdropout\", \"data\" : [{'+data+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    },\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\nexport async function updateReadyForDropout(engagementId,readyForDropout) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStudentEngagementDetails\", \"data\" : [{\"readyForDropout\":\"'+readyForDropout+'\",\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    },\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\n\r\nexport async function fetchAllStudentDataByEngagementIdAndReadyForDropout(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchAllStudentDataByEngagementIdAndReadyForDropout\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\n\r\n\r\nexport async function fetchAttendanceDetailsByAttendanceDateAndBatchId(batchId,attendanceDate) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"viewAttendanceByBatchIdAndAttendanceDate\", \"data\" :[{\"batchId\":'+batchId+',\"attendanceDate\":\"'+attendanceDate+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return  fetch(serviceEndPoint.attendanceServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\nexport async function fetchRunningBatchDetails(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRunningBatches\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\nexport async function saveAttendanceDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAllAttendance\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.attendanceServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\nexport async function findSkillmithraByOrgId(orgId){\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgId\", \"data\" :[{ \"orgId\" : \"'+orgId+'\" }]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function getUdyogMitraAndSkillInstitute(orgType) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithras\", \"data\" :[{\"orgType\" : \"'+ orgType +'\" }]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function findInformalCourses() {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByType\", \"data\" : [{\"type\" : \"informal\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.courseServiceEndPoint, {\r\n            method: \"POST\",\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function saveInformalEnrollmentDetails(engagementId, batchId, courseId, updatedBy, startDate, endDate, orgId ) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltocourse\", \"data\" : [{\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n// api for module list\r\nexport async function fetchcourseModuleList(selectedYear){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getModuleNameByYear\", \"data\" :[{\"year\" : \" '+selectedYear+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// API for sub Module list in table\r\n\r\nexport async function fetchsubModuleList(moduleId,selectedYear){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data','{ \"token\" : \"\", \"action\" : \"getSubtopicNameByYearAndModuleId\", \"data\" : [{\"moduleId\": \"'+moduleId+'\", \"year\":\"'+selectedYear+'\"}]}')\r\n        \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n// API for loading table data\r\nexport async function fetchtabledata(batchId , isActive){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus\", \"data\" :[{\"batchId\" : \" '+batchId+'\", \"isActive\" : \"'+isActive+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// API for saved data if value id ic nor there\r\n\r\nexport async function saveCourseCovrageData(userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"userId\":\"'+userId+'\", \"batchId\":\"'+batchId+'\", \"isActive\":\"'+isActive+'\", \"moduleId\":\"'+moduleId+'\", \"subtopicId\":\"'+subtopicId+'\", \"createdDate\":\"'+createdDate+'\", \"remarks\":\"'+remarks+'\", \"compDate\":\"'+compDate+'\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// Api calling for data saving when value id is present\r\n\r\nexport async function saveCourseCovrageDatawithId(id,userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"id\":\"'+id+'\", \"userId\":\"'+userId+'\", \"batchId\":\"'+batchId+'\", \"isActive\":\"'+isActive+'\", \"moduleId\":\"'+moduleId+'\", \"subtopicId\":\"'+subtopicId+'\", \"createdDate\":\"'+createdDate+'\", \"remarks\":\"'+remarks+'\", \"compDate\":\"'+compDate+'\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// API call for submodule list\r\n\r\nexport async function fetchSubModulename(batchId, isActive){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus \" , \"data\" :[{\"batchId\":\"'+batchId+'\", \"isActive\" : \"'+isActive+'\"}]}')\r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method:\"post\",\r\n            header:{\r\n                'Authorization': 'Bearer ' + UserContext.token \r\n            }\r\n        }).then(response => response.json())\r\n    }\r\n    return null;\r\n}\r\n\r\n//API for loading table data for Course Coverage\r\nexport async function fetchtabledatawithModuleId(batchId, moduleId, isActive){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findByBatchIdAndModuleIdAndIsActive\", \"data\" :[{\"batchId\" : \"'+batchId+'\", \"moduleId\": \"'+moduleId+'\",\"isActive\" : \"'+isActive+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// fetching Centers By State Name\r\n\r\nexport async function fetchCenterByStateName(state) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"\", \"action\" : \"findallCenterbyState\" , \"data\" : [{\"state\" : \"'+state+'\"}]}');    \r\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n// ============ Api for Funder Mapping\r\n\r\n\r\nexport async function getBatchDetailsByBatchId(batchId, isActive, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"'+batchId+'\", \"isActive\":\"'+isActive+'\", \"fundingType\":\"'+fundingType+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function getBatchDetailsByFunderId(funderId, isActive, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"funderId\" :\"'+funderId+'\", \"isActive\":\"'+isActive+'\", \"fundingType\":\"'+fundingType+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function getBatchDetailsByBatchIdandFunderId(batchId, funderId, isActive, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"'+batchId+'\", \"funderId\" :\"'+funderId+'\", \"isActive\":\"'+isActive+'\", \"fundingType\":\"'+fundingType+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n// Fetching baised on Zone\r\nexport async function fetchStateByZone(zone) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findstatebyzone\", \"data\" : [{\"zone\":\"'+zone+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.stateServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function saveBatchFunderDetails(batchId, funderId, crmFunderId, isActive, fundingType, createdBy, createdOn, remarks){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveFunderMappingDetails\", \"data\" :[{\"batchId\": '+batchId+', \"funderId\": '+funderId+', \"crmFunderId\": \"'+crmFunderId+'\", \"isActive\": \"'+isActive+'\", \"fundingType\": \"'+fundingType+'\", \"createdBy\": '+createdBy+', \"createdOn\": \"'+createdOn+'\", \"remarks\": \"'+remarks+'\"}]}');\r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function updateBatchFunderDetails(id, batchId, funderId, crmFunderId, isActive, remarks, updatedOn, updatedBy, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"UpdateExistingFunderMapping\", \"data\" :[{\"id\": '+id+', \"batchId\": '+batchId+', \"funderId\": '+funderId+',  \"crmFunderId\": \"'+crmFunderId+'\", \"isActive\": \"'+isActive+'\", \"fundingType\": \"'+fundingType+'\", \"updatedBy\": '+updatedBy+', \"updatedOn\": \"'+updatedOn+'\", \"remarks\": \"'+remarks+'\"}]}');\r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function getStudentStrengthByCenterIdAndStudentEngagementStatus( centerId, studentEngagementStatus) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"1234\", \"action\" : \"viewStrengthByEngagementStatus\" , \"data\" : [{ \"centerId\": \"'+centerId+'\", \"studentEngagementStatus\": \"'+studentEngagementStatus+'\" }]}');\r\n    return fetch(serviceEndPoint.reportservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n// Informal sector\r\n\r\n// {\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\", \"data\" :[{\"orgType\" : \"udhyogmithra\",\"programId\":5}]}\r\n\r\nexport async function fetchSkillMithraByIdAndProgramId(orgType,programId) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\" , \"data\" : [{ \"orgType\": \"'+orgType+'\", \"programId\": \"'+programId+'\" }]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// Buil upload\r\n\r\n// changes(add batch name)\r\nexport async function saveBulkStudentData(RegId, firstName, lastName, middleName, dob, aadharNo, batchName,highestQualification, passingYear, gender, religion, category, primaryContactNumber, primaryEmailId,collegeRegisterNo,itiGrade,itiTrade,addressLine1, villageName, district, state , pincode, createdOn,createdBy,status,remarks,reason) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveStudentDataBulk\", \"data\" : [{ \"regId\" : \"'+RegId+'\", \"firstName\": \"'+firstName+'\", \"lastName\" : \"'+lastName+'\", \"middleName\": \"'+middleName+'\", \"dob\" : \"'+dob+'\", \"aadharNo\": \"'+aadharNo+'\",\"batchName\" : \"'+batchName+'\", \"highestQualification\" : \"'+highestQualification+'\", \"passingYear\": \"'+passingYear+'\", \"gender\" : \"'+gender+'\", \"religion\": \"'+religion+'\", \"category\" : \"'+category+'\", \"primaryContactNumber\": \"'+primaryContactNumber+'\", \"primaryEmailId\" : \"'+primaryEmailId+'\", \"collegeRegisterNo\": \"'+collegeRegisterNo+'\",\"itiGrade\": \"'+itiGrade+'\",\"itiTrade\": \"'+itiTrade+'\",\"addressLine1\": \"'+addressLine1+'\", \"villageName\" : \"'+villageName+'\", \"district\": \"'+district+'\", \"state\" : \"'+state+'\", \"pincode\": \"'+pincode+'\",  \"createdOn\": \"'+createdOn+'\", \"createdBy\" : \"'+createdBy+'\", \"status\" : \"'+status+'\",\"remarks\" : \"'+remarks+'\",\"reason\" : \"'+reason+'\"}] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function saveBulkMetaData(uploadFileName, uploadDate, activity, batchName, batchId, records, status, centerName, centerId,modelId, uploadedBy,remarks) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveMetaDataBulk\", \"data\" : [{ \"uploadFileName\" : \"'+uploadFileName+'\", \"uploadDate\" : \"'+uploadDate+'\", \"activity\" : \"'+activity+'\", \"batchName\" : \"'+batchName+'\", \"batchId\" : \"'+batchId+'\", \"records\" : \"'+records+'\", \"status\" : \"'+status+'\", \"centerName\" : \"'+centerName+'\", \"centerId\" : \"'+centerId+'\",\"modelId\" : \"'+modelId+'\",\"uploadedBy\" : \"'+uploadedBy+'\",\"remarks\" : \"'+remarks+'\" }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\n// Get Bulk data for History page\r\nexport async function fetchBulkData() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllMetaDataBulk\", \"data\" : [{  }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchStudentFile(regId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getStudentDataByRegIdBulk\", \"data\" : [{  \"regId\" : \"'+regId+'\"  }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// show baised on center id in upload meta data table\r\nexport async function fetchBulkAllMetaDataByCenterId(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getMetaDataByCenterIdBulk\", \"data\" : [{ \"centerId\" : '+centerId+' }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// Changes\r\nexport async function saveBulkMetaDataAgain(regId,uploadFileName, uploadDate, activity, batchName, batchId, records, status, centerName, centerId,modelId, uploadedBy,remarks) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveMetaDataBulk\", \"data\" : [{ \"regId\" : \"'+regId+'\",\"uploadFileName\" : \"'+uploadFileName+'\", \"uploadDate\" : \"'+uploadDate+'\", \"activity\" : \"'+activity+'\", \"batchName\" : \"'+batchName+'\", \"batchId\" : \"'+batchId+'\", \"records\" : \"'+records+'\", \"status\" : \"'+status+'\", \"centerName\" : \"'+centerName+'\", \"centerId\" : \"'+centerId+'\",\"modelId\" : \"'+modelId+'\",\"uploadedBy\" : \"'+uploadedBy+'\",\"remarks\" : \"'+remarks+'\" }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n// Virtual to physical\r\nexport async function fetchStudentDetailsBaisedOnChannel(channel) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData(); \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllStudentsBasedOnCreationChannel\", \"data\" :[{\"creationChannel\": \"'+channel+'\"}] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.studentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\nexport async function fetchVirtualData(centerId, presState) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewDataByCenterId\", \"data\" : [{ \"centerId\" : '+centerId+' , \"presState\" : \"'+presState+'\" }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();                                                                      \r\n   return  fetch(serviceEndPoint.reportservice,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// to save the data in student engagement table\r\nexport async function updateStudentData(engagementId, dbUserId,centerId,createdBy,updatedBy,remarks,status,linkedEngagementId,reason) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStudentEngagement\", \"data\" : [{ \"engagementId\" : '+engagementId+' , \"dbUserId\" : '+dbUserId+' , \"centerId\" : '+centerId+' , \"createdBy\" : '+createdBy+',\"updatedBy\" : '+updatedBy+',\"remarks\" : \"'+remarks+'\",\"status\" : \"'+status+'\", \"linkedEngagementId\" : '+linkedEngagementId+' ,\"reason\" : \"'+reason+'\", }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();                                                                      \r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n// for forget password\r\nexport async function CheckIfUserWithDetailsExists (emailAddress,userName) {\r\n\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"CheckIfUserWithDetailsExists\", \"data\" : [{  \"emailAddress\" : \"'+emailAddress+'\",\"userName\" : \"'+userName+'\"}] }');\r\n    \r\n   return  fetch(serviceEndPoint.loginService,\r\n   {\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());  \r\n  return null;\r\n}\r\n\r\n\r\nexport async function ResetPasswordWithoutLoggingIn (id,password) {\r\n\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"ResetPasswordWithoutLoggingIn\", \"data\" : [{  \"id\" : \"'+id+'\",\"password\" : \"'+password+'\" }] }');\r\n    \r\n   return  fetch(serviceEndPoint.loginService,\r\n   {\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());  \r\n  return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}