{"ast":null,"code":"import { serviceEndPoint } from './../util/serviceEndPoint';\nimport UserContext from './../components/GolbalContext';\nimport { isSessionValid, isTokenValid } from './../util/session.js';\nimport { regenerateToken } from './validation';\nexport async function fetchMasterSalutation() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.salutationServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllCenter() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchMasterGenderDetails() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.genderServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchPincodeData(pincode) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":' + pincode + '}]}');\n    return fetch(serviceEndPoint.cityVillageServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function businessCaseSaveOrUpdate(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : ' + data + '}');\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessCaseMetaData(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessCaseQuestions() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : []}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseBriefMdmService, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocuments(engagementId, documentType, typeOfDocument) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"engagementId\":' + engagementId + ',\"documentType\":\"' + documentType + '\",\"typeOfDocument\":\"' + typeOfDocument + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBatchDetails(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatches\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBatchDetailsForBatchOwner(batchOwner, centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatchesForBatchOwner\", \"data\" : [{\"domainFacilitator\":' + batchOwner + ',\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetcRoleDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchAll\", \"data\" : []}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.roleServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function passwordReset(dbUserId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"passwordReset\", \"data\" : [{\"id\":' + dbUserId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function enrollStudent(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltobatch\", \"data\" : [{' + data + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function changeStudentStatus(data) {\n  if (isSessionValid()) {\n    try {\n      let requestFormData = new FormData();\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStatus\", \"data\" : [{' + data + '}]}');\n      if (!isTokenValid()) await regenerateToken();\n      return fetch(serviceEndPoint.engagementServiceEndPoint, {\n        method: \"POST\",\n        headers: {\n          'Authorization': 'Bearer ' + UserContext.token\n        },\n        body: requestFormData\n      }).then(response => response.json());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return null;\n}\nexport async function fectEnrollmentDetails(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetails\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectUserDetails(userId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectUserNameFromId(userId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json()).then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data);\n      alert(jsonobjects[0].firstName);\n      return jsonobjects[0].firstName;\n    });\n  }\n\n  return null;\n}\nexport async function fectUserRoleDetails(roleId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : [{\"id\":\"' + roleId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.roleServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectAddressDetails(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllAddressForEntity\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"U\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // address for placement\n\nexport async function fectAddressDetailsByAddressID(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAddressById\", \"data\" : [{\"id\" : ' + id + ' }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStateDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.stateServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function changePassword(userId, newPassword) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"changePassword\" + '\", \"data\" : [{\"id\" : ' + userId + ',\"password\" : \"' + newPassword + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAddressDetailsBasedOnPincode(pincode) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":' + pincode + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.cityVillageServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveUserDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveUserDetails\", \"data\" : [' + data + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveAddressDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAddress\", \"data\" : [' + data + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function sendResetPasswordLink(userName) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"resetPassword\", \"data\" : [{\"userName\":\"' + userName + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUsersByCenterId(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterId\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDetailsById(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetailsById\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDetails(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function mapUserToRole(userId, centerId, roleId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"saveUserCenterRoleMapDetails\", \"data\" : [{\"userId\":' + userId + ',\"centerId\":' + centerId + ',\"roleId\":' + roleId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEnrollmentDetailsByBatchId(batchId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchEnrollmentDetailsByBatchId\", \"data\" : [{\"batchId\":' + batchId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStudentDataByEngagementId(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAllStudentDataByEngagementId\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function captureStudentEngagementDetails(dbUserId, centerId, userid) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function captureStudentEngagementDetailsB(dbUserId, centerId, userid, engId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ',\"linkedEngagementId\" : ' + engId + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function isCurrentPasswordValid(userName, currentPassword) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"isCurrentPasswordValid\", \"data\" :[{\"userName\"  : \"' + userName + '\" , \"password\":\"' + currentPassword + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBatchDetailsByBatchId(batchId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"getBatchDetailsByBatchId\", \"data\" :[{\"batchId\"  : \"' + batchId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function BusinessIdeaEvaluationSaveOrUpdate(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveBusinessIdeaEvaluationDetails\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function FetchFinalScoreForBusinessIdea(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculateFinalScore\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessIdeaEvaluationData(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getBusinessIdeaEvaluationDetails\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCourseDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.courseServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveInterestInventoryCode(engagementId, finalScore, createdBy) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureInterestInventory\", \"data\" : [{\"engagementId\":' + engagementId + ',\"finalScore\":\"' + finalScore + '\",\"createdBy\":' + createdBy + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchInterestInventoryCode(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewInterestInventoryByEngId\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCentersOfUser(id) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllUserScopes\", \"data\" : [{\"userId\":' + UserContext.userid + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCentersDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcenter\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchRoleDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.roleServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function setDefaultSettings(userId, roleMapId, centerId, programId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"setDefaultSettings\", \"data\" : [{\"userId\":' + userId + ',\"roleMapId\":' + roleMapId + ',\"centerId\":' + centerId + ',\"programId\":' + programId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData,\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      }\n    }).then(response => response.json());\n  }\n\n  return null;\n} // export async function saveEducationDetails(data){\n//     if(isSessionValid()){\n//         let formData = new FormData();\n//         formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"captureAllEducation\" +'\", \"data\" : ' + JSON.stringify(this.state.rows) + '}');\n//         return fetch(serviceEndPoint.educationServiceEndPoint, {\n//         method: \"POST\",\n//         headers: {\n//           'Authorization': 'Bearer '+Cookies.get('token')\n//       },  \n//         body: formData  \n//         }).then(response => response.json());\n//     }\n//     return null;\n//     }\n\nexport async function saveCounsellingDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : [' + data + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.counsellingServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCounsellingDetails(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.counsellingServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCoursesByHollandCode(hollandCode) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByHollandCode\", \"data\" : [{\"hollandcode\":\"' + hollandCode + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findByAadharNo(aadharNo) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"isAadharNoDuplicate\", \"data\" : [{\"aadharNo\":\"' + aadharNo + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function searchByAadharNo(aadharNo) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByAadharNumber\", \"data\" : [{\"aadharNo\":\"' + aadharNo + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId(firstName, lastName, dob, primaryContactNumber, primaryEmailId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId\", \"data\" : [{\"firstName\":\"' + firstName + '\",\"lastName\":\"' + lastName + '\",\"dob\":\"' + dob + '\",\"primaryContactNumber\":\"' + primaryContactNumber + '\",\"primaryEmailId\":\"' + primaryEmailId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentDetailsByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewStudentEngagementById\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchNotCompletedBatchDetails(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getNotCompletedBatches\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function login(token, action, email, password) {\n  let requestFormData = new FormData();\n  requestFormData.append('data', '{\"token\" : \"' + token + '\", \"action\" : \"' + action + '\", \"data\" : [{\"userName\":\"' + email + '\",\"password\":\"' + password + '\"}]}');\n  return fetch(serviceEndPoint.loginService, {\n    method: \"POST\",\n    body: requestFormData\n  }).then(response => response.json());\n}\nexport async function fetchUserScope(userid) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getUserScope\", \"data\" : [{\"userId\":\"' + userid + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBasicData(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewBeneficiaryDetailsById\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAddressData(id) {\n  if (isSessionValid()) {\n    let formData2 = new FormData();\n    formData2.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllAddressForEntity\" + '\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"S\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData2\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function subMitBasicData(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : [' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function submitAddressData(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : [' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.addressServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function submitEducationData(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : ' + JSON.stringify(data) + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.educationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEducationData(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllEducationForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.educationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveBatchDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" :[' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveObservationDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : ' + JSON.stringify(data) + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.observationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchObservationdetails(engagementId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllObservationsForUser\" + '\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.observationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchFamilydetails(dbUserId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllFamilyDetailsForUser\" + '\", \"data\" : [{\"dbUserId\":' + dbUserId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveFamilyDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : ' + JSON.stringify(data) + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchFamilyDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllFamilyDetailsForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchPlacementDetailsByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewPlacementDetailsByEngagementId\" + '\",  \"data\" : [{\"engagementId\" : ' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.placementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchExperienceDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllExperienceForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} //Socio Details added ashish\n\nexport async function saveSocioDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" :[ ' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveExpDetails(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" :[ ' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function savePlacementDetails(data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"save\" , \"data\" :[ ' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.placementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} //ashish new screen family\n\nexport async function saveFamilyDetailsNew(action, data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + action + '\", \"data\" : [' + JSON.stringify(data) + ']}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.familyServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchExpDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewAllExperienceForUser\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} //ashish socio economic\n\nexport async function fetchSocioDetails(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"viewSocioEconomicById\" + '\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEvaluationData(eng) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewByEngagementId\", \"data\" : [{ \"engagementId\" : ' + eng + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchKnackScore(id) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"get\", \"data\" : [{ \"engagementId\" : ' + id + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.knackServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveEvaluationData(data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"captureAllEvaluationDetails\" + '\", \"data\" : ' + JSON.stringify(data) + ' }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentDataForList(role) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n\n    if (role === 3) {\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenterAndMultipleStatus\", \"data\" : [{\"centerId\":' + UserContext.centerId + '}]}');\n    } else {\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenter\", \"data\" : [{\"centerId\":' + UserContext.centerId + '}]}');\n    }\n\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function calculatePercentile() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculatePercentile\", \"data\" : [{\"createdBy\":' + UserContext.userid + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findNumberOfBeneficiaryInCenterByStatus(centerId, studentEngagementStatus) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"NumberOfBeneficiaryInCenterByStatus\", \"data\" : [{\"centerId\":\"' + centerId + '\",\"studentEngagementStatus\":\"' + studentEngagementStatus + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.dashboardService, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchQualificationDetails() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.qualificationServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocumentsByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementId\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocumentsByEngagementIdAndTypeOfDocument(engagementId, typeOfDocument) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementIdAndDocumentType\", \"data\" : [{\"engagementId\":' + engagementId + ',\"typeOfDocument\":\"' + typeOfDocument + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUserDocumentsByUserIdAndTypeOfDocument(dbUserId, typeOfDocument) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"dbUserId\":' + dbUserId + ',\"typeOfDocument\":\"' + typeOfDocument + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function deleteDocumentById(basicDocId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"deleteDocument\", \"data\" : [{\"basicDocId\":' + basicDocId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterCapacity() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerCapacity, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchBusinessIdeaEvaluationQuestions() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.businessIdeaEvaluation, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findAllObservationdetails() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"findall\" + '\", \"data\" : [{}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.masterObservation, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterActiveCourses(centerId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"' + \"getActiveCourse\" + '\", \"data\" : [{\"centerId\" :' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerService, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCourseDetailsByIds(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcourse\", \"data\" :' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.courseServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function uploadDocument(dbUserId, engagementId, documentType, typeOfDocument, documentName, document, documentNumber) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureDocDetails\", \"data\" : [{\"dbUserId\":' + dbUserId + ',\"engagementId\":' + engagementId + ',\"documentType\":\"' + documentType + '\",\"typeOfDocument\":\"' + typeOfDocument + '\",\"documentName\":\"' + documentName + '\",\"base64File\":\"' + document + '\",\"documentNo\":\"' + documentNumber + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchMasterExistingBusiness() {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAll\" , \"data\" : [{}]}');\n    return fetch(serviceEndPoint.mdmExistingBusiness, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveExistingBusiness(data) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"saveExistingBusinessDetails\" , \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.existingBusiness, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchExistingBusinessDetails(engagementId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchExistingBusinessDetails\" , \"data\" :[{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.existingBusiness, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterCapacityByIds(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCapacityByCenter\", \"data\" :' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerCapacity, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStudentEngagementForUser(dbUserId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllStudentEngagementForUser\", \"data\" :[{\"dbUserId\":' + dbUserId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData,\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      }\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fectEnrollmentDetailsByIds(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetailsByEngagementId\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchCenterProgramMapping(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCenterProgramMapping\", \"data\" :[{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.centerProgramMapping, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchProgram(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findprogram\", \"data\" :' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.programservice, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchComponentsByProgramIdAndRoleId(programId, roleId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchByProgramIdAndRoleId\", \"data\" :[{\"programId\":' + programId + ',\"roleId\":' + roleId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.programrolecomponentmapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchUsersByCenterIdAndRoleMapId(centerId, roleMapId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterIdAndRoleMapId\", \"data\" : [{\"centerId\":' + centerId + ',\"roleMapId\":' + roleMapId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.userProfileServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchEmployerDetails(accountStatus, typeOfRelationship) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findByAccountStatusAndTypeOfRelationshipLike\" , \"data\" : [{\"accountStatus\":\"' + accountStatus + '\",\"typeOfRelationship\":\"' + typeOfRelationship + '\"}]}');\n    return fetch(serviceEndPoint.employerservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getReports(pageNumber, pageSize, centerId, startDate, endDate, studentEngagementStatus, batchId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewData\" , \"data\" : [{\"pageNumber\":\"' + pageNumber + '\",\"pageSize\":\"' + pageSize + '\",\"centerId\":\"' + centerId + '\",\"startDate\":\"' + startDate + '\",\"endDate\":\"' + endDate + '\",\"studentEngagementStatus\":\"' + studentEngagementStatus + '\",\"batchId\":' + batchId + '}]}');\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function downloadReports(pageNumber, pageSize, centerId, startDate, endDate, studentEngagementStatus, batchId) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"downloadExcel\" , \"data\" : [{\"pageNumber\":\"' + pageNumber + '\",\"pageSize\":\"' + pageSize + '\",\"centerId\":\"' + centerId + '\",\"startDate\":\"' + startDate + '\",\"endDate\":\"' + endDate + '\",\"studentEngagementStatus\":\"' + studentEngagementStatus + '\",\"batchId\":' + batchId + '}]}');\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentDropoutDetailByEngagementId(engagementId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewDropout\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.dropoutServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveDropoutDetails(effortSpent, engagementId, createdBy) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveDropout\", \"data\" : [{\"effortSpent\":\"' + effortSpent + '\",\"engagementId\":\"' + engagementId + '\",\"createdBy\":\"' + createdBy + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.dropoutServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function markDropout(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"markdropout\", \"data\" : [{' + data + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function updateReadyForDropout(engagementId, readyForDropout) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStudentEngagementDetails\", \"data\" : [{\"readyForDropout\":\"' + readyForDropout + '\",\"engagementId\":' + engagementId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAllStudentDataByEngagementIdAndReadyForDropout(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAllStudentDataByEngagementIdAndReadyForDropout\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.engagementServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchAttendanceDetailsByAttendanceDateAndBatchId(batchId, attendanceDate) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewAttendanceByBatchIdAndAttendanceDate\", \"data\" :[{\"batchId\":' + batchId + ',\"attendanceDate\":\"' + attendanceDate + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.attendanceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchRunningBatchDetails(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRunningBatches\", \"data\" : [{\"centerId\":' + centerId + '}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveAttendanceDetails(data) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAllAttendance\", \"data\" : ' + data + '}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.attendanceServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findSkillmithraByOrgId(orgId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgId\", \"data\" :[{ \"orgId\" : \"' + orgId + '\" }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getUdyogMitraAndSkillInstitute(orgType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithras\", \"data\" :[{\"orgType\" : \"' + orgType + '\" }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function findInformalCourses() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByType\", \"data\" : [{\"type\" : \"informal\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.courseServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveInformalEnrollmentDetails(engagementId, batchId, courseId, updatedBy, startDate, endDate, orgId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltocourse\", \"data\" : [{\"engagementId\":\"' + engagementId + '\",\"batchId\":\"' + batchId + '\",\"courseId\":\"' + courseId + '\",\"updatedBy\":\"' + updatedBy + '\",\"startDate\":\"' + startDate + '\" , \"endDate\":\"' + endDate + '\",\"orgId\":\"' + orgId + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // api for module list\n\nexport async function fetchcourseModuleList(selectedYear) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getModuleNameByYear\", \"data\" :[{\"year\" : \" ' + selectedYear + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API for sub Module list in table\n\nexport async function fetchsubModuleList(moduleId, selectedYear) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{ \"token\" : \"\", \"action\" : \"getSubtopicNameByYearAndModuleId\", \"data\" : [{\"moduleId\": \"' + moduleId + '\", \"year\":\"' + selectedYear + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API for loading table data\n\nexport async function fetchtabledata(batchId, isActive) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus\", \"data\" :[{\"batchId\" : \" ' + batchId + '\", \"isActive\" : \"' + isActive + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API for saved data if value id ic nor there\n\nexport async function saveCourseCovrageData(userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData(); // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\n\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"userId\":\"' + userId + '\", \"batchId\":\"' + batchId + '\", \"isActive\":\"' + isActive + '\", \"moduleId\":\"' + moduleId + '\", \"subtopicId\":\"' + subtopicId + '\", \"createdDate\":\"' + createdDate + '\", \"remarks\":\"' + remarks + '\", \"compDate\":\"' + compDate + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Api calling for data saving when value id is present\n\nexport async function saveCourseCovrageDatawithId(id, userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData(); // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\n\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"id\":\"' + id + '\", \"userId\":\"' + userId + '\", \"batchId\":\"' + batchId + '\", \"isActive\":\"' + isActive + '\", \"moduleId\":\"' + moduleId + '\", \"subtopicId\":\"' + subtopicId + '\", \"createdDate\":\"' + createdDate + '\", \"remarks\":\"' + remarks + '\", \"compDate\":\"' + compDate + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // API call for submodule list\n\nexport async function fetchSubModulename(batchId, isActive) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus \" , \"data\" :[{\"batchId\":\"' + batchId + '\", \"isActive\" : \"' + isActive + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"post\",\n      header: {\n        'Authorization': 'Bearer ' + UserContext.token\n      }\n    }).then(response => response.json());\n  }\n\n  return null;\n} //API for loading table data for Course Coverage\n\nexport async function fetchtabledatawithModuleId(batchId, moduleId, isActive) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findByBatchIdAndModuleIdAndIsActive\", \"data\" :[{\"batchId\" : \"' + batchId + '\", \"moduleId\": \"' + moduleId + '\",\"isActive\" : \"' + isActive + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.coursecoveragetracker, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // fetching Centers By State Name\n\nexport async function fetchCenterByStateName(state) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"\", \"action\" : \"findallCenterbyState\" , \"data\" : [{\"state\" : \"' + state + '\"}]}');\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // ============ Api for Funder Mapping\n\nexport async function getBatchDetailsByBatchId(batchId, isActive, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"' + batchId + '\", \"isActive\":\"' + isActive + '\", \"fundingType\":\"' + fundingType + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getBatchDetailsByFunderId(funderId, isActive, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"funderId\" :\"' + funderId + '\", \"isActive\":\"' + isActive + '\", \"fundingType\":\"' + fundingType + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getBatchDetailsByBatchIdandFunderId(batchId, funderId, isActive, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"' + batchId + '\", \"funderId\" :\"' + funderId + '\", \"isActive\":\"' + isActive + '\", \"fundingType\":\"' + fundingType + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Fetching baised on Zone\n\nexport async function fetchStateByZone(zone) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findstatebyzone\", \"data\" : [{\"zone\":\"' + zone + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.stateServiceEndPoint, {\n      method: \"POST\",\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveBatchFunderDetails(batchId, funderId, crmFunderId, isActive, fundingType, createdBy, createdOn, remarks) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveFunderMappingDetails\", \"data\" :[{\"batchId\": ' + batchId + ', \"funderId\": ' + funderId + ', \"crmFunderId\": \"' + crmFunderId + '\", \"isActive\": \"' + isActive + '\", \"fundingType\": \"' + fundingType + '\", \"createdBy\": ' + createdBy + ', \"createdOn\": \"' + createdOn + '\", \"remarks\": \"' + remarks + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function updateBatchFunderDetails(id, batchId, funderId, crmFunderId, isActive, remarks, updatedOn, updatedBy, fundingType) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"UpdateExistingFunderMapping\", \"data\" :[{\"id\": ' + id + ', \"batchId\": ' + batchId + ', \"funderId\": ' + funderId + ',  \"crmFunderId\": \"' + crmFunderId + '\", \"isActive\": \"' + isActive + '\", \"fundingType\": \"' + fundingType + '\", \"updatedBy\": ' + updatedBy + ', \"updatedOn\": \"' + updatedOn + '\", \"remarks\": \"' + remarks + '\"}]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.fundermapping, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function getStudentStrengthByCenterIdAndStudentEngagementStatus(centerId, studentEngagementStatus) {\n  if (isSessionValid()) {\n    let formData = new FormData();\n    formData.append('data', '{\"token\" : \"1234\", \"action\" : \"viewStrengthByEngagementStatus\" , \"data\" : [{ \"centerId\": \"' + centerId + '\", \"studentEngagementStatus\": \"' + studentEngagementStatus + '\" }]}');\n    return fetch(serviceEndPoint.reportservice, {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Informal sector\n// {\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\", \"data\" :[{\"orgType\" : \"udhyogmithra\",\"programId\":5}]}\n\nexport async function fetchSkillMithraByIdAndProgramId(orgType, programId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\" , \"data\" : [{ \"orgType\": \"' + orgType + '\", \"programId\": \"' + programId + '\" }]}');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Buil upload\n\nexport async function saveBulkStudentData(RegId, firstName, lastName, middleName, dob, aadharNo, highestQualification, passingYear, gender, religion, category, primaryContactNumber, primaryEmailId, addressLine1, villageName, district, state, pincode, createdOn, createdBy, status, remarks) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveStudentDataBulk\", \"data\" : [{ \"regId\" : \"' + RegId + '\", \"firstName\": \"' + firstName + '\", \"lastName\" : \"' + lastName + '\", \"middleName\": \"' + middleName + '\", \"dob\" : \"' + dob + '\", \"aadharNo\": \"' + aadharNo + '\", \"highestQualification\" : \"' + highestQualification + '\", \"passingYear\": \"' + passingYear + '\", \"gender\" : \"' + gender + '\", \"religion\": \"' + religion + '\", \"category\" : \"' + category + '\", \"primaryContactNumber\": \"' + primaryContactNumber + '\", \"primaryEmailId\" : \"' + primaryEmailId + '\", \"addressLine1\": \"' + addressLine1 + '\", \"villageName\" : \"' + villageName + '\", \"district\": \"' + district + '\", \"state\" : \"' + state + '\", \"pincode\": \"' + pincode + '\",  \"createdOn\": \"' + createdOn + '\", \"createdBy\" : \"' + createdBy + '\", \"status\" : \"' + status + '\",\"remarks\" : \"' + remarks + '\"}] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function saveBulkMetaData(uploadFileName, uploadDate, activity, batchName, batchId, records, status, centerName, centerId, modelId, remarks) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveMetaDataBulk\", \"data\" : [{ \"uploadFileName\" : \"' + uploadFileName + '\", \"uploadDate\" : \"' + uploadDate + '\", \"activity\" : \"' + activity + '\", \"batchName\" : \"' + batchName + '\", \"batchId\" : \"' + batchId + '\", \"records\" : \"' + records + '\", \"status\" : \"' + status + '\", \"centerName\" : \"' + centerName + '\", \"centerId\" : \"' + centerId + '\",\"model_id\" : \"' + modelId + '\",\"remarks\" : \"' + remarks + '\" }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // Get Bulk data for History page\n\nexport async function fetchBulkData() {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllMetaDataBulk\", \"data\" : [{  }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}\nexport async function fetchStudentFile(regId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getStudentDataByRegIdBulk\", \"data\" : [{  \"regId\" : \"' + regId + '\"  }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n} // show baised on center id in upload meta data table\n\nexport async function fetchBulkAllMetaDataByCenterId(centerId) {\n  if (isSessionValid()) {\n    let requestFormData = new FormData();\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getMetaDataByCenterIdBulk\", \"data\" : [{ \"centerId\" : ' + centerId + ' }] }');\n    if (!isTokenValid()) await regenerateToken();\n    return fetch(serviceEndPoint.bulkupload, {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + UserContext.token\n      },\n      body: requestFormData\n    }).then(response => response.json());\n  }\n\n  return null;\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/util/api.js"],"names":["serviceEndPoint","UserContext","isSessionValid","isTokenValid","regenerateToken","fetchMasterSalutation","formData","FormData","append","fetch","salutationServiceEndPoint","method","body","then","response","json","fetchAllCenter","centerServiceEndPoint","fetchMasterGenderDetails","genderServiceEndPoint","fetchPincodeData","pincode","requestFormData","cityVillageServiceEndPoint","businessCaseSaveOrUpdate","data","businessCaseEndPoint","headers","token","fetchBusinessCaseMetaData","engagementId","fetchBusinessCaseQuestions","businessCaseBriefMdmService","fetchUserDocuments","documentType","typeOfDocument","documentServiceEndPoint","fetchBatchDetails","centerId","batchDetailsServiceEndPoint","fetchBatchDetailsForBatchOwner","batchOwner","fetcRoleDetails","roleServiceEndPoint","passwordReset","dbUserId","userProfileServiceEndPoint","enrollStudent","enrollmentServiceEndPoint","changeStudentStatus","engagementServiceEndPoint","e","console","log","fectEnrollmentDetails","fectUserDetails","userId","fectUserNameFromId","jsondata","jsonobjects","JSON","parse","alert","firstName","fectUserRoleDetails","roleId","fectAddressDetails","id","addressServiceEndPoint","fectAddressDetailsByAddressID","fetchAllStateDetails","stateServiceEndPoint","changePassword","newPassword","fetchAddressDetailsBasedOnPincode","saveUserDetails","saveAddressDetails","sendResetPasswordLink","userName","fetchUsersByCenterId","fetchUserDetailsById","fetchUserDetails","mapUserToRole","fetchEnrollmentDetailsByBatchId","batchId","fetchAllStudentDataByEngagementId","captureStudentEngagementDetails","userid","captureStudentEngagementDetailsB","engId","isCurrentPasswordValid","currentPassword","fetchBatchDetailsByBatchId","BusinessIdeaEvaluationSaveOrUpdate","FetchFinalScoreForBusinessIdea","fetchBusinessIdeaEvaluationData","fetchCourseDetails","courseServiceEndPoint","saveInterestInventoryCode","finalScore","createdBy","interestinventoryServiceEndPoint","fetchInterestInventoryCode","fetchCentersOfUser","fetchCentersDetails","fetchRoleDetails","setDefaultSettings","roleMapId","programId","saveCounsellingDetails","counsellingServiceEndPoint","fetchCounsellingDetails","fetchCoursesByHollandCode","hollandCode","findByAadharNo","aadharNo","studentServiceEndPoint","searchByAadharNo","searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId","lastName","dob","primaryContactNumber","primaryEmailId","fetchStudentDetailsByEngagementId","fetchNotCompletedBatchDetails","login","action","email","password","loginService","fetchUserScope","fetchBasicData","fetchAddressData","formData2","subMitBasicData","stringify","submitAddressData","submitEducationData","educationServiceEndPoint","fetchEducationData","saveBatchDetails","saveObservationDetails","observationServiceEndPoint","fetchObservationdetails","fetchFamilydetails","familyServiceEndPoint","saveFamilyDetails","fetchFamilyDetails","fetchPlacementDetailsByEngagementId","placementServiceEndPoint","fetchExperienceDetails","experienceServiceEndPoint","saveSocioDetails","socioeconomicServiceEndPoint","saveExpDetails","savePlacementDetails","saveFamilyDetailsNew","fetchExpDetails","fetchSocioDetails","fetchEvaluationData","eng","evaluationServiceEndPoint","fetchKnackScore","knackServiceEndPoint","saveEvaluationData","fetchStudentDataForList","role","calculatePercentile","findNumberOfBeneficiaryInCenterByStatus","studentEngagementStatus","dashboardService","fetchQualificationDetails","qualificationServiceEndPoint","fetchUserDocumentsByEngagementId","fetchUserDocumentsByEngagementIdAndTypeOfDocument","fetchUserDocumentsByUserIdAndTypeOfDocument","deleteDocumentById","basicDocId","fetchCenterCapacity","centerCapacity","fetchBusinessIdeaEvaluationQuestions","businessIdeaEvaluation","findAllObservationdetails","masterObservation","fetchCenterActiveCourses","centerService","fetchCourseDetailsByIds","uploadDocument","documentName","document","documentNumber","fetchMasterExistingBusiness","mdmExistingBusiness","saveExistingBusiness","existingBusiness","fetchExistingBusinessDetails","fetchCenterCapacityByIds","fetchAllStudentEngagementForUser","fectEnrollmentDetailsByIds","fetchCenterProgramMapping","centerProgramMapping","fetchProgram","programservice","fetchComponentsByProgramIdAndRoleId","programrolecomponentmapping","fetchUsersByCenterIdAndRoleMapId","fetchEmployerDetails","accountStatus","typeOfRelationship","employerservice","getReports","pageNumber","pageSize","startDate","endDate","reportservice","downloadReports","fetchStudentDropoutDetailByEngagementId","dropoutServiceEndPoint","saveDropoutDetails","effortSpent","markDropout","updateReadyForDropout","readyForDropout","fetchAllStudentDataByEngagementIdAndReadyForDropout","fetchAttendanceDetailsByAttendanceDateAndBatchId","attendanceDate","attendanceServiceEndPoint","fetchRunningBatchDetails","saveAttendanceDetails","findSkillmithraByOrgId","orgId","udyogmitraandskillinstitute","getUdyogMitraAndSkillInstitute","orgType","findInformalCourses","saveInformalEnrollmentDetails","courseId","updatedBy","fetchcourseModuleList","selectedYear","coursecoveragetracker","fetchsubModuleList","moduleId","fetchtabledata","isActive","saveCourseCovrageData","subtopicId","createdDate","remarks","compDate","saveCourseCovrageDatawithId","fetchSubModulename","header","fetchtabledatawithModuleId","fetchCenterByStateName","state","getBatchDetailsByBatchId","fundingType","fundermapping","getBatchDetailsByFunderId","funderId","getBatchDetailsByBatchIdandFunderId","fetchStateByZone","zone","saveBatchFunderDetails","crmFunderId","createdOn","updateBatchFunderDetails","updatedOn","getStudentStrengthByCenterIdAndStudentEngagementStatus","fetchSkillMithraByIdAndProgramId","saveBulkStudentData","RegId","middleName","highestQualification","passingYear","gender","religion","category","addressLine1","villageName","district","status","bulkupload","saveBulkMetaData","uploadFileName","uploadDate","activity","batchName","records","centerName","modelId","fetchBulkData","fetchStudentFile","regId","fetchBulkAllMetaDataByCenterId"],"mappings":"AAAA,SAASA,eAAT,QAAgC,2BAAhC;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,sBAA3C;AACA,SAASC,eAAT,QAAgC,cAAhC;AAGA,OAAO,eAAeC,qBAAf,GAAuC;AAC1C,MAAGH,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,0CAAlD;AACA,WAAOC,KAAK,CAACT,eAAe,CAACU,yBAAjB,EAA4C;AACpDC,MAAAA,MAAM,EAAE,MAD4C;AAEpDC,MAAAA,IAAI,EAAEN;AAF8C,KAA5C,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,MAAGd,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,0CAAlD;AACA,WAAOC,KAAK,CAACT,eAAe,CAACiB,qBAAjB,EAAwC;AAChDN,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEN;AAF0C,KAAxC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeG,wBAAf,GAA0C;AAC7C,MAAGhB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,0CAAlD;AACA,WAAOC,KAAK,CAACT,eAAe,CAACmB,qBAAjB,EAAwC;AAChDR,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEN;AAF0C,KAAxC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeK,gBAAf,CAAgCC,OAAhC,EAAyC;AAC5C,MAAGnB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mEAAmEa,OAAnE,GAA6E,KAA5G;AACA,WAAOZ,KAAK,CAACT,eAAe,CAACuB,0BAAjB,EAA6C;AACrDZ,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,IAAI,EAAEU;AAF+C,KAA7C,CAAL,CAGJT,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeS,wBAAf,CAAwCC,IAAxC,EAA8C;AACjD,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gDAAgDiB,IAAhD,GAAuD,GAAtF;AACD,WAAOhB,KAAK,CAACT,eAAe,CAAC0B,oBAAjB,EAAuC;AAC9Cf,MAAAA,MAAM,EAAE,MADsC;AAE9CgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFqC;AAK9ChB,MAAAA,IAAI,EAAEU;AALwC,KAAvC,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAP;AAOF;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAec,yBAAf,CAAyCC,YAAzC,EAAuD;AAC1D,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gEAAgEsB,YAAhE,GAA+E,KAA9G;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAAC0B,oBAAjB,EAAuC;AAC/Cf,MAAAA,MAAM,EAAE,MADuC;AAE/CgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFsC;AAK/ChB,MAAAA,IAAI,EAAEU;AALyC,KAAvC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAegB,0BAAf,GAA4C;AAC/C,MAAG7B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACgC,2BAAjB,EAA8C;AACtDrB,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,IAAI,EAAEU;AAFgD,KAA9C,CAAL,CAGJT,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAekB,kBAAf,CAAkCH,YAAlC,EAA+CI,YAA/C,EAA4DC,cAA5D,EAA4E;AAC/E,MAAGjC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,wGAAsGsB,YAAtG,GAAmH,mBAAnH,GAAuII,YAAvI,GAAoJ,sBAApJ,GAA2KC,cAA3K,GAA0L,MAAzN;AACA,QAAG,CAAChC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAOK,KAAK,CAACT,eAAe,CAACoC,uBAAjB,EAA0C;AACjDzB,MAAAA,MAAM,EAAE,MADyC;AAEjDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFwC;AAKjDhB,MAAAA,IAAI,EAAEU;AAL2C,KAA1C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAP;AAOF;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAesB,iBAAf,CAAiCC,QAAjC,EAA2C;AAC9C,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,yEAAuE8B,QAAvE,GAAgF,KAA/G;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACuC,2BAAjB,EAA6C;AACxD5B,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEU;AALkD,KAA7C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AACD,OAAO,eAAeyB,8BAAf,CAA8CC,UAA9C,EAAyDH,QAAzD,EAAmE;AACtE,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+FAA6FiC,UAA7F,GAAwG,cAAxG,GAAuHH,QAAvH,GAAgI,KAA/J;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAACuC,2BAAjB,EAA6C;AACzD5B,MAAAA,MAAM,EAAE,MADiD;AAEzDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAFgD;AAKzDhB,MAAAA,IAAI,EAAEU;AALmD,KAA7C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAe2B,eAAf,GAAiC;AACpC,MAAGxC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,oDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC2C,mBAAjB,EAAqC;AAChDhC,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEU;AAF0C,KAArC,CAAL,CAGHT,IAHG,CAGEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHd,CAAR;AAIE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe6B,aAAf,CAA6BC,QAA7B,EAAuC;AAC1C,MAAG3C,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gEAA8DqC,QAA9D,GAAuE,KAAtG;AACA,QAAG,CAAC1C,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAegC,aAAf,CAA6BtB,IAA7B,EAAmC;AACtC,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,2DAAyDiB,IAAzD,GAA8D,KAA7F;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACgD,yBAAjB,EAA2C;AACtDrC,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA3C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAekC,mBAAf,CAAmCxB,IAAnC,EAAyC;AAC5C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAG;AACH,UAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,MAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0DAAwDiB,IAAxD,GAA6D,KAA5F;AACA,UAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,aAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACtDvC,QAAAA,MAAM,EAAE,MAD8C;AAEtDgB,QAAAA,OAAO,EAAE;AACN,2BAAiB,YAAU1B,WAAW,CAAC2B;AADjC,SAF6C;AAKtDhB,QAAAA,IAAI,EAAEU;AALgD,OAA3C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE,KAZD,CAaA,OAAMoC,CAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeG,qBAAf,CAAqCxB,YAArC,EAAmD;AACtD,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mFAAiFsB,YAAjF,GAA8F,KAA7H;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAACgD,yBAAjB,EAA2C;AACvDrC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA3C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAewC,eAAf,CAA+BC,MAA/B,EAAuC;AAC1C,MAAGtD,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qEAAqEgD,MAArE,GAA8E,KAA7G;AACA,QAAG,CAACrD,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACxDnC,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEU;AALkD,KAA5C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe0C,kBAAf,CAAkCD,MAAlC,EAA0C;AAC7C,MAAGtD,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qEAAqEgD,MAArE,GAA8E,KAA7G;AACA,QAAG,CAACrD,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACxDnC,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEU;AALkD,KAA5C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,EAM8BF,IAN9B,CAMoC6C,QAAD,IAAY;AAEnD,UAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACjC,IAApB,CAAlB;AACAqC,MAAAA,KAAK,CAACH,WAAW,CAAC,CAAD,CAAX,CAAeI,SAAhB,CAAL;AACA,aAAOJ,WAAW,CAAC,CAAD,CAAX,CAAeI,SAAtB;AAEE,KAZE,CAAP;AAaI;;AACD,SAAO,IAAP;AACP;AAED,OAAO,eAAeC,mBAAf,CAAmCC,MAAnC,EAA2C;AAC9C,MAAG/D,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,kEAAgEyD,MAAhE,GAAuE,MAAtG;AACA,QAAG,CAAC9D,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC2C,mBAAjB,EAAqC;AAChDhC,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAArC,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAemD,kBAAf,CAAkCC,EAAlC,EAAsC;AACzC,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,kFAAkF2D,EAAlF,GAAuF,0BAAtH;AACA,QAAG,CAAChE,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AAEL,WAAQK,KAAK,CAACT,eAAe,CAACoE,sBAAjB,EAAwC;AACnDzD,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF0C;AAMnDhB,MAAAA,IAAI,EAAEU;AAN6C,KAAxC,CAAL,CAOHT,IAPG,CAOEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPd,CAAR;AAQE;;AACD,SAAO,IAAP;AACH,C,CACD;;AACA,OAAO,eAAesD,6BAAf,CAA6CF,EAA7C,EAAiD;AACpD,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,oEAAoE2D,EAApE,GAAyE,MAAxG;AACA,QAAG,CAAChE,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AAEL,WAAQK,KAAK,CAACT,eAAe,CAACoE,sBAAjB,EAAwC;AACnDzD,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF0C;AAMnDhB,MAAAA,IAAI,EAAEU;AAN6C,KAAxC,CAAL,CAOHT,IAPG,CAOEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPd,CAAR;AAQE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeuD,oBAAf,GAAsC;AACzC,MAAGpE,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACuE,oBAAjB,EAAsC;AACjD5D,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEU;AAF2C,KAAtC,CAAL,CAGHT,IAHG,CAGEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHd,CAAR;AAIE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAeyD,cAAf,CAA8BhB,MAA9B,EAAqCiB,WAArC,EAAkD;AACrD,MAAGvE,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,gBAA5C,GAA8D,uBAA9D,GAAwFgD,MAAxF,GAAiG,iBAAjG,GAAoHiB,WAApH,GAAkI,MAAhK;AACA,QAAG,CAACtE,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe2D,iCAAf,CAAiDrD,OAAjD,EAA0D;AAC7D,MAAGnB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mEAAiEa,OAAjE,GAAyE,KAAxG;AACA,QAAG,CAAClB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACuB,0BAAjB,EAA4C;AACvDZ,MAAAA,MAAM,EAAE,MAD+C;AAEvDC,MAAAA,IAAI,EAAEU;AAFiD,KAA5C,CAAL,CAGHT,IAHG,CAGEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHd,CAAR;AAIE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe4D,eAAf,CAA+BlD,IAA/B,EAAqC;AACxC,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,4DAA0DiB,IAA1D,GAA+D,IAA9F;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACxDnC,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEU;AALkD,KAA5C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe6D,kBAAf,CAAkCnD,IAAlC,EAAwC;AAC3C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0DAAwDiB,IAAxD,GAA6D,IAA5F;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACoE,sBAAjB,EAAwC;AACnDzD,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF0C;AAKnDhB,MAAAA,IAAI,EAAEU;AAL6C,KAAxC,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe8D,qBAAf,CAAqCC,QAArC,EAA+C;AAClD,MAAG5E,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,uEAAqEsE,QAArE,GAA8E,MAA7G;AACA,QAAG,CAAC3E,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAegE,oBAAf,CAAoCzC,QAApC,EAA8C;AACjD,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,4EAA0E8B,QAA1E,GAAmF,KAAlH;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeiE,oBAAf,CAAoCvD,IAApC,EAA0C;AAC7C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gEAA8DiB,IAA9D,GAAmE,GAAlG;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAekE,gBAAf,CAAgCd,EAAhC,EAAoC;AACvC,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,sDAAxB,GAAiF2D,EAAjF,GAAsF,KAApH;AACA,QAAG,CAAChE,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAemE,aAAf,CAA6B1B,MAA7B,EAAoClB,QAApC,EAA6C2B,MAA7C,EAAqD;AACxD,MAAG/D,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,oEAAxB,GAA6FgD,MAA7F,GAAoG,cAApG,GAAmHlB,QAAnH,GAA4H,YAA5H,GAAyI2B,MAAzI,GAAgJ,KAA9K;AACA,QAAG,CAAC9D,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACP,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACrDnC,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEU;AAL+C,KAA5C,CAAL,CAMDT,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CAAR;AAOI;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAeoE,+BAAf,CAA+CC,OAA/C,EAAwD;AAC3D,MAAGlF,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,wEAAxB,GAAiG4E,OAAjG,GAAyG,KAAvI;AACA,QAAG,CAACjF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAACgD,yBAAjB,EAA2C;AACvDrC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA3C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AACD,OAAO,eAAesE,iCAAf,CAAiD5D,IAAjD,EAAuD;AAC1D,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,8DAAxB,GAAuFiB,IAAvF,GAA4F,GAA1H;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACrDvC,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEU;AAL+C,KAA3C,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAR;AAOG;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeuE,+BAAf,CAA+CzC,QAA/C,EAAwDP,QAAxD,EAAiEiD,MAAjE,EAAyE;AAC5E,MAAGrF,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,oEAAxB,GAA+FqC,QAA/F,GAA0G,kBAA1G,GAA+HP,QAA/H,GAA0I,kBAA1I,GAA+JiD,MAA/J,GAAwK,4CAAtM;AAEA,QAAG,CAACpF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACP,WAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACpDvC,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEU;AAL8C,KAA3C,CAAL,CAMDT,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CAAR;AAOI;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeyE,gCAAf,CAAgD3C,QAAhD,EAAyDP,QAAzD,EAAkEiD,MAAlE,EAAyEE,KAAzE,EAAgF;AACnF,MAAGvF,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,oEAAxB,GAA+FqC,QAA/F,GAA0G,kBAA1G,GAA+HP,QAA/H,GAA0I,kBAA1I,GAA+JiD,MAA/J,GAAwK,0BAAxK,GAAqME,KAArM,GAA6M,4CAA3O;AACA,QAAG,CAACtF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACP,WAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACpDvC,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEU;AAL8C,KAA3C,CAAL,CAMDT,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CAAR;AAOI;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe2E,sBAAf,CAAsCZ,QAAtC,EAA+Ca,eAA/C,EAAgE;AACnE,MAAGzF,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,mEAAxB,GAA8FsE,QAA9F,GAAyG,kBAAzG,GAA4Ha,eAA5H,GAA4I,MAA1K;AACA,QAAG,CAACxF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACrDnB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAD4C;AAIxDjB,MAAAA,MAAM,EAAE,MAJgD;AAKxDC,MAAAA,IAAI,EAAEU;AALkD,KAA5C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAe6E,0BAAf,CAA0CR,OAA1C,EAAmD;AACtD,MAAGlF,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,oEAAxB,GAA+F4E,OAA/F,GAAyG,MAAvI;AACA,QAAG,CAACjF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAQK,KAAK,CAACT,eAAe,CAACuC,2BAAjB,EAA6C;AAC1D5B,MAAAA,MAAM,EAAE,MADkD;AAE1DgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAFiD;AAK1DhB,MAAAA,IAAI,EAAEU;AALoD,KAA7C,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAR;AAOA;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe8E,kCAAf,CAAkDpE,IAAlD,EAAwD;AAC3D,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACDe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,6EAA6EiB,IAA7E,GAAoF,GAAnH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACK,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAAC0B,oBAAjB,EAAuC;AAC7Cf,MAAAA,MAAM,EAAE,MADqC;AAE7CgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFoC;AAK7ChB,MAAAA,IAAI,EAAEU;AALuC,KAAvC,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAP;AAOD;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe+E,8BAAf,CAA8ChE,YAA9C,EAA4D;AAC/D,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACDe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gFAAgFsB,YAAhF,GAA+F,KAA9H;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACK,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAAC0B,oBAAjB,EAAuC;AAC7Cf,MAAAA,MAAM,EAAE,MADqC;AAE7CgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFoC;AAK7ChB,MAAAA,IAAI,EAAEU;AALuC,KAAvC,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAP;AAOD;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAegF,+BAAf,CAA+CjE,YAA/C,EAA6D;AAChE,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,6FAA6FsB,YAA7F,GAA4G,KAA3I;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC0B,oBAAjB,EAAuC;AAChDf,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAAvC,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeiF,kBAAf,GAAoC;AACvC,MAAG9F,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACiG,qBAAjB,EAAwC;AACjDtF,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEU;AAF2C,KAAxC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAemF,yBAAf,CAAyCpE,YAAzC,EAAsDqE,UAAtD,EAAiEC,SAAjE,EAA4E;AAC/E,MAAGlG,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qFAAqFsB,YAArF,GAAoG,iBAApG,GAAwHqE,UAAxH,GAAqI,gBAArI,GAAsJC,SAAtJ,GAAgK,KAA/L;AACA,QAAG,CAACjG,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACqG,gCAAjB,EAAmD;AAC5D1F,MAAAA,MAAM,EAAE,MADoD;AAE5DgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFmD;AAK5DhB,MAAAA,IAAI,EAAEU;AALsD,KAAnD,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeuF,0BAAf,CAA0CxE,YAA1C,EAAwD;AAC3D,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,yFAAyFsB,YAAzF,GAAwG,KAAvI;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACqG,gCAAjB,EAAmD;AAC5D1F,MAAAA,MAAM,EAAE,MADoD;AAE5DgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFmD;AAK5DhB,MAAAA,IAAI,EAAEU;AALsD,KAAnD,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAewF,kBAAf,CAAkCpC,EAAlC,EAAsC;AACzC,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,uEAAqEP,WAAW,CAACsF,MAAjF,GAAwF,KAAvH;AACA,QAAG,CAACpF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA6C;AACtDnC,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA7C,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAeyF,mBAAf,CAAmC/E,IAAnC,EAAyC;AAC5C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,sDAAoDiB,IAApD,GAAyD,GAAxF;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACiB,qBAAjB,EAAwC;AACjDN,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEU;AAF2C,KAAxC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAe0F,gBAAf,CAAgChF,IAAhC,EAAsC;AACzC,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0DAAwDiB,IAAxD,GAA6D,GAA5F;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC2C,mBAAjB,EAAsC;AAC/ChC,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,IAAI,EAAEU;AAFyC,KAAtC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe2F,kBAAf,CAAkClD,MAAlC,EAAyCmD,SAAzC,EAAmDrE,QAAnD,EAA4DsE,SAA5D,EAAuE;AAC1E,MAAG1G,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,yEAAuEgD,MAAvE,GAA8E,eAA9E,GAA8FmD,SAA9F,GAAwG,cAAxG,GAAuHrE,QAAvH,GAAgI,eAAhI,GAAgJsE,SAAhJ,GAA0J,KAAzL;AACA,QAAG,CAACzG,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA6C;AACtDnC,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,IAAI,EAAEU,eAFgD;AAGtDK,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC;AAH6C,KAA7C,CAAL,CAMLf,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,eAAe8F,sBAAf,CAAsCpF,IAAtC,EAA4C;AAC/C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,iDAA+CiB,IAA/C,GAAoD,IAAnF;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC8G,0BAAjB,EAA6C;AACtDnG,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA7C,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAegG,uBAAf,CAAuCjF,YAAvC,EAAqD;AACxD,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gEAA8DsB,YAA9D,GAA2E,KAA1G;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAAC8G,0BAAjB,EAA6C;AACrDnG,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEU;AAL+C,KAA7C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeiG,yBAAf,CAAyCC,WAAzC,EAAsD;AACzD,MAAG/G,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qFAAmFyG,WAAnF,GAA+F,MAA9H;AACA,QAAG,CAAC9G,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACqG,gCAAjB,EAAmD;AAC3D1F,MAAAA,MAAM,EAAE,MADmD;AAE3DgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFkD;AAK3DhB,MAAAA,IAAI,EAAEU;AALqD,KAAnD,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAemG,cAAf,CAA8BC,QAA9B,EAAwC;AAC3C,MAAGjH,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,6EAA2E2G,QAA3E,GAAoF,MAAnH;AACA,QAAG,CAAChH,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACoH,sBAAjB,EAAyC;AACjDzG,MAAAA,MAAM,EAAE,MADyC;AAEjDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFwC;AAKjDhB,MAAAA,IAAI,EAAEU;AAL2C,KAAzC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOC;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAesG,gBAAf,CAAgCF,QAAhC,EAA0C;AAC/C,MAAGjH,cAAc,EAAjB,EAAoB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,8EAA4E2G,QAA5E,GAAqF,MAApH;AACA,QAAG,CAAChH,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACoH,sBAAjB,EAAyC;AACjDzG,MAAAA,MAAM,EAAE,MADyC;AAEjDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFwC;AAKjDhB,MAAAA,IAAI,EAAEU;AAL2C,KAAzC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeuG,0EAAf,CAA0FvD,SAA1F,EAAoGwD,QAApG,EAA6GC,GAA7G,EAAiHC,oBAAjH,EAAsIC,cAAtI,EAAsJ;AACzJ,MAAGxH,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qIAAmIuD,SAAnI,GAA6I,gBAA7I,GAA8JwD,QAA9J,GAAuK,WAAvK,GAAmLC,GAAnL,GAAuL,4BAAvL,GAAoNC,oBAApN,GAAyO,sBAAzO,GAAgQC,cAAhQ,GAA+Q,MAA9S;AACA,QAAG,CAACvH,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAOK,KAAK,CAACT,eAAe,CAACoH,sBAAjB,EAAyC;AAChDzG,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAAzC,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAP;AAOE;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAe4G,iCAAf,CAAiD7F,YAAjD,EAA+D;AAClE,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,sFAAoFsB,YAApF,GAAiG,KAAhI;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAOK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA4C;AACnDvC,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAF0C;AAKnDhB,MAAAA,IAAI,EAAEU;AAL6C,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAP;AAOF;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe6G,6BAAf,CAA6CtF,QAA7C,EAAuD;AAC1D,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+EAA6E8B,QAA7E,GAAsF,KAArH;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAACuC,2BAAjB,EAA6C;AACzD5B,MAAAA,MAAM,EAAE,MADiD;AAEzDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAFgD;AAKzDhB,MAAAA,IAAI,EAAEU;AALmD,KAA7C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAe8G,KAAf,CAAqBjG,KAArB,EAA2BkG,MAA3B,EAAkCC,KAAlC,EAAwCC,QAAxC,EAAkD;AACrD,MAAI1G,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,EAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,iBAAeoB,KAAf,GAAqB,iBAArB,GAAuCkG,MAAvC,GAA8C,4BAA9C,GAA2EC,KAA3E,GAAiF,gBAAjF,GAAkGC,QAAlG,GAA2G,MAA1I;AACA,SAAQvH,KAAK,CAACT,eAAe,CAACiI,YAAjB,EAA8B;AAC1CtH,IAAAA,MAAM,EAAE,MADkC;AAE1CC,IAAAA,IAAI,EAAEU;AAFoC,GAA9B,CAAL,CAGJT,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAR;AAIH;AAID,OAAO,eAAemH,cAAf,CAA8B3C,MAA9B,EAAsC;AACzC,MAAGrF,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,oEAAkE+E,MAAlE,GAAyE,MAAxG;AACA,QAAG,CAACpF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACxDnC,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEU;AALkD,KAA5C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeoH,cAAf,CAA8BhE,EAA9B,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,4BAA5C,GAA0E,6BAA1E,GAA0G2D,EAA1G,GAA+G,KAAtI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACoH,sBAAjB,EAAyC;AACrDzG,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEN;AAL+C,KAAzC,CAAL,CAOPO,IAPO,CAOFC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPV,CAAP;AAQT;;AACD,SAAO,IAAP;AACC;AACD,OAAO,eAAeqH,gBAAf,CAAgCjE,EAAhC,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAImI,SAAS,GAAG,IAAI9H,QAAJ,EAAhB;AACM8H,IAAAA,SAAS,CAAC7H,MAAV,CAAiB,MAAjB,EAAwB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,yBAA5C,GAAuE,6BAAvE,GAAuG2D,EAAvG,GAA4G,0BAApI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACoE,sBAAjB,EAAyC;AACrDzD,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEyH;AAL+C,KAAzC,CAAL,CAMJxH,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeuH,eAAf,CAA+BR,MAA/B,EAAwCrG,IAAxC,EACP;AACI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,eAApD,GAAsElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAAtE,GAA6F,IAApH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACA,WAAOK,KAAK,CAACT,eAAe,CAACoH,sBAAjB,EAAyC;AACrDzG,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEN;AAL+C,KAAzC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOP;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeyH,iBAAf,CAAiCV,MAAjC,EAAyCrG,IAAzC,EACP;AACI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACGD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,eAApD,GAAsElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAAtE,GAA6F,IAApH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACC,MAAMC,eAAe,EAArB;AACC,WAAOK,KAAK,CAACT,eAAe,CAACoE,sBAAjB,EAAyC;AACrDzD,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEN;AAL+C,KAAzC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOR;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe0H,mBAAf,CAAmCX,MAAnC,EAA0CrG,IAA1C,EACP;AACI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,cAApD,GAAqElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAArE,GAA4F,GAAnH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACA,WAAOK,KAAK,CAACT,eAAe,CAAC0I,wBAAjB,EAA2C;AACvD/H,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEN;AALiD,KAA3C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOP;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe4H,kBAAf,CAAkCxE,EAAlC,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACKD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,yBAA5C,GAAuE,6BAAvE,GAAuG2D,EAAvG,GAA4G,KAAnI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACD,MAAMC,eAAe,EAArB;AACC,WAAOK,KAAK,CAACT,eAAe,CAAC0I,wBAAjB,EAA2C;AACvD/H,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEN;AALiD,KAA3C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOR;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe6H,gBAAf,CAAgCd,MAAhC,EAAwCrG,IAAxC,EACP;AACI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,cAApD,GAAqElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAArE,GAA4F,IAAnH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACA,WAAOK,KAAK,CAACT,eAAe,CAACuC,2BAAjB,EAA8C;AAC1D5B,MAAAA,MAAM,EAAE,MADkD;AAE1DgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAFiD;AAK1DhB,MAAAA,IAAI,EAAEN;AALoD,KAA9C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOP;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe8H,sBAAf,CAAsCf,MAAtC,EAA8CrG,IAA9C,EACP;AACI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,cAApD,GAAqElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAArE,GAA4F,GAAnH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACA,WAAOK,KAAK,CAACT,eAAe,CAAC8I,0BAAjB,EAA6C;AACzDnI,MAAAA,MAAM,EAAE,MADiD;AAEzDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAFgD;AAKzDhB,MAAAA,IAAI,EAAEN;AALmD,KAA7C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOP;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAegI,uBAAf,CAAuCjH,YAAvC,EACP;AACI,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,4BAA5C,GAA0E,+BAA1E,GAA0GsB,YAA1G,GAAuH,KAA9I;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAAC8I,0BAAjB,EAA6C;AACzDnI,MAAAA,MAAM,EAAE,MADiD;AAEzDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAFgD;AAKzDhB,MAAAA,IAAI,EAAEN;AALmD,KAA7C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeiI,kBAAf,CAAkCnG,QAAlC,EACP;AACI,MAAG3C,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,6BAA5C,GAA2E,2BAA3E,GAAuGqC,QAAvG,GAAgH,KAAvI;AACA,QAAG,CAAC1C,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACiJ,qBAAjB,EAAwC;AACpDtI,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEN;AAL8C,KAAxC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AAKD,OAAO,eAAemI,iBAAf,CAAiCpB,MAAjC,EAAyCrG,IAAzC,EACP;AAAC,MAAGvB,cAAc,EAAjB,EAAoB;AACjB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,cAApD,GAAqElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAArE,GAA4F,GAAnH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACA,WAAOK,KAAK,CAACT,eAAe,CAACiJ,qBAAjB,EAAwC;AACpDtI,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEN;AAL8C,KAAxC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOP;;AACD,SAAO,IAAP;AACC;AACD,OAAO,eAAeoI,kBAAf,CAAkChF,EAAlC,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,6BAA5C,GAA2E,6BAA3E,GAA2G2D,EAA3G,GAAgH,KAAvI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACiJ,qBAAjB,EAAwC;AACpDtI,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEN;AAL8C,KAAxC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeqI,mCAAf,CAAmDtH,YAAnD,EACP;AACI,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,oCAA5C,GAAkF,kCAAlF,GAAuHsB,YAAvH,GAAsI,KAA7J;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACqJ,wBAAjB,EAA2C;AACvD1I,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEN;AALiD,KAA3C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AACD,OAAO,eAAeuI,sBAAf,CAAsCnF,EAAtC,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,0BAA5C,GAAwE,6BAAxE,GAAwG2D,EAAxG,GAA6G,KAApI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACuJ,yBAAjB,EAA4C;AACxD5I,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEN;AALkD,KAA5C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC,C,CAED;;AACA,OAAO,eAAeyI,gBAAf,CAAgC1B,MAAhC,EAAwCrG,IAAxC,EACP;AAEI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,eAApD,GAAsElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAAtE,GAA6F,IAApH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACyJ,4BAAjB,EAA+C;AAC3D9I,MAAAA,MAAM,EAAE,MADmD;AAE3DgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAFkD;AAK3DhB,MAAAA,IAAI,EAAEN;AALqD,KAA/C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe2I,cAAf,CAA8B5B,MAA9B,EAAsCrG,IAAtC,EACP;AAEI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,eAApD,GAAsElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAAtE,GAA6F,IAApH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACuJ,yBAAjB,EAA4C;AAC5D5I,MAAAA,MAAM,EAAE,MADoD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEN;AALkD,KAA5C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe4I,oBAAf,CAAoClI,IAApC,EACP;AAEI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,mCAAxB,GAA8DoD,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAA9D,GAAqF,IAA5G;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACqJ,wBAAjB,EAA2C;AACvD1I,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEN;AALiD,KAA3C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC,C,CAED;;AACA,OAAO,eAAe6I,oBAAf,CAAoC9B,MAApC,EAA4CrG,IAA5C,EACP;AACI,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4CsH,MAA5C,GAAoD,eAApD,GAAsElE,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAAtE,GAA6F,IAApH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACiJ,qBAAjB,EAAwC;AACpDtI,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEN;AAL8C,KAAxC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe8I,eAAf,CAA+B1F,EAA/B,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACnB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,0BAA5C,GAAwE,6BAAxE,GAAwG2D,EAAxG,GAA6G,KAApI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACG,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACuJ,yBAAjB,EAA4C;AACrD5I,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACR,yBAAiB,YAAU1B,WAAW,CAAC2B;AAD/B,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEN;AAL+C,KAA5C,CAAL,CAMDO,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CAAP;AAOH;;AACD,SAAO,IAAP;AACC,C,CAED;;AACA,OAAO,eAAe+I,iBAAf,CAAiC3F,EAAjC,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACnB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,uBAA5C,GAAqE,6BAArE,GAAqG2D,EAArG,GAA0G,KAAjI;AACA,QAAG,CAAChE,YAAY,EAAhB,EACG,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACyJ,4BAAjB,EAA+C;AACxD9I,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACR,yBAAiB,YAAU1B,WAAW,CAAC2B;AAD/B,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEN;AALkD,KAA/C,CAAL,CAMDO,IANC,CAMIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANhB,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAegJ,mBAAf,CAAmCC,GAAnC,EACP;AACI,MAAG9J,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,mEAAxB,GAA8FwJ,GAA9F,GAAoG,KAA3H;AACA,QAAG,CAAC7J,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACC,WAAOK,KAAK,CAACT,eAAe,CAACiK,yBAAjB,EAA4C;AACvDtJ,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEN;AALiD,KAA5C,CAAL,CAMHO,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAP;AAOR;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAemJ,eAAf,CAA+B/F,EAA/B,EACP;AACI,MAAGjE,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,oDAAxB,GAA+E2D,EAA/E,GAAoF,KAA3G;AACA,QAAG,CAAChE,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACmK,oBAAjB,EAAuC;AACnDxJ,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF0C;AAKnDhB,MAAAA,IAAI,EAAEN;AAL6C,KAAvC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AACD,OAAO,eAAeqJ,kBAAf,CAAkC3I,IAAlC,EACP;AAAC,MAAGvB,cAAc,EAAjB,EAAoB;AACjB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,6BAA5C,GAA2E,cAA3E,GAA4FoD,IAAI,CAAC2E,SAAL,CAAe9G,IAAf,CAA5F,GAAmH,IAA1I;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiK,yBAAjB,EAA4C;AACxDtJ,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEN;AALkD,KAA5C,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AAEC;AAGD,OAAO,eAAesJ,uBAAf,CAAuCC,IAAvC,EACP;AAAC,MAAGpK,cAAc,EAAjB,EAAoB;AACjB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;;AACA,QAAK+J,IAAI,KAAG,CAAZ,EAAc;AACZhJ,MAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,yFAAuFP,WAAW,CAACqC,QAAnG,GAA4G,KAA3I;AACD,KAFD,MAGI;AACFhB,MAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,wEAAsEP,WAAW,CAACqC,QAAlF,GAA2F,KAA1H;AACD;;AACD,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACA,WAAOK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACnDvC,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF0C;AAKnDhB,MAAAA,IAAI,EAAEU;AAL6C,KAA3C,CAAL,CAMAT,IANA,CAMKC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANjB,CAAP;AASP;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAewJ,mBAAf,GACP;AACI,MAAGrK,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,6EAA2EP,WAAW,CAACsF,MAAvF,GAA8F,KAA7H;AACA,QAAG,CAACpF,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAACiK,yBAAjB,EAA2C;AACvDtJ,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA3C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOD;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeyJ,uCAAf,CAAuDlI,QAAvD,EAAgEmI,uBAAhE,EAAyF;AAC5F,MAAGvK,cAAc,EAAjB,EAAoB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,6FAA2F8B,QAA3F,GAAoG,+BAApG,GAAoImI,uBAApI,GAA4J,MAA3L;AACA,QAAG,CAACtK,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAAC0K,gBAAjB,EAAmC;AAC3C/J,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,IAAI,EAAEU;AAFqC,KAAnC,CAAL,CAGJT,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAe4J,yBAAf,GAA2C;AAChD,MAAGzK,cAAc,EAAjB,EAAoB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAAC4K,4BAAjB,EAA+C;AACvDjK,MAAAA,MAAM,EAAE,MAD+C;AAEvDC,MAAAA,IAAI,EAAEU;AAFiD,KAA/C,CAAL,CAGJT,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe8J,gCAAf,CAAgD/I,YAAhD,EAA8D;AACnE,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+FAA6FsB,YAA7F,GAA0G,KAAzI;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAACoC,uBAAjB,EAA0C;AAChDzB,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAA1C,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAP;AAOD;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAe+J,iDAAf,CAAiEhJ,YAAjE,EAA8EK,cAA9E,EAA8F;AACjG,MAAGjC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,8GAA4GsB,YAA5G,GAAyH,qBAAzH,GAA+IK,cAA/I,GAA8J,MAA7L;AACA,QAAG,CAAChC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAACoC,uBAAjB,EAA0C;AAEhDzB,MAAAA,MAAM,EAAE,MAFwC;AAGhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAHuC;AAMhDhB,MAAAA,IAAI,EAAEU;AAN0C,KAA1C,CAAL,CAOFT,IAPE,CAOGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPf,CAAP;AAQD;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAegK,2CAAf,CAA2DlI,QAA3D,EAAoEV,cAApE,EAAoF;AACvF,MAAGjC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,kGAAgGqC,QAAhG,GAAyG,qBAAzG,GAA+HV,cAA/H,GAA8I,MAA7K;AACA,QAAG,CAAChC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAACoC,uBAAjB,EAA0C;AAChDzB,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAA1C,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAP;AAOD;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeiK,kBAAf,CAAkCC,UAAlC,EAA8C;AACjD,MAAG/K,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,yEAAuEyK,UAAvE,GAAkF,KAAjH;AACA,QAAG,CAAC9K,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAOK,KAAK,CAACT,eAAe,CAACoC,uBAAjB,EAA0C;AAChDzB,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAA1C,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAP;AAOD;;AACD,SAAO,IAAP;AACC;AAKD,OAAO,eAAemK,mBAAf,GAAqC;AACxC,MAAGhL,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACmL,cAAjB,EAAiC;AAC1CxK,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEU;AAFoC,KAAjC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAKD,OAAO,eAAeqK,oCAAf,GAAsD;AACzD,MAAGlL,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qDAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACqL,sBAAjB,EAAyC;AAClD1K,MAAAA,MAAM,EAAE,MAD0C;AAElDC,MAAAA,IAAI,EAAEU;AAF4C,KAAzC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAeuK,yBAAf,GACP;AACI,MAAGpL,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,SAA5C,GAAuD,mBAA9E;AACA,QAAG,CAACL,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACuL,iBAAjB,EAAoC;AAChD5K,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEN;AAF0C,KAApC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIT;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeyK,wBAAf,CAAwClJ,QAAxC,EACP;AACI,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACMD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,iBAAgB,MAAhB,GAAwB,iBAAxB,GAA4C,iBAA5C,GAA+D,4BAA/D,GAA4F8B,QAA5F,GAAqG,KAA5H;AACA,QAAG,CAACnC,YAAY,EAAhB,EACF,MAAMC,eAAe,EAArB;AACE,WAAOK,KAAK,CAACT,eAAe,CAACyL,aAAjB,EAAgC;AAC5C9K,MAAAA,MAAM,EAAE,MADoC;AAE5CgB,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAU1B,WAAW,CAAC2B;AADhC,OAFmC;AAK5ChB,MAAAA,IAAI,EAAEN;AALsC,KAAhC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOT;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe2K,uBAAf,CAAuCjK,IAAvC,EAA6C;AAChD,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qDAAmDiB,IAAnD,GAAwD,GAAvF;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACiG,qBAAjB,EAAwC;AACjDtF,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEU;AAF2C,KAAxC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe4K,cAAf,CAA8B9I,QAA9B,EAAuCf,YAAvC,EAAoDI,YAApD,EAAiEC,cAAjE,EAAgFyJ,YAAhF,EAA6FC,QAA7F,EAAsGC,cAAtG,EAAsH;AACzH,MAAG5L,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0EAAwEqC,QAAxE,GAAiF,kBAAjF,GAAoGf,YAApG,GAAiH,mBAAjH,GAAqII,YAArI,GAAkJ,sBAAlJ,GAAyKC,cAAzK,GAAwL,oBAAxL,GAA6MyJ,YAA7M,GAA0N,kBAA1N,GAA6OC,QAA7O,GAAsP,kBAAtP,GAAyQC,cAAzQ,GAAwR,MAAvT;AACA,QAAG,CAAC3L,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACoC,uBAAjB,EAA0C;AAClDzB,MAAAA,MAAM,EAAE,MAD0C;AAElDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFyC;AAKlDhB,MAAAA,IAAI,EAAEU;AAL4C,KAA1C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAegL,2BAAf,GAA6C;AAChD,MAAG7L,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,2CAAlD;AACA,WAAOC,KAAK,CAACT,eAAe,CAACgM,mBAAjB,EAAsC;AAC9CrL,MAAAA,MAAM,EAAE,MADsC;AAE9CC,MAAAA,IAAI,EAAEN;AAFwC,KAAtC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAekL,oBAAf,CAAoCxK,IAApC,EAA0C;AAC7C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,yDAA1B,GAAoFiB,IAApF,GAAyF,GAAjH;AAEA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACkM,gBAAjB,EAAmC;AAC3CvL,MAAAA,MAAM,EAAE,MADmC;AAE3CgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFkC;AAK3ChB,MAAAA,IAAI,EAAEN;AALqC,KAAnC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeoL,4BAAf,CAA4CrK,YAA5C,EAA0D;AAC7D,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,0EAA1B,GAAqGsB,YAArG,GAAkH,KAA1I;AAEA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACkM,gBAAjB,EAAmC;AAC3CvL,MAAAA,MAAM,EAAE,MADmC;AAE3CgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFkC;AAK3ChB,MAAAA,IAAI,EAAEN;AALqC,KAAnC,CAAL,CAMJO,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAeqL,wBAAf,CAAwC3K,IAAxC,EAA8C;AACjD,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+DAA6DiB,IAA7D,GAAkE,GAAjG;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACmL,cAAjB,EAAiC;AAC1CxK,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEU;AAFoC,KAAjC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAesL,gCAAf,CAAgDxJ,QAAhD,EAA0D;AAC7D,MAAG3C,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,uFAAqFqC,QAArF,GAA8F,KAA7H;AACA,QAAG,CAAC1C,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA4C;AACrDvC,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,IAAI,EAAEU,eAF+C;AAGrDK,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC;AAH4C,KAA5C,CAAL,CAMLf,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAeuL,0BAAf,CAA0C7K,IAA1C,EAAgD;AACnD,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gFAA8EiB,IAA9E,GAAmF,GAAlH;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAQK,KAAK,CAACT,eAAe,CAACgD,yBAAjB,EAA2C;AACvDrC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA3C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAR;AAOC;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAewL,yBAAf,CAAyCjK,QAAzC,EAAmD;AACtD,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gFAA8E8B,QAA9E,GAAuF,KAAtH;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAACwM,oBAAjB,EAAuC;AAChD7L,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEU;AAF0C,KAAvC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe0L,YAAf,CAA4BhL,IAA5B,EAAkC;AACrC,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,sDAAoDiB,IAApD,GAAyD,GAAxF;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC0M,cAAjB,EAAiC;AAC1C/L,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEU;AAFoC,KAAjC,CAAL,CAGLT,IAHK,CAGAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHZ,CAAP;AAIJ;;AACD,SAAO,IAAP;AACC;AAID,OAAO,eAAe4L,mCAAf,CAAmD/F,SAAnD,EAA6D3C,MAA7D,EAAqE;AACxE,MAAG/D,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,kFAAgFoG,SAAhF,GAA0F,YAA1F,GAAuG3C,MAAvG,GAA8G,KAA7I;AACA,QAAG,CAAC9D,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC4M,2BAAjB,EAA8C;AACvDjM,MAAAA,MAAM,EAAE,MAD+C;AAEtDgB,MAAAA,OAAO,EAAE;AACV,yBAAiB,YAAU1B,WAAW,CAAC2B;AAD7B,OAF6C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA9C,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe8L,gCAAf,CAAgDvK,QAAhD,EAAyDqE,SAAzD,EAAoE;AACvE,MAAGzG,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,wFAAsF8B,QAAtF,GAA+F,eAA/F,GAA+GqE,SAA/G,GAAyH,KAAxJ;AACA,QAAG,CAACxG,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC8C,0BAAjB,EAA4C;AACvDnC,MAAAA,MAAM,EAAE,MAD+C;AAEvDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8C;AAKvDhB,MAAAA,IAAI,EAAEU;AALiD,KAA5C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe+L,oBAAf,CAAoCC,aAApC,EAAkDC,kBAAlD,EAAsE;AACzE,MAAG9M,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,6FAA1B,GAAwHuM,aAAxH,GAAsI,0BAAtI,GAAiKC,kBAAjK,GAAoL,MAA5M;AACA,WAAOvM,KAAK,CAACT,eAAe,CAACiN,eAAjB,EAAkC;AAC1CtM,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEN;AAFoC,KAAlC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAemM,UAAf,CAA0BC,UAA1B,EAAqCC,QAArC,EAA8C9K,QAA9C,EAAuD+K,SAAvD,EAAiEC,OAAjE,EAAyE7C,uBAAzE,EAAiGrF,OAAjG,EAA0G;AAC7G,MAAGlF,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,sDAA1B,GAAiF2M,UAAjF,GAA4F,gBAA5F,GAA6GC,QAA7G,GAAsH,gBAAtH,GAAuI9K,QAAvI,GAAgJ,iBAAhJ,GAAkK+K,SAAlK,GAA4K,eAA5K,GAA4LC,OAA5L,GAAoM,+BAApM,GAAoO7C,uBAApO,GAA4P,cAA5P,GAA2QrF,OAA3Q,GAAmR,KAA3S;AACA,WAAO3E,KAAK,CAACT,eAAe,CAACuN,aAAjB,EAAgC;AACxC5M,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,IAAI,EAAEN;AAFkC,KAAhC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAeyM,eAAf,CAA+BL,UAA/B,EAA0CC,QAA1C,EAAmD9K,QAAnD,EAA4D+K,SAA5D,EAAsEC,OAAtE,EAA8E7C,uBAA9E,EAAsGrF,OAAtG,EAA+G;AAClH,MAAGlF,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,iBAAiB,MAAjB,GAA0B,2DAA1B,GAAsF2M,UAAtF,GAAiG,gBAAjG,GAAkHC,QAAlH,GAA2H,gBAA3H,GAA4I9K,QAA5I,GAAqJ,iBAArJ,GAAuK+K,SAAvK,GAAiL,eAAjL,GAAiMC,OAAjM,GAAyM,+BAAzM,GAAyO7C,uBAAzO,GAAiQ,cAAjQ,GAAgRrF,OAAhR,GAAwR,KAAhT;AACA,WAAO3E,KAAK,CAACT,eAAe,CAACuN,aAAjB,EAAgC;AACxC5M,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,IAAI,EAAEN;AAFkC,KAAhC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC;AAED,OAAO,eAAe0M,uCAAf,CAAuD3L,YAAvD,EAAqE;AACxE,MAAG5B,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,wEAAsEsB,YAAtE,GAAmF,KAAlH;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC0N,sBAAjB,EAAwC;AACnD/M,MAAAA,MAAM,EAAE,MAD2C;AAEnDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF0C;AAKnDhB,MAAAA,IAAI,EAAEU;AAL6C,KAAxC,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe4M,kBAAf,CAAkCC,WAAlC,EAA8C9L,YAA9C,EAA2DsE,SAA3D,EAAsE;AACzE,MAAGlG,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,wEAAsEoN,WAAtE,GAAkF,oBAAlF,GAAuG9L,YAAvG,GAAoH,iBAApH,GAAsIsE,SAAtI,GAAgJ,MAA/K;AACA,QAAG,CAACjG,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACH,WAAOK,KAAK,CAACT,eAAe,CAAC0N,sBAAjB,EAAyC;AAClD/M,MAAAA,MAAM,EAAE,MAD0C;AAElDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAU1B,WAAW,CAAC2B;AADlC,OAFyC;AAKlDhB,MAAAA,IAAI,EAAEU;AAL4C,KAAzC,CAAL,CAMLT,IANK,CAMAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANZ,CAAP;AAOJ;;AACD,SAAO,IAAP;AACC;AAGD,OAAO,eAAe8M,WAAf,CAA2BpM,IAA3B,EAAiC;AACpC,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,yDAAuDiB,IAAvD,GAA4D,KAA3F;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACtDvC,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA3C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe+M,qBAAf,CAAqChM,YAArC,EAAkDiM,eAAlD,EAAmE;AACtE,MAAG7N,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+FAA6FuN,eAA7F,GAA6G,mBAA7G,GAAiIjM,YAAjI,GAA8I,KAA7K;AACA,QAAG,CAAC3B,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACtDvC,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA3C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAeiN,mDAAf,CAAmEvM,IAAnE,EAAyE;AAC5E,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,gFAAxB,GAAyGiB,IAAzG,GAA8G,GAA5I;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAQK,KAAK,CAACT,eAAe,CAACkD,yBAAjB,EAA2C;AACrDvC,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEU;AAL+C,KAA3C,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAR;AAOG;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAekN,gDAAf,CAAgE7I,OAAhE,EAAwE8I,cAAxE,EAAwF;AAC3F,MAAGhO,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,iBAAgB,MAAhB,GAAwB,gFAAxB,GAAyG4E,OAAzG,GAAiH,qBAAjH,GAAuI8I,cAAvI,GAAsJ,MAApL;AACA,QAAG,CAAC/N,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACN,WAAQK,KAAK,CAACT,eAAe,CAACmO,yBAAjB,EAA2C;AACrDxN,MAAAA,MAAM,EAAE,MAD6C;AAErDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF4C;AAKrDhB,MAAAA,IAAI,EAAEU;AAL+C,KAA3C,CAAL,CAMFT,IANE,CAMGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANf,CAAR;AAOG;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeqN,wBAAf,CAAwC9L,QAAxC,EAAkD;AACrD,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0EAAwE8B,QAAxE,GAAiF,KAAhH;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACuC,2BAAjB,EAA6C;AACxD5B,MAAAA,MAAM,EAAE,MADgD;AAExDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF+C;AAKxDhB,MAAAA,IAAI,EAAEU;AALkD,KAA7C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAesN,qBAAf,CAAqC5M,IAArC,EAA2C;AAC9C,MAAGvB,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+DAA6DiB,IAA7D,GAAkE,GAAjG;AACA,QAAG,CAACtB,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACmO,yBAAjB,EAA2C;AACtDxN,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA3C,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAeuN,sBAAf,CAAsCC,KAAtC,EAA4C;AAC/C,MAAIrO,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gFAA8E+N,KAA9E,GAAoF,OAAnH;AACA,QAAI,CAACpO,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACwO,2BAAjB,EAA8C;AACtD7N,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAY1B,WAAW,CAAC2B;AADpC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA9C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe0N,8BAAf,CAA8CC,OAA9C,EAAuD;AAC1D,MAAIxO,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0EAAyEkO,OAAzE,GAAkF,OAAjH;AACA,QAAI,CAACvO,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACwO,2BAAjB,EAA8C;AACtD7N,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAY1B,WAAW,CAAC2B;AADpC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA9C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe4N,mBAAf,GAAqC;AACxC,MAAIzO,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,kFAA/B;AACA,QAAI,CAACL,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiG,qBAAjB,EAAwC;AAChDtF,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEU;AAF0C,KAAxC,CAAL,CAGJT,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe6N,6BAAf,CAA6C9M,YAA7C,EAA2DsD,OAA3D,EAAoEyJ,QAApE,EAA8EC,SAA9E,EAAyFzB,SAAzF,EAAoGC,OAApG,EAA6GiB,KAA7G,EAAqH;AACxH,MAAIrO,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,4EAA0EsB,YAA1E,GAAuF,eAAvF,GAAuGsD,OAAvG,GAA+G,gBAA/G,GAAgIyJ,QAAhI,GAAyI,iBAAzI,GAA2JC,SAA3J,GAAqK,iBAArK,GAAuLzB,SAAvL,GAAiM,iBAAjM,GAAmNC,OAAnN,GAA2N,aAA3N,GAAyOiB,KAAzO,GAA+O,MAA9Q;AACA,QAAI,CAACpO,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACgD,yBAAjB,EAA4C;AACpDrC,MAAAA,MAAM,EAAE,MAD4C;AAEpDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAY1B,WAAW,CAAC2B;AADpC,OAF2C;AAKpDhB,MAAAA,IAAI,EAAEU;AAL8C,KAA5C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAGD;;AACA,OAAO,eAAegO,qBAAf,CAAqCC,YAArC,EAAkD;AACrD,MAAG9O,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,2EAAyEwO,YAAzE,GAAsF,MAArH;AAEA,QAAG,CAAC7O,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAuC;AAC/CtO,MAAAA,MAAM,EAAG,MADsC;AAE/CgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAFuC;AAK/ChB,MAAAA,IAAI,EAAGU;AALwC,KAAvC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA,OAAO,eAAemO,kBAAf,CAAkCC,QAAlC,EAA2CH,YAA3C,EAAwD;AAC3D,MAAG9O,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA8B,4FAA0F2O,QAA1F,GAAmG,aAAnG,GAAiHH,YAAjH,GAA8H,MAA5J;AAEA,QAAG,CAAC7O,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAuC;AAC/CtO,MAAAA,MAAM,EAAG,MADsC;AAE/CgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAFuC;AAK/ChB,MAAAA,IAAI,EAAGU;AALwC,KAAvC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CACD;;AACA,OAAO,eAAeqO,cAAf,CAA8BhK,OAA9B,EAAwCiK,QAAxC,EAAiD;AACpD,MAAGnP,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,2GAAyG4E,OAAzG,GAAiH,mBAAjH,GAAqIiK,QAArI,GAA8I,MAA7K;AAEA,QAAG,CAAClP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAuC;AAC/CtO,MAAAA,MAAM,EAAG,MADsC;AAE/CgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAFuC;AAK/ChB,MAAAA,IAAI,EAAGU;AALwC,KAAvC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA,OAAO,eAAeuO,qBAAf,CAAqC9L,MAArC,EAA6C4B,OAA7C,EAAsDiK,QAAtD,EAAgEE,UAAhE,EAA4EJ,QAA5E,EAAsFK,WAAtF,EAAmGC,OAAnG,EAA4GC,QAA5G,EAAsH;AACzH,MAAIxP,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB,CADkB,CAElB;;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,+EAA6EgD,MAA7E,GAAoF,gBAApF,GAAqG4B,OAArG,GAA6G,iBAA7G,GAA+HiK,QAA/H,GAAwI,iBAAxI,GAA0JF,QAA1J,GAAmK,mBAAnK,GAAuLI,UAAvL,GAAkM,oBAAlM,GAAuNC,WAAvN,GAAmO,gBAAnO,GAAoPC,OAApP,GAA4P,iBAA5P,GAA8QC,QAA9Q,GAAuR,MAAtT;AACA,QAAI,CAACvP,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAwC;AAChDtO,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAY1B,WAAW,CAAC2B;AADpC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAAxC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA,OAAO,eAAe4O,2BAAf,CAA2CxL,EAA3C,EAA8CX,MAA9C,EAAsD4B,OAAtD,EAA+DiK,QAA/D,EAAyEE,UAAzE,EAAqFJ,QAArF,EAA+FK,WAA/F,EAA4GC,OAA5G,EAAqHC,QAArH,EAA+H;AAClI,MAAIxP,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB,CADkB,CAElB;;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,2EAAyE2D,EAAzE,GAA4E,eAA5E,GAA4FX,MAA5F,GAAmG,gBAAnG,GAAoH4B,OAApH,GAA4H,iBAA5H,GAA8IiK,QAA9I,GAAuJ,iBAAvJ,GAAyKF,QAAzK,GAAkL,mBAAlL,GAAsMI,UAAtM,GAAiN,oBAAjN,GAAsOC,WAAtO,GAAkP,gBAAlP,GAAmQC,OAAnQ,GAA2Q,iBAA3Q,GAA6RC,QAA7R,GAAsS,MAArU;AACA,QAAI,CAACvP,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAwC;AAChDtO,MAAAA,MAAM,EAAE,MADwC;AAEhDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAY1B,WAAW,CAAC2B;AADpC,OAFuC;AAKhDhB,MAAAA,IAAI,EAAEU;AAL0C,KAAxC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA,OAAO,eAAe6O,kBAAf,CAAkCxK,OAAlC,EAA2CiK,QAA3C,EAAoD;AACvD,MAAGnP,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,0GAAwG4E,OAAxG,GAAgH,mBAAhH,GAAoIiK,QAApI,GAA6I,MAA5K;AACA,QAAG,CAAClP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAuC;AAC/CtO,MAAAA,MAAM,EAAC,MADwC;AAE/CkP,MAAAA,MAAM,EAAC;AACH,yBAAiB,YAAY5P,WAAW,CAAC2B;AADtC;AAFwC,KAAvC,CAAL,CAKJf,IALI,CAKCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALb,CAAP;AAMH;;AACD,SAAO,IAAP;AACH,C,CAED;;AACA,OAAO,eAAe+O,0BAAf,CAA0C1K,OAA1C,EAAmD+J,QAAnD,EAA6DE,QAA7D,EAAsE;AACzE,MAAGnP,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,6FAA2F4E,OAA3F,GAAmG,kBAAnG,GAAsH+J,QAAtH,GAA+H,kBAA/H,GAAkJE,QAAlJ,GAA2J,MAA1L;AAEA,QAAG,CAAClP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACiP,qBAAjB,EAAuC;AAC/CtO,MAAAA,MAAM,EAAG,MADsC;AAE/CgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAFuC;AAK/ChB,MAAAA,IAAI,EAAGU;AALwC,KAAvC,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA,OAAO,eAAegP,sBAAf,CAAsCC,KAAtC,EAA6C;AAChD,MAAG9P,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,8EAA4EwP,KAA5E,GAAkF,MAA1G;AACA,WAAOvP,KAAK,CAACT,eAAe,CAACiB,qBAAjB,EAAwC;AAChDN,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,IAAI,EAAEN;AAF0C,KAAxC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC,C,CAED;;AAGA,OAAO,eAAekP,wBAAf,CAAwC7K,OAAxC,EAAiDiK,QAAjD,EAA2Da,WAA3D,EAAuE;AAC1E,MAAGhQ,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qHAAmH4E,OAAnH,GAA2H,iBAA3H,GAA6IiK,QAA7I,GAAsJ,oBAAtJ,GAA2Ka,WAA3K,GAAuL,MAAtN;AAEA,QAAG,CAAC/P,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACmQ,aAAjB,EAA+B;AACvCxP,MAAAA,MAAM,EAAG,MAD8B;AAEvCgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAF+B;AAKvChB,MAAAA,IAAI,EAAGU;AALgC,KAA/B,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeqP,yBAAf,CAAyCC,QAAzC,EAAmDhB,QAAnD,EAA6Da,WAA7D,EAAyE;AAC5E,MAAGhQ,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,uHAAqH6P,QAArH,GAA8H,iBAA9H,GAAgJhB,QAAhJ,GAAyJ,oBAAzJ,GAA8Ka,WAA9K,GAA0L,MAAzN;AAEA,QAAG,CAAC/P,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACmQ,aAAjB,EAA+B;AACvCxP,MAAAA,MAAM,EAAG,MAD8B;AAEvCgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAF+B;AAKvChB,MAAAA,IAAI,EAAGU;AALgC,KAA/B,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAeuP,mCAAf,CAAmDlL,OAAnD,EAA4DiL,QAA5D,EAAsEhB,QAAtE,EAAgFa,WAAhF,EAA4F;AAC/F,MAAGhQ,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,gIAA8H4E,OAA9H,GAAsI,kBAAtI,GAAyJiL,QAAzJ,GAAkK,iBAAlK,GAAoLhB,QAApL,GAA6L,oBAA7L,GAAkNa,WAAlN,GAA8N,MAA7P;AAEA,QAAG,CAAC/P,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACmQ,aAAjB,EAA+B;AACvCxP,MAAAA,MAAM,EAAG,MAD8B;AAEvCgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAF+B;AAKvChB,MAAAA,IAAI,EAAGU;AALgC,KAA/B,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAGD;;AACA,OAAO,eAAewP,gBAAf,CAAgCC,IAAhC,EAAsC;AACzC,MAAGtQ,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qEAAmEgQ,IAAnE,GAAwE,MAAvG;AACA,QAAG,CAACrQ,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAACuE,oBAAjB,EAAsC;AACjD5D,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEU;AAF2C,KAAtC,CAAL,CAGHT,IAHG,CAGEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHd,CAAR;AAIE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe0P,sBAAf,CAAsCrL,OAAtC,EAA+CiL,QAA/C,EAAyDK,WAAzD,EAAsErB,QAAtE,EAAgFa,WAAhF,EAA6F9J,SAA7F,EAAwGuK,SAAxG,EAAmHlB,OAAnH,EAA2H;AAC9H,MAAGvP,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,oFAAkF4E,OAAlF,GAA0F,gBAA1F,GAA2GiL,QAA3G,GAAoH,oBAApH,GAAyIK,WAAzI,GAAqJ,kBAArJ,GAAwKrB,QAAxK,GAAiL,qBAAjL,GAAuMa,WAAvM,GAAmN,kBAAnN,GAAsO9J,SAAtO,GAAgP,kBAAhP,GAAmQuK,SAAnQ,GAA6Q,iBAA7Q,GAA+RlB,OAA/R,GAAuS,MAAtU;AACA,QAAG,CAACtP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACmQ,aAAjB,EAA+B;AACvCxP,MAAAA,MAAM,EAAG,MAD8B;AAEvCgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAF+B;AAKvChB,MAAAA,IAAI,EAAGU;AALgC,KAA/B,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe6P,wBAAf,CAAwCzM,EAAxC,EAA4CiB,OAA5C,EAAqDiL,QAArD,EAA+DK,WAA/D,EAA4ErB,QAA5E,EAAsFI,OAAtF,EAA+FoB,SAA/F,EAA0G/B,SAA1G,EAAqHoB,WAArH,EAAiI;AACpI,MAAGhQ,cAAc,EAAjB,EAAoB;AAChB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,kFAAgF2D,EAAhF,GAAmF,eAAnF,GAAmGiB,OAAnG,GAA2G,gBAA3G,GAA4HiL,QAA5H,GAAqI,qBAArI,GAA2JK,WAA3J,GAAuK,kBAAvK,GAA0LrB,QAA1L,GAAmM,qBAAnM,GAAyNa,WAAzN,GAAqO,kBAArO,GAAwPpB,SAAxP,GAAkQ,kBAAlQ,GAAqR+B,SAArR,GAA+R,iBAA/R,GAAiTpB,OAAjT,GAAyT,MAAxV;AACA,QAAG,CAACtP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACmQ,aAAjB,EAA+B;AACvCxP,MAAAA,MAAM,EAAG,MAD8B;AAEvCgB,MAAAA,OAAO,EAAC;AACJ,yBAAiB,YAAY1B,WAAW,CAAC2B;AADrC,OAF+B;AAKvChB,MAAAA,IAAI,EAAGU;AALgC,KAA/B,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH;AAED,OAAO,eAAe+P,sDAAf,CAAuExO,QAAvE,EAAiFmI,uBAAjF,EAA0G;AAC7G,MAAGvK,cAAc,EAAjB,EAAoB;AACpB,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,+FAA6F8B,QAA7F,GAAsG,iCAAtG,GAAwImI,uBAAxI,GAAgK,OAAvL;AACA,WAAOhK,KAAK,CAACT,eAAe,CAACuN,aAAjB,EAAgC;AACxC5M,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,IAAI,EAAEN;AAFkC,KAAhC,CAAL,CAGJO,IAHI,CAGCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHb,CAAP;AAIH;;AACD,SAAO,IAAP;AACC,C,CAED;AAEA;;AAEA,OAAO,eAAegQ,gCAAf,CAAgDrC,OAAhD,EAAwD9H,SAAxD,EAAmE;AACtE,MAAI1G,cAAc,EAAlB,EAAsB;AAClB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mGAAiGkO,OAAjG,GAAyG,mBAAzG,GAA6H9H,SAA7H,GAAuI,OAAtK;AACA,QAAI,CAACzG,YAAY,EAAjB,EACI,MAAMC,eAAe,EAArB;AACJ,WAAOK,KAAK,CAACT,eAAe,CAACwO,2BAAjB,EAA8C;AACtD7N,MAAAA,MAAM,EAAE,MAD8C;AAEtDgB,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAY1B,WAAW,CAAC2B;AADpC,OAF6C;AAKtDhB,MAAAA,IAAI,EAAEU;AALgD,KAA9C,CAAL,CAMJT,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP;AAOH;;AACD,SAAO,IAAP;AACH,C,CAED;;AAEA,OAAO,eAAeiQ,mBAAf,CAAmCC,KAAnC,EAA0ClN,SAA1C,EAAqDwD,QAArD,EAA+D2J,UAA/D,EAA2E1J,GAA3E,EAAgFL,QAAhF,EAA0FgK,oBAA1F,EAAgHC,WAAhH,EAA6HC,MAA7H,EAAqIC,QAArI,EAA+IC,QAA/I,EAAyJ9J,oBAAzJ,EAA+KC,cAA/K,EAA+L8J,YAA/L,EAA6MC,WAA7M,EAA0NC,QAA1N,EAAoO1B,KAApO,EAA4O3O,OAA5O,EAAqPsP,SAArP,EAA+PvK,SAA/P,EAAyQuL,MAAzQ,EAAgRlC,OAAhR,EAAyR;AAC5R,MAAGvP,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,iFAA+EyQ,KAA/E,GAAqF,mBAArF,GAAyGlN,SAAzG,GAAmH,mBAAnH,GAAuIwD,QAAvI,GAAgJ,oBAAhJ,GAAqK2J,UAArK,GAAgL,cAAhL,GAA+L1J,GAA/L,GAAmM,kBAAnM,GAAsNL,QAAtN,GAA+N,+BAA/N,GAA+PgK,oBAA/P,GAAoR,qBAApR,GAA0SC,WAA1S,GAAsT,iBAAtT,GAAwUC,MAAxU,GAA+U,kBAA/U,GAAkWC,QAAlW,GAA2W,mBAA3W,GAA+XC,QAA/X,GAAwY,8BAAxY,GAAua9J,oBAAva,GAA4b,yBAA5b,GAAsdC,cAAtd,GAAqe,sBAAre,GAA4f8J,YAA5f,GAAygB,sBAAzgB,GAAgiBC,WAAhiB,GAA4iB,kBAA5iB,GAA+jBC,QAA/jB,GAAwkB,gBAAxkB,GAAylB1B,KAAzlB,GAA+lB,iBAA/lB,GAAinB3O,OAAjnB,GAAynB,oBAAznB,GAA8oBsP,SAA9oB,GAAwpB,oBAAxpB,GAA6qBvK,SAA7qB,GAAurB,iBAAvrB,GAAysBuL,MAAzsB,GAAgtB,iBAAhtB,GAAkuBlC,OAAluB,GAA0uB,OAAzwB;AACA,QAAG,CAACtP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC4R,UAAjB,EAA4B;AACvCjR,MAAAA,MAAM,EAAE,MAD+B;AAEvCgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8B;AAKvChB,MAAAA,IAAI,EAAEU;AALiC,KAA5B,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAGD,OAAO,eAAe8Q,gBAAf,CAAgCC,cAAhC,EAAgDC,UAAhD,EAA4DC,QAA5D,EAAsEC,SAAtE,EAAiF7M,OAAjF,EAA0F8M,OAA1F,EAAmGP,MAAnG,EAA2GQ,UAA3G,EAAuH7P,QAAvH,EAAgI8P,OAAhI,EAAyI3C,OAAzI,EAAkJ;AACrJ,MAAGvP,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mFAAiFsR,cAAjF,GAAgG,qBAAhG,GAAsHC,UAAtH,GAAiI,mBAAjI,GAAqJC,QAArJ,GAA8J,oBAA9J,GAAmLC,SAAnL,GAA6L,kBAA7L,GAAgN7M,OAAhN,GAAwN,kBAAxN,GAA2O8M,OAA3O,GAAmP,iBAAnP,GAAqQP,MAArQ,GAA4Q,qBAA5Q,GAAkSQ,UAAlS,GAA6S,mBAA7S,GAAiU7P,QAAjU,GAA0U,kBAA1U,GAA6V8P,OAA7V,GAAqW,iBAArW,GAAuX3C,OAAvX,GAA+X,QAA9Z;AACA,QAAG,CAACtP,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC4R,UAAjB,EAA4B;AACvCjR,MAAAA,MAAM,EAAE,MAD+B;AAEvCgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8B;AAKvChB,MAAAA,IAAI,EAAEU;AALiC,KAA5B,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH,C,CAID;;AACA,OAAO,eAAesR,aAAf,GAA+B;AAClC,MAAGnS,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,mEAA/B;AACA,QAAG,CAACL,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC4R,UAAjB,EAA4B;AACvCjR,MAAAA,MAAM,EAAE,MAD+B;AAEvCgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8B;AAKvChB,MAAAA,IAAI,EAAEU;AALiC,KAA5B,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH;AAID,OAAO,eAAeuR,gBAAf,CAAgCC,KAAhC,EAAuC;AAC1C,MAAGrS,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,oFAAkF+R,KAAlF,GAAwF,SAAvH;AACA,QAAG,CAACpS,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC4R,UAAjB,EAA4B;AACvCjR,MAAAA,MAAM,EAAE,MAD+B;AAEvCgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8B;AAKvChB,MAAAA,IAAI,EAAEU;AALiC,KAA5B,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH,C,CAED;;AACA,OAAO,eAAeyR,8BAAf,CAA8ClQ,QAA9C,EAAwD;AAC3D,MAAGpC,cAAc,EAAjB,EAAoB;AACpB,QAAIoB,eAAe,GAAG,IAAIf,QAAJ,EAAtB;AACAe,IAAAA,eAAe,CAACd,MAAhB,CAAuB,MAAvB,EAA+B,qFAAmF8B,QAAnF,GAA4F,OAA3H;AACA,QAAG,CAACnC,YAAY,EAAhB,EACI,MAAMC,eAAe,EAArB;AACL,WAAQK,KAAK,CAACT,eAAe,CAAC4R,UAAjB,EAA4B;AACvCjR,MAAAA,MAAM,EAAE,MAD+B;AAEvCgB,MAAAA,OAAO,EAAE;AACN,yBAAiB,YAAU1B,WAAW,CAAC2B;AADjC,OAF8B;AAKvChB,MAAAA,IAAI,EAAEU;AALiC,KAA5B,CAAL,CAMHT,IANG,CAMEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANd,CAAR;AAOE;;AACD,SAAO,IAAP;AACH","sourcesContent":["import { serviceEndPoint } from './../util/serviceEndPoint';\r\nimport UserContext from './../components/GolbalContext'\r\nimport {isSessionValid, isTokenValid} from './../util/session.js';\r\nimport { regenerateToken } from './validation';\r\n\r\n\r\nexport async function fetchMasterSalutation() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.salutationServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchAllCenter() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchMasterGenderDetails() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findall\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.genderServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchPincodeData(pincode) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":' + pincode + '}]}');\r\n    return fetch(serviceEndPoint.cityVillageServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function businessCaseSaveOrUpdate(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : ' + data + '}');\r\n   return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchBusinessCaseMetaData(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchBusinessCaseQuestions() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : []}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.businessCaseBriefMdmService, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchUserDocuments(engagementId,documentType,typeOfDocument) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"engagementId\":'+engagementId+',\"documentType\":\"'+documentType+'\",\"typeOfDocument\":\"'+typeOfDocument+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchBatchDetails(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatches\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\nexport async function fetchBatchDetailsForBatchOwner(batchOwner,centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getActiveBatchesForBatchOwner\", \"data\" : [{\"domainFacilitator\":'+batchOwner+',\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\n\r\nexport async function fetcRoleDetails() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchAll\", \"data\" : []}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.roleServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\nexport async function passwordReset(dbUserId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"passwordReset\", \"data\" : [{\"id\":'+dbUserId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;    \r\n}\r\n\r\n\r\nexport async function enrollStudent(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltobatch\", \"data\" : [{'+data+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    },\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\nexport async function changeStudentStatus(data) {\r\n    if(isSessionValid()){\r\n    try{\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStatus\", \"data\" : [{'+data+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    catch(e)\r\n    {\r\n        console.log(e);\r\n    }\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fectEnrollmentDetails(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetails\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function fectUserDetails(userId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\nexport async function fectUserNameFromId(userId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + userId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json()).then((jsondata)=>{\r\n\r\n        let jsonobjects = JSON.parse(jsondata.data);\r\n        alert(jsonobjects[0].firstName);\r\n        return jsonobjects[0].firstName;\r\n           \r\n         });\r\n        }\r\n        return null;     \r\n}\r\n\r\nexport async function fectUserRoleDetails(roleId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : [{\"id\":\"'+roleId+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.roleServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function fectAddressDetails(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllAddressForEntity\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"U\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n\r\n   return  fetch(serviceEndPoint.addressServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n// address for placement\r\nexport async function fectAddressDetailsByAddressID(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAddressById\", \"data\" : [{\"id\" : ' + id + ' }]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n\r\n   return  fetch(serviceEndPoint.addressServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchAllStateDetails() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.stateServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function changePassword(userId,newPassword) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"changePassword\" +'\", \"data\" : [{\"id\" : ' + userId + ',\"password\" : \"' +newPassword + '\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\nexport async function fetchAddressDetailsBasedOnPincode(pincode) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findpincode\", \"data\" : [{\"pincode\":'+pincode+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.cityVillageServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;    \r\n}\r\n\r\nexport async function saveUserDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveUserDetails\", \"data\" : ['+data+']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\nexport async function saveAddressDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAddress\", \"data\" : ['+data+']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.addressServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function sendResetPasswordLink(userName) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"resetPassword\", \"data\" : [{\"userName\":\"'+userName+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchUsersByCenterId(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterId\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchUserDetailsById(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchUserDetailsById\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchUserDetails(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchUserDetails\", \"data\" : [{\"id\" : ' + id + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\n\r\nexport async function mapUserToRole(userId,centerId,roleId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"saveUserCenterRoleMapDetails\", \"data\" : [{\"userId\":'+userId+',\"centerId\":'+centerId+',\"roleId\":'+roleId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\nexport async function fetchEnrollmentDetailsByBatchId(batchId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchEnrollmentDetailsByBatchId\", \"data\" : [{\"batchId\":'+batchId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;    \r\n}\r\nexport async function fetchAllStudentDataByEngagementId(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchAllStudentDataByEngagementId\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\nexport async function captureStudentEngagementDetails(dbUserId,centerId,userid) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\r\n    \r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\nexport async function captureStudentEngagementDetailsB(dbUserId,centerId,userid,engId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"captureStudentEngagement\", \"data\" :[{\"dbUserId\"  : ' + dbUserId + ' , \"centerId\" : ' + centerId + ', \"createdBy\" : ' + userid + ',\"linkedEngagementId\" : ' + engId + ', \"remarks\" : \"\",\"status\" : \"mobilised\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\nexport async function isCurrentPasswordValid(userName,currentPassword) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"isCurrentPasswordValid\", \"data\" :[{\"userName\"  : \"' + userName + '\" , \"password\":\"'+currentPassword+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;  \r\n}\r\n\r\n\r\n\r\nexport async function fetchBatchDetailsByBatchId(batchId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"getBatchDetailsByBatchId\", \"data\" :[{\"batchId\"  : \"' + batchId + '\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function BusinessIdeaEvaluationSaveOrUpdate(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n   requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveBusinessIdeaEvaluationDetails\", \"data\" : ' + data + '}');\r\n   if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function FetchFinalScoreForBusinessIdea(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n   requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculateFinalScore\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n   if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchBusinessIdeaEvaluationData(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getBusinessIdeaEvaluationDetails\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.businessCaseEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchCourseDetails() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.courseServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function saveInterestInventoryCode(engagementId,finalScore,createdBy) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureInterestInventory\", \"data\" : [{\"engagementId\":' + engagementId + ',\"finalScore\":\"' + finalScore + '\",\"createdBy\":'+createdBy+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchInterestInventoryCode(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewInterestInventoryByEngId\", \"data\" : [{\"engagementId\":' + engagementId + '}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchCentersOfUser(id) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllUserScopes\", \"data\" : [{\"userId\":'+UserContext.userid+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.userProfileServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchCentersDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcenter\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchRoleDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRoleDetails\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.roleServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function setDefaultSettings(userId,roleMapId,centerId,programId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"setDefaultSettings\", \"data\" : [{\"userId\":'+userId+',\"roleMapId\":'+roleMapId+',\"centerId\":'+centerId+',\"programId\":'+programId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.userProfileServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n// export async function saveEducationDetails(data){\r\n//     if(isSessionValid()){\r\n//         let formData = new FormData();\r\n//         formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"captureAllEducation\" +'\", \"data\" : ' + JSON.stringify(this.state.rows) + '}');\r\n//         return fetch(serviceEndPoint.educationServiceEndPoint, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           'Authorization': 'Bearer '+Cookies.get('token')\r\n//       },  \r\n//         body: formData  \r\n//         }).then(response => response.json());\r\n//     }\r\n//     return null;\r\n//     }\r\n   \r\n\r\n\r\nexport async function saveCounsellingDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"save\", \"data\" : ['+data+']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.counsellingServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCounsellingDetails(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"get\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.counsellingServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCoursesByHollandCode(hollandCode) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByHollandCode\", \"data\" : [{\"hollandcode\":\"'+hollandCode+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.interestinventoryServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function findByAadharNo(aadharNo) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"isAadharNoDuplicate\", \"data\" : [{\"aadharNo\":\"'+aadharNo+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function searchByAadharNo(aadharNo) {\r\n  if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByAadharNumber\", \"data\" : [{\"aadharNo\":\"'+aadharNo+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId(firstName,lastName,dob,primaryContactNumber,primaryEmailId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"searchByFirstNameAndLastNameAnddobAndPrimaryContactNumberAndPrimaryEmailId\", \"data\" : [{\"firstName\":\"'+firstName+'\",\"lastName\":\"'+lastName+'\",\"dob\":\"'+dob+'\",\"primaryContactNumber\":\"'+primaryContactNumber+'\",\"primaryEmailId\":\"'+primaryEmailId+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchStudentDetailsByEngagementId(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewStudentEngagementById\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return fetch(serviceEndPoint.engagementServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchNotCompletedBatchDetails(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getNotCompletedBatches\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\n\r\nexport async function login(token,action,email,password) {\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"'+token+'\", \"action\" : \"'+action+'\", \"data\" : [{\"userName\":\"'+email+'\",\"password\":\"'+password+'\"}]}');\r\n    return  fetch(serviceEndPoint.loginService,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json()); \r\n}\r\n\r\n\r\n\r\nexport async function fetchUserScope(userid) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getUserScope\", \"data\" : [{\"userId\":\"'+userid+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json()); \r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchBasicData(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewBeneficiaryDetailsById\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },    \r\n          body: formData \r\n          }).\r\n          then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\nexport async function fetchAddressData(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData2 = new FormData();\r\n          formData2.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllAddressForEntity\" +'\", \"data\" : [{\"entityId\" : ' + id + ' , \"entityType\" : \"S\"}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.addressServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData2 \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function subMitBasicData(action , data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : [' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.studentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      },  \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function submitAddressData(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n       formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : [' + JSON.stringify(data) + ']}');\r\n       if(!isTokenValid()) \r\n        await regenerateToken();\r\n         return fetch(serviceEndPoint.addressServiceEndPoint, {\r\n         method: \"POST\",\r\n         headers: {\r\n           'Authorization': 'Bearer '+UserContext.token\r\n       },  \r\n         body: formData \r\n         }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function submitEducationData(action,data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : ' + JSON.stringify(data) + '}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.educationServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      },  \r\n        body: formData  \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchEducationData(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n         formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllEducationForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n         if(!isTokenValid()) \r\n        await regenerateToken();\r\n         return fetch(serviceEndPoint.educationServiceEndPoint, {\r\n         method: \"POST\",\r\n         headers: {\r\n           'Authorization': 'Bearer '+UserContext.token\r\n       }, \r\n         body: formData \r\n         }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function saveBatchDetails(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" :[' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.batchDetailsServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      }, \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function saveObservationDetails(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : ' + JSON.stringify(data) + '}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.observationServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      }, \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchObservationdetails(engagementId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllObservationsForUser\" +'\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.observationServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchFamilydetails(dbUserId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllFamilyDetailsForUser\" +'\", \"data\" : [{\"dbUserId\":'+dbUserId+'}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function saveFamilyDetails(action, data)\r\n{if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : ' + JSON.stringify(data) + '}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Authorization': 'Bearer '+UserContext.token\r\n      }, \r\n        body: formData \r\n        }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\nexport async function fetchFamilyDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllFamilyDetailsForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchPlacementDetailsByEngagementId(engagementId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewPlacementDetailsByEngagementId\" +'\",  \"data\" : [{\"engagementId\" : ' + engagementId + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.placementServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\nexport async function fetchExperienceDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllExperienceForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.experienceServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n//Socio Details added ashish\r\nexport async function saveSocioDetails(action, data)\r\n{\r\n   \r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" :[ ' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function saveExpDetails(action, data)\r\n{\r\n   \r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" :[ ' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.experienceServiceEndPoint, {\r\n method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function savePlacementDetails(data)\r\n{\r\n   \r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"save\" , \"data\" :[ ' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.placementServiceEndPoint, {\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n//ashish new screen family\r\nexport async function saveFamilyDetailsNew(action, data)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  action +'\", \"data\" : [' + JSON.stringify(data) + ']}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.familyServiceEndPoint, {\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: formData \r\n     }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchExpDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n     let formData = new FormData();\r\n     formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewAllExperienceForUser\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n     if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.experienceServiceEndPoint, {\r\n       method: \"POST\",\r\n       headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n       body: formData \r\n       }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n//ashish socio economic\r\nexport async function fetchSocioDetails(id)\r\n{\r\n    if(isSessionValid()){\r\n     let formData = new FormData();\r\n     formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"viewSocioEconomicById\" +'\", \"data\" : [{\"dbUserId\" : ' + id + '}]}');\r\n     if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.socioeconomicServiceEndPoint, {\r\n       method: \"POST\",\r\n       headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n       body: formData \r\n       }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchEvaluationData(eng)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"viewByEngagementId\", \"data\" : [{ \"engagementId\" : ' + eng + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n         return fetch(serviceEndPoint.evaluationServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchKnackScore(id)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"get\", \"data\" : [{ \"engagementId\" : ' + id + '}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.knackServiceEndPoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\nexport async function saveEvaluationData(data)\r\n{if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"captureAllEvaluationDetails\" +'\", \"data\" : ' + JSON.stringify(data) + ' }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.evaluationServiceEndPoint, {\r\n    method: \"POST\",\r\n    headers: {\r\n      'Authorization': 'Bearer '+UserContext.token\r\n  }, \r\n    body: formData \r\n    }).then(response => response.json())\r\n}\r\nreturn null;\r\n\r\n}\r\n\r\n\r\nexport async function fetchStudentDataForList(role)\r\n{if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    if ( role===3){\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenterAndMultipleStatus\", \"data\" : [{\"centerId\":'+UserContext.centerId+'}]}');\r\n    }\r\n    else{\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllByCenter\", \"data\" : [{\"centerId\":'+UserContext.centerId+'}]}');\r\n    }\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n        return fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n            method: \"POST\",\r\n            headers: {\r\n              'Authorization': 'Bearer '+UserContext.token\r\n          },\r\n            body: requestFormData,\r\n            }).then(response => response.json())\r\n      \r\n       \r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function calculatePercentile()\r\n{\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"calculatePercentile\", \"data\" : [{\"createdBy\":'+UserContext.userid+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.evaluationServiceEndPoint,{\r\n  method: \"POST\",\r\n  headers: {\r\n    'Authorization': 'Bearer '+UserContext.token\r\n}, \r\n  body: requestFormData,\r\n  }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function findNumberOfBeneficiaryInCenterByStatus(centerId,studentEngagementStatus) {\r\n    if(isSessionValid()){\r\n      let requestFormData = new FormData();\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"NumberOfBeneficiaryInCenterByStatus\", \"data\" : [{\"centerId\":\"'+centerId+'\",\"studentEngagementStatus\":\"'+studentEngagementStatus+'\"}]}');\r\n      if(!isTokenValid()) \r\n          await regenerateToken();\r\n      return fetch(serviceEndPoint.dashboardService, {\r\n          method: \"POST\",\r\n          body: requestFormData\r\n      }).then(response => response.json());\r\n  }\r\n  return null;\r\n  }\r\n\r\n\r\n\r\n  export async function fetchQualificationDetails() {\r\n    if(isSessionValid()){\r\n      let requestFormData = new FormData();\r\n      requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n      if(!isTokenValid()) \r\n          await regenerateToken();\r\n      return fetch(serviceEndPoint.qualificationServiceEndPoint, {\r\n          method: \"POST\",\r\n          body: requestFormData\r\n      }).then(response => response.json());\r\n  }\r\n  return null;\r\n  }\r\n\r\n\r\n  export async function fetchUserDocumentsByEngagementId(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementId\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchUserDocumentsByEngagementIdAndTypeOfDocument(engagementId,typeOfDocument) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchDocumentDetailsByEngagementIdAndDocumentType\", \"data\" : [{\"engagementId\":'+engagementId+',\"typeOfDocument\":\"'+typeOfDocument+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n  \r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchUserDocumentsByUserIdAndTypeOfDocument(dbUserId,typeOfDocument) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getDocumentDetailsByUserIdAndDocumentType\", \"data\" : [{\"dbUserId\":'+dbUserId+',\"typeOfDocument\":\"'+typeOfDocument+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function deleteDocumentById(basicDocId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"deleteDocument\", \"data\" : [{\"basicDocId\":'+basicDocId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function fetchCenterCapacity() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerCapacity, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\n\r\nexport async function fetchBusinessIdeaEvaluationQuestions() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findall\", \"data\" : [{}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.businessIdeaEvaluation, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function findAllObservationdetails()\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"findall\" +'\", \"data\" : [{}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.masterObservation, {\r\n          method: \"POST\",\r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCenterActiveCourses(centerId)\r\n{\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n          formData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"'+  \"getActiveCourse\" +'\", \"data\" : [{\"centerId\" :'+centerId+'}]}');\r\n          if(!isTokenValid()) \r\n        await regenerateToken();\r\n          return fetch(serviceEndPoint.centerService, {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n          body: formData \r\n          }).then(response => response.json())\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchCourseDetailsByIds(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findcourse\", \"data\" :'+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.courseServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function uploadDocument(dbUserId,engagementId,documentType,typeOfDocument,documentName,document,documentNumber) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"captureDocDetails\", \"data\" : [{\"dbUserId\":'+dbUserId+',\"engagementId\":'+engagementId+',\"documentType\":\"'+documentType+'\",\"typeOfDocument\":\"'+typeOfDocument+'\",\"documentName\":\"'+documentName+'\",\"base64File\":\"'+document+'\",\"documentNo\":\"'+documentNumber+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.documentServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchMasterExistingBusiness() {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchAll\" , \"data\" : [{}]}');\r\n    return fetch(serviceEndPoint.mdmExistingBusiness, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function saveExistingBusiness(data) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"saveExistingBusinessDetails\" , \"data\" : '+data+'}');\r\n    \r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.existingBusiness, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },\r\n        body: formData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchExistingBusinessDetails(engagementId) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"fetchExistingBusinessDetails\" , \"data\" :[{\"engagementId\":'+engagementId+'}]}');\r\n    \r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return fetch(serviceEndPoint.existingBusiness, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        },\r\n        body: formData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchCenterCapacityByIds(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCapacityByCenter\", \"data\" :'+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerCapacity, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchAllStudentEngagementForUser(dbUserId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewAllStudentEngagementForUser\", \"data\" :[{\"dbUserId\":'+dbUserId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.engagementServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fectEnrollmentDetailsByIds(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchEnrollmentDetailsByEngagementId\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n    return  fetch(serviceEndPoint.enrollmentServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchCenterProgramMapping(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCenterProgramMapping\", \"data\" :[{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.centerProgramMapping, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchProgram(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findprogram\", \"data\" :'+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.programservice, {\r\n        method: \"POST\",\r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchComponentsByProgramIdAndRoleId(programId,roleId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"fetchByProgramIdAndRoleId\", \"data\" :[{\"programId\":'+programId+',\"roleId\":'+roleId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.programrolecomponentmapping, {\r\n        method: \"POST\",\r\n         headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n        body: requestFormData,\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function fetchUsersByCenterIdAndRoleMapId(centerId,roleMapId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findUsersByCenterIdAndRoleMapId\", \"data\" : [{\"centerId\":'+centerId+',\"roleMapId\":'+roleMapId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.userProfileServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function fetchEmployerDetails(accountStatus,typeOfRelationship) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"findByAccountStatusAndTypeOfRelationshipLike\" , \"data\" : [{\"accountStatus\":\"'+accountStatus+'\",\"typeOfRelationship\":\"'+typeOfRelationship+'\"}]}');\r\n    return fetch(serviceEndPoint.employerservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function getReports(pageNumber,pageSize,centerId,startDate,endDate,studentEngagementStatus,batchId) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"viewData\" , \"data\" : [{\"pageNumber\":\"'+pageNumber+'\",\"pageSize\":\"'+pageSize+'\",\"centerId\":\"'+centerId+'\",\"startDate\":\"'+startDate+'\",\"endDate\":\"'+endDate+'\",\"studentEngagementStatus\":\"'+studentEngagementStatus+'\",\"batchId\":'+batchId+'}]}');\r\n    return fetch(serviceEndPoint.reportservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function downloadReports(pageNumber,pageSize,centerId,startDate,endDate,studentEngagementStatus,batchId) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"' + \"1234\" + '\", \"action\" : \"downloadExcel\" , \"data\" : [{\"pageNumber\":\"'+pageNumber+'\",\"pageSize\":\"'+pageSize+'\",\"centerId\":\"'+centerId+'\",\"startDate\":\"'+startDate+'\",\"endDate\":\"'+endDate+'\",\"studentEngagementStatus\":\"'+studentEngagementStatus+'\",\"batchId\":'+batchId+'}]}');\r\n    return fetch(serviceEndPoint.reportservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\nexport async function fetchStudentDropoutDetailByEngagementId(engagementId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"viewDropout\", \"data\" : [{\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.dropoutServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function saveDropoutDetails(effortSpent,engagementId,createdBy) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();\r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveDropout\", \"data\" : [{\"effortSpent\":\"'+effortSpent+'\",\"engagementId\":\"'+engagementId+'\",\"createdBy\":\"'+createdBy+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n     return fetch(serviceEndPoint.dropoutServiceEndPoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': 'Bearer '+UserContext.token\r\n        }, \r\n        body: requestFormData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n\r\nexport async function markDropout(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"markdropout\", \"data\" : [{'+data+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    },\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\nexport async function updateReadyForDropout(engagementId,readyForDropout) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateStudentEngagementDetails\", \"data\" : [{\"readyForDropout\":\"'+readyForDropout+'\",\"engagementId\":'+engagementId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    },\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\n\r\nexport async function fetchAllStudentDataByEngagementIdAndReadyForDropout(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"fetchAllStudentDataByEngagementIdAndReadyForDropout\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return  fetch(serviceEndPoint.engagementServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\n\r\n\r\nexport async function fetchAttendanceDetailsByAttendanceDateAndBatchId(batchId,attendanceDate) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data','{\"token\" : \"'+ \"1234\" +'\", \"action\" : \"viewAttendanceByBatchIdAndAttendanceDate\", \"data\" :[{\"batchId\":'+batchId+',\"attendanceDate\":\"'+attendanceDate+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n  return  fetch(serviceEndPoint.attendanceServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;   \r\n}\r\n\r\nexport async function fetchRunningBatchDetails(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getRunningBatches\", \"data\" : [{\"centerId\":'+centerId+'}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.batchDetailsServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\nexport async function saveAttendanceDetails(data) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"updateAllAttendance\", \"data\" : '+data+'}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.attendanceServiceEndPoint,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null; \r\n}\r\n\r\n\r\nexport async function findSkillmithraByOrgId(orgId){\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgId\", \"data\" :[{ \"orgId\" : \"'+orgId+'\" }]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function getUdyogMitraAndSkillInstitute(orgType) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findSkillMithras\", \"data\" :[{\"orgType\" : \"'+ orgType +'\" }]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function findInformalCourses() {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findCoursesByType\", \"data\" : [{\"type\" : \"informal\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.courseServiceEndPoint, {\r\n            method: \"POST\",\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function saveInformalEnrollmentDetails(engagementId, batchId, courseId, updatedBy, startDate, endDate, orgId ) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"enrolltocourse\", \"data\" : [{\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.enrollmentServiceEndPoint, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n// api for module list\r\nexport async function fetchcourseModuleList(selectedYear){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getModuleNameByYear\", \"data\" :[{\"year\" : \" '+selectedYear+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// API for sub Module list in table\r\n\r\nexport async function fetchsubModuleList(moduleId,selectedYear){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data','{ \"token\" : \"\", \"action\" : \"getSubtopicNameByYearAndModuleId\", \"data\" : [{\"moduleId\": \"'+moduleId+'\", \"year\":\"'+selectedYear+'\"}]}')\r\n        \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n// API for loading table data\r\nexport async function fetchtabledata(batchId , isActive){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus\", \"data\" :[{\"batchId\" : \" '+batchId+'\", \"isActive\" : \"'+isActive+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// API for saved data if value id ic nor there\r\n\r\nexport async function saveCourseCovrageData(userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"userId\":\"'+userId+'\", \"batchId\":\"'+batchId+'\", \"isActive\":\"'+isActive+'\", \"moduleId\":\"'+moduleId+'\", \"subtopicId\":\"'+subtopicId+'\", \"createdDate\":\"'+createdDate+'\", \"remarks\":\"'+remarks+'\", \"compDate\":\"'+compDate+'\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// Api calling for data saving when value id is present\r\n\r\nexport async function saveCourseCovrageDatawithId(id,userId, batchId, isActive, subtopicId, moduleId, createdDate, remarks, compDate) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        // {\"engagementId\":\"'+engagementId+'\",\"batchId\":\"'+batchId+'\",\"courseId\":\"'+courseId+'\",\"updatedBy\":\"'+updatedBy+'\",\"startDate\":\"'+startDate+'\" , \"endDate\":\"'+endDate+'\",\"orgId\":\"'+orgId+'\"}]}\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"SaveCourseModuleDetails\", \"data\" : [{\"id\":\"'+id+'\", \"userId\":\"'+userId+'\", \"batchId\":\"'+batchId+'\", \"isActive\":\"'+isActive+'\", \"moduleId\":\"'+moduleId+'\", \"subtopicId\":\"'+subtopicId+'\", \"createdDate\":\"'+createdDate+'\", \"remarks\":\"'+remarks+'\", \"compDate\":\"'+compDate+'\"}]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// API call for submodule list\r\n\r\nexport async function fetchSubModulename(batchId, isActive){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"GetCourseModuleDetailsByBatchIdAndIsActiveStatus \" , \"data\" :[{\"batchId\":\"'+batchId+'\", \"isActive\" : \"'+isActive+'\"}]}')\r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method:\"post\",\r\n            header:{\r\n                'Authorization': 'Bearer ' + UserContext.token \r\n            }\r\n        }).then(response => response.json())\r\n    }\r\n    return null;\r\n}\r\n\r\n//API for loading table data for Course Coverage\r\nexport async function fetchtabledatawithModuleId(batchId, moduleId, isActive){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findByBatchIdAndModuleIdAndIsActive\", \"data\" :[{\"batchId\" : \"'+batchId+'\", \"moduleId\": \"'+moduleId+'\",\"isActive\" : \"'+isActive+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.coursecoveragetracker,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// fetching Centers By State Name\r\n\r\nexport async function fetchCenterByStateName(state) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"\", \"action\" : \"findallCenterbyState\" , \"data\" : [{\"state\" : \"'+state+'\"}]}');    \r\n    return fetch(serviceEndPoint.centerServiceEndPoint, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n// ============ Api for Funder Mapping\r\n\r\n\r\nexport async function getBatchDetailsByBatchId(batchId, isActive, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"'+batchId+'\", \"isActive\":\"'+isActive+'\", \"fundingType\":\"'+fundingType+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function getBatchDetailsByFunderId(funderId, isActive, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"funderId\" :\"'+funderId+'\", \"isActive\":\"'+isActive+'\", \"fundingType\":\"'+fundingType+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function getBatchDetailsByBatchIdandFunderId(batchId, funderId, isActive, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"getFunderMappingByBatchIdAndFunderIdAndIsActiveStatusAndFundingType\", \"data\" :[{\"batchId\" :\"'+batchId+'\", \"funderId\" :\"'+funderId+'\", \"isActive\":\"'+isActive+'\", \"fundingType\":\"'+fundingType+'\"}]}');\r\n \r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n// Fetching baised on Zone\r\nexport async function fetchStateByZone(zone) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"findstatebyzone\", \"data\" : [{\"zone\":\"'+zone+'\"}]}');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.stateServiceEndPoint,{\r\n     method: \"POST\",\r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function saveBatchFunderDetails(batchId, funderId, crmFunderId, isActive, fundingType, createdBy, createdOn, remarks){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveFunderMappingDetails\", \"data\" :[{\"batchId\": '+batchId+', \"funderId\": '+funderId+', \"crmFunderId\": \"'+crmFunderId+'\", \"isActive\": \"'+isActive+'\", \"fundingType\": \"'+fundingType+'\", \"createdBy\": '+createdBy+', \"createdOn\": \"'+createdOn+'\", \"remarks\": \"'+remarks+'\"}]}');\r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function updateBatchFunderDetails(id, batchId, funderId, crmFunderId, isActive, remarks, updatedOn, updatedBy, fundingType){\r\n    if(isSessionValid()){\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"UpdateExistingFunderMapping\", \"data\" :[{\"id\": '+id+', \"batchId\": '+batchId+', \"funderId\": '+funderId+',  \"crmFunderId\": \"'+crmFunderId+'\", \"isActive\": \"'+isActive+'\", \"fundingType\": \"'+fundingType+'\", \"updatedBy\": '+updatedBy+', \"updatedOn\": \"'+updatedOn+'\", \"remarks\": \"'+remarks+'\"}]}');\r\n        if(!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.fundermapping,{\r\n            method : \"POST\",\r\n            headers:{\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body : requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function getStudentStrengthByCenterIdAndStudentEngagementStatus( centerId, studentEngagementStatus) {\r\n    if(isSessionValid()){\r\n    let formData = new FormData();\r\n    formData.append('data','{\"token\" : \"1234\", \"action\" : \"viewStrengthByEngagementStatus\" , \"data\" : [{ \"centerId\": \"'+centerId+'\", \"studentEngagementStatus\": \"'+studentEngagementStatus+'\" }]}');\r\n    return fetch(serviceEndPoint.reportservice, {\r\n        method: \"POST\",\r\n        body: formData\r\n    }).then(response => response.json());\r\n}\r\nreturn null;\r\n}\r\n\r\n// Informal sector\r\n\r\n// {\"token\" : \"\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\", \"data\" :[{\"orgType\" : \"udhyogmithra\",\"programId\":5}]}\r\n\r\nexport async function fetchSkillMithraByIdAndProgramId(orgType,programId) {\r\n    if (isSessionValid()) {\r\n        let requestFormData = new FormData();\r\n        requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"findSkillMithrasByOrgIdAndProgramId\" , \"data\" : [{ \"orgType\": \"'+orgType+'\", \"programId\": \"'+programId+'\" }]}');\r\n        if (!isTokenValid())\r\n            await regenerateToken();\r\n        return fetch(serviceEndPoint.udyogmitraandskillinstitute, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': 'Bearer ' + UserContext.token\r\n            },\r\n            body: requestFormData,\r\n        }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// Buil upload\r\n\r\nexport async function saveBulkStudentData(RegId, firstName, lastName, middleName, dob, aadharNo, highestQualification, passingYear, gender, religion, category, primaryContactNumber, primaryEmailId, addressLine1, villageName, district, state , pincode, createdOn,createdBy,status,remarks) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"1234\", \"action\" : \"saveStudentDataBulk\", \"data\" : [{ \"regId\" : \"'+RegId+'\", \"firstName\": \"'+firstName+'\", \"lastName\" : \"'+lastName+'\", \"middleName\": \"'+middleName+'\", \"dob\" : \"'+dob+'\", \"aadharNo\": \"'+aadharNo+'\", \"highestQualification\" : \"'+highestQualification+'\", \"passingYear\": \"'+passingYear+'\", \"gender\" : \"'+gender+'\", \"religion\": \"'+religion+'\", \"category\" : \"'+category+'\", \"primaryContactNumber\": \"'+primaryContactNumber+'\", \"primaryEmailId\" : \"'+primaryEmailId+'\", \"addressLine1\": \"'+addressLine1+'\", \"villageName\" : \"'+villageName+'\", \"district\": \"'+district+'\", \"state\" : \"'+state+'\", \"pincode\": \"'+pincode+'\",  \"createdOn\": \"'+createdOn+'\", \"createdBy\" : \"'+createdBy+'\", \"status\" : \"'+status+'\",\"remarks\" : \"'+remarks+'\"}] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport async function saveBulkMetaData(uploadFileName, uploadDate, activity, batchName, batchId, records, status, centerName, centerId,modelId, remarks) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"saveMetaDataBulk\", \"data\" : [{ \"uploadFileName\" : \"'+uploadFileName+'\", \"uploadDate\" : \"'+uploadDate+'\", \"activity\" : \"'+activity+'\", \"batchName\" : \"'+batchName+'\", \"batchId\" : \"'+batchId+'\", \"records\" : \"'+records+'\", \"status\" : \"'+status+'\", \"centerName\" : \"'+centerName+'\", \"centerId\" : \"'+centerId+'\",\"model_id\" : \"'+modelId+'\",\"remarks\" : \"'+remarks+'\" }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\n// Get Bulk data for History page\r\nexport async function fetchBulkData() {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getAllMetaDataBulk\", \"data\" : [{  }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nexport async function fetchStudentFile(regId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getStudentDataByRegIdBulk\", \"data\" : [{  \"regId\" : \"'+regId+'\"  }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n\r\n// show baised on center id in upload meta data table\r\nexport async function fetchBulkAllMetaDataByCenterId(centerId) {\r\n    if(isSessionValid()){\r\n    let requestFormData = new FormData();  \r\n    requestFormData.append('data', '{\"token\" : \"\", \"action\" : \"getMetaDataByCenterIdBulk\", \"data\" : [{ \"centerId\" : '+centerId+' }] }');\r\n    if(!isTokenValid()) \r\n        await regenerateToken();\r\n   return  fetch(serviceEndPoint.bulkupload,{\r\n     method: \"POST\",\r\n     headers: {\r\n        'Authorization': 'Bearer '+UserContext.token\r\n    }, \r\n     body: requestFormData,\r\n     }).then(response => response.json());\r\n    }\r\n    return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}