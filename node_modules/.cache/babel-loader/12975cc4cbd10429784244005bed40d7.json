{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\BulkUpload.js\";\nimport React from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport UserContext from '../components/GolbalContext';\nimport { fetchNotCompletedBatchDetails } from '../util/api';\nlet today = new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\nlet yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd;\nexport default function (props) {\n  const option = [{\n    value: 1,\n    label: \"Mobilization\"\n  }, {\n    value: 2,\n    label: \"Enrollment\"\n  }];\n  const [dbUserId, setdbUserId] = useState(0);\n  const [engagementId, setengagementId] = useState(0);\n\n  if (props.id != null && props.id != undefined) {\n    setdbUserId = props.id;\n    setengagementId = props.engagementId;\n  }\n\n  const [batches, setbatches] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [selectedBatches, setselectedBatches] = useState(\"\");\n  const [items, setItems] = useState([]); // // Reading excel file\n  // const readExcel = (file) => {\n  // const promise = new Promise((resolve, reject) => {\n  //   const fileReader = new FileReader();\n  //   fileReader.readAsArrayBuffer(file);\n  //   fileReader.onload = (e) => {\n  //     const bufferArray = e.target.result;\n  //     const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n  //     const wsname = wb.SheetNames[0];\n  //     const ws = wb.Sheets[wsname];\n  //     const data = XLSX.utils.sheet_to_json(ws);\n  //     resolve(data);\n  //   };\n  //   fileReader.onerror = (error) => {\n  //     reject(error);\n  //   };\n  // });\n  // promise.then((d) => {\n  //   console.log(d)\n  //   setItems(d);\n  // });\n  // };\n\n  const [error, setserros] = useState(\"\"); // For handling the dropdown\n\n  const handleChange = e => {\n    setSelectedOption(e);\n    setselectedBatches(\"\");\n\n    if (e == 2 || e === \"Enrollment\") {\n      fetchNotCompletedBatchDetails(UserContext.centerId).then(jsondata => {\n        let result = JSON.parse(jsondata.data); // console.log(result)\n        // console.log(result[0].freezeDate)\n        // setbatches([])\n\n        result.forEach(element => {\n          console.log(\"Condition for date \", element.freezeDate > today);\n\n          if (element.freezeDate > today) {\n            batches.push({\n              \"value\": element.batchId,\n              \"label\": element.batchName\n            });\n          }\n        });\n        console.log(batches);\n      });\n    }\n  }; // for handling batches changes\n\n\n  const batchesChanges = e => {\n    setselectedBatches(e);\n    console.log(\"Batchec : \", e); // console.log(UserContext.)\n\n    console.log(setengagementId.label); // console.log(selectedBatches.e)\n  }; // handlingError((e)=>{\n  //   if(setSelectedOption===\"\"){\n  //     setserros=\"Plase select Some option\"\n  //   }\n  // })\n  // Handler for file upload\n\n\n  const onFileChangeHandler = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        const wb = XLSX.read(bufferArray, {\n          type: \"buffer\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(d => {\n      console.log(\"File data: \", d);\n      setItems(d);\n    });\n    setItems(file);\n    console.log(\"File name:\", file);\n  }; // Upload document\n\n\n  const uploadDocuments = e => {\n    e.preventDefault();\n    items.map(function (setItems) {\n      // uploadDocument(setItems);\n      {\n        uploadDocument(setItems);\n      }\n      console.log(\"file data : \", setItems);\n    }); //   this.setState({documentNumber:''});\n    //   this.setState({clearDropzoneArea: this.state.clearDropzoneArea + 1});\n    //  // this.setState({typeOfDocument:null});\n    //   this.setState({ documentType:[]});\n  }; // Uploading the file in s3 buckket\n\n\n  const uploadDocument = setItems => {\n    //   e.preventDefault();\n    // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\n    var levelOfDocument = \"G\"; // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\n\n    let localThis = this;\n    let reader = new FileReader();\n    reader.readAsDataURL(setItems);\n\n    reader.onload = function () {\n      let document = reader.result;\n      console.log(document); //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\n      //  .then((jsondata) => {\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\n      //        localThis.setState({alertDialogFlag:true});\n      //        localThis.getDocuments();\n      //     })\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, \"Options\"), /*#__PURE__*/React.createElement(SingleSelect, {\n    name: \"\",\n    id: \"\" // key={this.state.Selectedstate || ''}\n    ,\n    options: option,\n    value: selectedOption,\n    onChange: handleChange // error={handlingError}\n    // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, \"Batches\"), /*#__PURE__*/React.createElement(SingleSelect // key={this.state.Selectedstate || ''}\n  , {\n    name: \"batchname\",\n    id: \"batchId\",\n    options: batches,\n    value: selectedBatches,\n    onChange: batchesChanges // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropzoneArea, {\n    name: \"upload-photo\",\n    type: \"file\",\n    onChange: e => {\n      const file = e.target.files[0];\n      readExcel(file);\n    },\n    maxFileSize: 10000000,\n    filesLimit: 1,\n    showFileNames: true,\n    onChange: onFileChangeHandler() // key={this.state.clearDropzoneArea\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, \"Note-: Document size should not be greater than 10mb.\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 20\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: uploadDocuments,\n    method: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"small\" // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, \"Upload Document\"))));\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/BulkUpload.js"],"names":["React","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","UserContext","fetchNotCompletedBatchDetails","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","props","option","value","dbUserId","setdbUserId","engagementId","setengagementId","id","undefined","batches","setbatches","selectedOption","setSelectedOption","selectedBatches","setselectedBatches","items","setItems","error","setserros","handleChange","e","centerId","then","jsondata","result","JSON","parse","data","forEach","element","console","log","freezeDate","push","batchId","batchName","batchesChanges","onFileChangeHandler","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","onerror","d","uploadDocuments","preventDefault","map","uploadDocument","levelOfDocument","localThis","reader","readAsDataURL","document","width","files","readExcel","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState } from \"react\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {DropzoneArea} from 'material-ui-dropzone';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchNotCompletedBatchDetails} from '../util/api';\r\n\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + '-' + mm + '-' + dd;\r\n\r\nexport default function(props){\r\n    const option=[{value:1, label:\"Mobilization\"},{value:2 ,label:\"Enrollment\"}]\r\n    \r\n    const [dbUserId,setdbUserId]= useState(0);\r\n    const [engagementId,setengagementId]= useState(0);\r\n    \r\n    if(props.id != null && props.id != undefined)\r\n    {\r\n      setdbUserId=props.id;\r\n      setengagementId=props.engagementId;\r\n    }\r\n    const [batches, setbatches]= useState([]);\r\n    const [selectedOption, setSelectedOption] = useState(\"\")\r\n    const [selectedBatches, setselectedBatches] = useState(\"\")\r\n    const [items, setItems] = useState([]);\r\n    // // Reading excel file\r\n\r\n    // const readExcel = (file) => {\r\n      // const promise = new Promise((resolve, reject) => {\r\n      //   const fileReader = new FileReader();\r\n      //   fileReader.readAsArrayBuffer(file);\r\n  \r\n      //   fileReader.onload = (e) => {\r\n      //     const bufferArray = e.target.result;\r\n  \r\n      //     const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n  \r\n      //     const wsname = wb.SheetNames[0];\r\n  \r\n      //     const ws = wb.Sheets[wsname];\r\n  \r\n      //     const data = XLSX.utils.sheet_to_json(ws);\r\n  \r\n      //     resolve(data);\r\n      //   };\r\n  \r\n      //   fileReader.onerror = (error) => {\r\n      //     reject(error);\r\n      //   };\r\n      // });\r\n  \r\n      // promise.then((d) => {\r\n      //   console.log(d)\r\n      //   setItems(d);\r\n      // });\r\n    // };\r\n\r\n    const[error,setserros]= useState(\"\")\r\n    // For handling the dropdown\r\n    const handleChange=((e)=>{\r\n      \r\n      setSelectedOption(e);\r\n     \r\n      setselectedBatches(\"\")\r\n      if(e== 2 || e === \"Enrollment\"){\r\n        fetchNotCompletedBatchDetails(UserContext.centerId).then((jsondata) => {\r\n          let result = JSON.parse(jsondata.data);\r\n          // console.log(result)\r\n          // console.log(result[0].freezeDate)\r\n          // setbatches([])\r\n         result.forEach(element => {\r\n\r\n           console.log(\"Condition for date \" , element.freezeDate > today)\r\n            \r\n            if(element.freezeDate > today ){\r\n              batches.push({\r\n                \"value\" : element.batchId,\r\n                \"label\": element.batchName\r\n              })\r\n\r\n          }\r\n         });\r\n         console.log(batches)\r\n        })\r\n      }\r\n    })\r\n\r\n    // for handling batches changes\r\n   const  batchesChanges= ((e)=>{\r\n      setselectedBatches(e)\r\n      console.log(\"Batchec : \",e)\r\n      // console.log(UserContext.)\r\n      console.log(setengagementId.label)\r\n      // console.log(selectedBatches.e)\r\n    })\r\n\r\n    \r\n    // handlingError((e)=>{\r\n    //   if(setSelectedOption===\"\"){\r\n    //     setserros=\"Plase select Some option\"\r\n    //   }\r\n    // })\r\n\r\n    // Handler for file upload\r\n    const onFileChangeHandler = ((file)=>{\r\n       const promise = new Promise((resolve, reject) => {\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsArrayBuffer(file);\r\n  \r\n        fileReader.onload = (e) => {\r\n          const bufferArray = e.target.result;\r\n  \r\n          const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n  \r\n          const wsname = wb.SheetNames[0];\r\n  \r\n          const ws = wb.Sheets[wsname];\r\n  \r\n          const data = XLSX.utils.sheet_to_json(ws);\r\n  \r\n          resolve(data);\r\n        };\r\n  \r\n        fileReader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n      });\r\n  \r\n      promise.then((d) => {\r\n        console.log(\"File data: \",d)\r\n        setItems(d);\r\n      }); \r\n      setItems(file);\r\n      console.log(\"File name:\" , file)\r\n     \r\n    })\r\n\r\n    // Upload document\r\n    const uploadDocuments = ((e)=>{\r\n     \r\n        e.preventDefault();\r\n        items.map(function(setItems){\r\n        // uploadDocument(setItems);\r\n        {uploadDocument(setItems)}\r\n        console.log(\"file data : \",setItems)\r\n      });\r\n    \r\n    //   this.setState({documentNumber:''});\r\n    //   this.setState({clearDropzoneArea: this.state.clearDropzoneArea + 1});\r\n    //  // this.setState({typeOfDocument:null});\r\n    //   this.setState({ documentType:[]});\r\n        \r\n    })\r\n\r\n    // Uploading the file in s3 buckket\r\n    const uploadDocument = ((setItems)=>{\r\n        //   e.preventDefault();\r\n       // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\r\n       var levelOfDocument=\"G\";\r\n       // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\r\n       \r\n       \r\n       let localThis=this;\r\n       \r\n       let reader = new FileReader();\r\n       reader.readAsDataURL(setItems);\r\n       reader.onload = function () {\r\n       let  document = reader.result;\r\n       console.log(document)\r\n      //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\r\n      //  .then((jsondata) => {\r\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\r\n      //        localThis.setState({alertDialogFlag:true});\r\n      //        localThis.getDocuments();\r\n      //     })\r\n       }\r\n         \r\n    })\r\n        return(\r\n          \r\n            <Grid container>\r\n               <Grid container>\r\n                <Grid item xs={12}> </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Options</InputLabel>\r\n            <SingleSelect\r\n              name=\"\" id=\"\"\r\n              // key={this.state.Selectedstate || ''}\r\n              options={option}\r\n              value={selectedOption}\r\n              onChange={handleChange}\r\n              // error={handlingError}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n\r\n           <Grid item xs={12} sm={2}></Grid>\r\n            <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Batches</InputLabel>\r\n            <SingleSelect\r\n              // key={this.state.Selectedstate || ''}\r\n              name=\"batchname\"  id =\"batchId\"\r\n              options={batches}\r\n              value={selectedBatches}\r\n              onChange={batchesChanges}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n          </Grid>\r\n         \r\n          <Table  aria-label=\"simple table\" style={{ width:\"100%\"}}>\r\n          <TableBody>\r\n          <TableRow>\r\n            <TableCell>   \r\n            <DropzoneArea  \r\n             name=\"upload-photo\"\r\n             type=\"file\"\r\n             onChange={(e) => {\r\n              const file = e.target.files[0];\r\n              readExcel(file);\r\n             }}\r\n              maxFileSize={10000000} filesLimit={1} showFileNames={true} \r\n              onChange={onFileChangeHandler()}\r\n              // key={this.state.clearDropzoneArea\r\n              />\r\n              <p  style={{color:\"red\"}}>Note-: Document size should not be greater than 10mb.</p>\r\n            </TableCell>\r\n            </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n            <br /> <br />\r\n            <form onSubmit={uploadDocuments} method=\"post\">\r\n              <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" \r\n                    // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\r\n             >Upload Document</Button>\r\n             </Grid>\r\n\r\n             </form>\r\n            </Grid>\r\n       \r\n        )\r\n}   "]},"metadata":{},"sourceType":"module"}