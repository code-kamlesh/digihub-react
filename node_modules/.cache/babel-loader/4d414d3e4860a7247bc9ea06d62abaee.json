{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\Upload.js\";\nimport React from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport UserContext from '../components/GolbalContext';\nimport { fetchNotCompletedBatchDetails } from './../util/api';\nexport default function () {\n  const option = [{\n    value: 1,\n    label: \"Mobilization\"\n  }, {\n    value: 2,\n    label: \"Enrollment\"\n  }];\n  const [batches, setbatches] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [selectedBatches, setselectedBatches] = useState(\"\");\n  const [items, setItems] = useState([]); // // Reading excel file\n  // const readExcel = (file) => {\n  //   const promise = new Promise((resolve, reject) => {\n  //     const fileReader = new FileReader();\n  //     fileReader.readAsArrayBuffer(file);\n  //     fileReader.onload = (e) => {\n  //       const bufferArray = e.target.result;\n  //       const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n  //       const wsname = wb.SheetNames[0];\n  //       const ws = wb.Sheets[wsname];\n  //       const data = XLSX.utils.sheet_to_json(ws);\n  //       resolve(data);\n  //     };\n  //     fileReader.onerror = (error) => {\n  //       reject(error);\n  //     };\n  //   });\n  //   promise.then((d) => {\n  //     console.log(d)\n  //     setItems(d);\n  //   });\n  // };\n\n  const [error, setserros] = useState(\"\"); // For handling the dropdown\n\n  const handleChange = e => {\n    setSelectedOption(e);\n\n    if (e == 2 || e === \"Enrollment\") {\n      fetchNotCompletedBatchDetails(UserContext.centerId).then(jsondata => {\n        let result = JSON.parse(jsondata.data);\n        result.forEach(element => {\n          //  console.log(element.batchId)\n          //  console.log(element.batchName)\n          batches.push({\n            \"value\": element.batchId,\n            \"lable\": element.batchName\n          });\n          console.log(batches);\n        });\n      });\n    }\n  }; // for handling batches changes\n\n\n  const batchesChanges = e => {\n    setselectedBatches(e);\n    console.log(\"Batchec : \", e); // console.log(selectedBatches.e)\n  }; // handlingError((e)=>{\n  //   if(setSelectedOption===\"\"){\n  //     setserros=\"Plase select Some option\"\n  //   }\n  // })\n  // Handler for file upload\n\n\n  const onFileChangeHandler = file => {\n    setItems(file);\n    console.log(file);\n  }; // Upload document\n\n\n  const uploadDocuments = e => {\n    e.preventDefault();\n    items.map(function (setItems) {\n      // uploadDocument(setItems);\n      {\n        uploadDocument(setItems);\n      }\n      console.log(\"file data : \", setItems);\n    }); //   this.setState({documentNumber:''});\n    //   this.setState({clearDropzoneArea: this.state.clearDropzoneArea + 1});\n    //  // this.setState({typeOfDocument:null});\n    //   this.setState({ documentType:[]});\n  }; // Uploading the file in s3 buckket\n\n\n  const uploadDocument = setItems => {\n    //   e.preventDefault();\n    // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\n    var levelOfDocument = \"G\"; // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\n\n    let localThis = this;\n    let reader = new FileReader();\n    reader.readAsDataURL(setItems);\n\n    reader.onload = function () {\n      let document = reader.result;\n      console.log(document); //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\n      //  .then((jsondata) => {\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\n      //        localThis.setState({alertDialogFlag:true});\n      //        localThis.getDocuments();\n      //     })\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropzoneArea, {\n    name: \"file\",\n    id: \"file\",\n    maxFileSize: 10000000,\n    filesLimit: 1,\n    showFileNames: true,\n    onChange: onFileChangeHandler // key={this.state.clearDropzoneArea}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, \"Note-: Document size should not be greater than 2mb.\")))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 20\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: uploadDocuments,\n    method: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"small\" // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, \"Upload Document\"))));\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/Upload.js"],"names":["React","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","UserContext","fetchNotCompletedBatchDetails","option","value","batches","setbatches","selectedOption","setSelectedOption","selectedBatches","setselectedBatches","items","setItems","error","setserros","handleChange","e","centerId","then","jsondata","result","JSON","parse","data","forEach","element","push","batchId","batchName","console","log","batchesChanges","onFileChangeHandler","file","uploadDocuments","preventDefault","map","uploadDocument","levelOfDocument","localThis","reader","FileReader","readAsDataURL","onload","document","width","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState } from \"react\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {DropzoneArea} from 'material-ui-dropzone';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchNotCompletedBatchDetails} from './../util/api';\r\nexport default function(){\r\n    const option=[{value:1, label:\"Mobilization\"},{value:2 ,label:\"Enrollment\"}]\r\n  \r\n  \r\n    const [batches, setbatches]= useState([]);\r\n    const [selectedOption, setSelectedOption] = useState(\"\")\r\n    const [selectedBatches, setselectedBatches] = useState(\"\")\r\n    const [items, setItems] = useState([]);\r\n    // // Reading excel file\r\n\r\n    // const readExcel = (file) => {\r\n    //   const promise = new Promise((resolve, reject) => {\r\n    //     const fileReader = new FileReader();\r\n    //     fileReader.readAsArrayBuffer(file);\r\n  \r\n    //     fileReader.onload = (e) => {\r\n    //       const bufferArray = e.target.result;\r\n  \r\n    //       const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n  \r\n    //       const wsname = wb.SheetNames[0];\r\n  \r\n    //       const ws = wb.Sheets[wsname];\r\n  \r\n    //       const data = XLSX.utils.sheet_to_json(ws);\r\n  \r\n    //       resolve(data);\r\n    //     };\r\n  \r\n    //     fileReader.onerror = (error) => {\r\n    //       reject(error);\r\n    //     };\r\n    //   });\r\n  \r\n    //   promise.then((d) => {\r\n    //     console.log(d)\r\n    //     setItems(d);\r\n    //   });\r\n    // };\r\n\r\n    const[error,setserros]= useState(\"\")\r\n    // For handling the dropdown\r\n    const handleChange=((e)=>{\r\n      \r\n      setSelectedOption(e);\r\n      if(e== 2 || e === \"Enrollment\"){\r\n        fetchNotCompletedBatchDetails(UserContext.centerId).then((jsondata) => {\r\n          let result = JSON.parse(jsondata.data);\r\n         result.forEach(element => {\r\n          //  console.log(element.batchId)\r\n          //  console.log(element.batchName)\r\n          batches.push({\r\n             \"value\" : element.batchId,\r\n             \"lable\": element.batchName\r\n           })\r\n           console.log(batches)\r\n         });\r\n        })\r\n      }\r\n    })\r\n\r\n    // for handling batches changes\r\n   const  batchesChanges= ((e)=>{\r\n      setselectedBatches(e)\r\n      console.log(\"Batchec : \",e)\r\n      // console.log(selectedBatches.e)\r\n    })\r\n\r\n    \r\n    // handlingError((e)=>{\r\n    //   if(setSelectedOption===\"\"){\r\n    //     setserros=\"Plase select Some option\"\r\n    //   }\r\n    // })\r\n\r\n    // Handler for file upload\r\n    const onFileChangeHandler = ((file)=>{\r\n      setItems(file);\r\n      console.log(file)\r\n    })\r\n\r\n    // Upload document\r\n    const uploadDocuments = ((e)=>{\r\n      \r\n        e.preventDefault();\r\n        items.map(function(setItems){\r\n        // uploadDocument(setItems);\r\n        {uploadDocument(setItems)}\r\n        console.log(\"file data : \",setItems)\r\n      });\r\n    \r\n    //   this.setState({documentNumber:''});\r\n    //   this.setState({clearDropzoneArea: this.state.clearDropzoneArea + 1});\r\n    //  // this.setState({typeOfDocument:null});\r\n    //   this.setState({ documentType:[]});\r\n        \r\n    })\r\n\r\n    // Uploading the file in s3 buckket\r\n    const uploadDocument = ((setItems)=>{\r\n        //   e.preventDefault();\r\n       // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\r\n       var levelOfDocument=\"G\";\r\n       // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\r\n       \r\n       \r\n       let localThis=this;\r\n       \r\n       let reader = new FileReader();\r\n       reader.readAsDataURL(setItems);\r\n       reader.onload = function () {\r\n       let  document = reader.result;\r\n       console.log(document)\r\n      //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\r\n      //  .then((jsondata) => {\r\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\r\n      //        localThis.setState({alertDialogFlag:true});\r\n      //        localThis.getDocuments();\r\n      //     })\r\n       }\r\n         \r\n    })\r\n        return(\r\n          \r\n            <Grid container>\r\n          <Grid>\r\n          <Table  aria-label=\"simple table\" style={{ width:\"100%\"}}>\r\n          <TableBody>\r\n          <TableRow>\r\n            <TableCell>   \r\n            <DropzoneArea  \r\n              name=\"file\" id=\"file\"\r\n              maxFileSize={10000000} filesLimit={1} showFileNames={true} \r\n              onChange={onFileChangeHandler}\r\n              // key={this.state.clearDropzoneArea}\r\n              />\r\n              <p  style={{color:\"red\"}}>Note-: Document size should not be greater than 2mb.</p>\r\n            </TableCell>\r\n            </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n            </Grid>\r\n            <br /> <br />\r\n            <form onSubmit={uploadDocuments} method=\"post\">\r\n              <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" \r\n                    // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\r\n             >Upload Document</Button>\r\n             </Grid>\r\n\r\n             </form>\r\n            </Grid>\r\n       \r\n        )\r\n}   "]},"metadata":{},"sourceType":"module"}