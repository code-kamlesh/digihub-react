{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\PlacementDetails.js\";\nimport React, { Component } from 'react';\nimport { render } from \"react-dom\";\nimport './../App.css';\nimport './../assets/css/login-style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport callMerge from 'material-ui/svg-icons/communication/call-merge';\nimport UserContext from '../components/GolbalContext';\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { isNotEmpty, isNotZero, validateEmail, validateContact } from './../util/validation';\nimport { roleBasedReadonly, checkButton } from '../util/validation';\nimport AlertDialog from '../util/AlertDialog';\nimport Paper from '@material-ui/core/Paper';\nimport { savePlacementDetails, deleteDocumentById, fetchUserDocumentsByUserIdAndTypeOfDocument, fectAddressDetailsByAddressID, fetchAddressDetailsBasedOnPincode, fetchPlacementDetailsByEngagementId, fetchAllCenter, saveAddressDetails, uploadDocument, fetchEmployerDetails } from '../util/api';\nimport MUIDataTable from \"mui-datatables\";\nimport AddressForPlacement from \"./AddressForPlacement\";\nimport underscore from 'underscore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { serviceEndPoint } from '../util/serviceEndPoint';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Label } from 'recharts';\nimport error from 'material-ui/svg-icons/alert/error';\nimport PlacementDetailsSubPlaced from './PlacementDetailsSubPlaced';\nimport PlacementDetailsSubEntNP from './PlacementDetailsSubEntNP';\nimport PlacementDetailsSubNP from './PlacementDetailsSubNP';\nconst alertDialogOptions = {\n  message: ''\n};\n\nclass PlacementDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteDocument = basicDocId => {\n      //**For deleting a particular element if deleted then check for the updated row */\n      deleteDocumentById(basicDocId).then(jsondata => {\n        if (jsondata.status == \"success\") {\n          let data = JSON.parse(jsondata.data); //** uncomment the below if an alert for deleting the document is required */\n          // this.setState({ alertDialogFlag: false });\n          //       alertDialogOptions.message = <span style={{ color: \"green\" }}>Document is Deleted Sucessfully</span>;\n          // this.setState({ alertDialogFlag: true });\n\n          this.getDocuments();\n        } else {\n          this.setState({\n            alertDialogFlag: false\n          });\n          alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 38\n            }\n          }, \"Document cannot be deleted, please try again!\");\n          this.setState({\n            alertDialogFlag: true\n          });\n        }\n      });\n    };\n\n    this.handleCheckboxChange = event => {\n      let target = event.target;\n      let name = target.name;\n      let idName = target.id;\n      console.log(idName); // if (event.target.name == 'documentsUploaded') {\n      //   this.state.errors.documentsUploaded = '';\n      // }\n      // else if (name == 'authenticationAndConsent') {\n      //   this.state.errors.documentsUploaded = '';\n      //   this.state.errors.authenticationAndConsent = '';\n      // }\n      // else if (name == 'familyConsent') {\n      //   this.state.errors.familyConsent = '';\n      // }\n\n      this.validateAppropriateCheckBoxes(idName);\n      this.setState({\n        placementData: { ...this.state.placementData,\n          [event.target.name]: event.target.checked\n        }\n      });\n    };\n\n    this.validateAppropriateCheckBoxes = name => {\n      console.log('point 2');\n      console.log('here');\n      let errors = this.state.errors;\n      console.log(this.state.documents); //*Check if any documents are uploaded if not send to the else part if yes check the type and then check the appropriate documents*//\n\n      if (this.state.documents.length > 0) {\n        if (name == \"documentsUploaded\") {\n          console.log('point 3'); // console.log('placed documents to be checked here')\n          // this.state.documents.map((element, id) => {\n          //   // console.log(element)\n          //   var isPresent = (element.documentType == \"Offer Letter\" || element.documentType == \"Joining Letter\" || element.documentType == \"Pay Slip\" || element.documentType == \"Bank Statement\" || element.documentType == \"Email From Employer\" || element.documentType == \"Workplace Picture\" || element.documentType == \"ID card\" || element.documentType == \"Letter from HR\")\n          //   let errors = this.state.errors;\n          //   if (isPresent) {\n          //     errors.documentsUploaded = '';\n          //   }\n          //   else {\n          //     errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\n          //   }\n          // })\n\n          let docList = ['Offer Letter', 'Joining Letter', 'Pay Slip', 'Bank Statement', 'Email From Employer', 'Workplace Picture', 'ID card', 'Letter from HR'];\n          docList.map(element => {\n            let ans = this.CheckForDocuments(element);\n            console.log(\"some value here ===> \", ans);\n\n            if (this.CheckForDocuments(element)) {\n              this.state.errors.documentsUploaded = '';\n            } else if (element == 'Letter from HR') {\n              console.log('reached here!!!'); // this.state.errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\n            }\n          });\n        } else if (name == \"authenticationAndConsent\") {\n          console.log('point 4'); // console.log('placed documents to be checked here')\n          // if (errors.documentsUploaded) {\n          //   errors.authenticationAndConsent = 'Please upload the document before clicking the checkbox!';\n          // }\n          // else {\n          //   errors.authenticationAndConsent = '';\n          // }\n        } else if (name == \"documentsUploadedEntrepreneurship\") {\n          console.log('point 5'); // console.log('entrepreneurship documents to be checked here')\n          // this.state.documents.map((element, id) => {\n          //   // console.log(element)\n          //   var isPresent = (element.documentType == \"Registration Certificate\")\n          //   let errors = this.state.errors;\n          //   if (isPresent) {\n          //     errors.documentsUploaded = '';\n          //   }\n          //   else {\n          //     errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\n          //   }\n          // })\n\n          if (this.CheckForDocuments('Registration Certificate') || this.CheckForDocuments('Pic Of Business') || this.CheckForDocuments('MSME Registration Certificate')) {\n            errors.documentsUploaded = '';\n          } else {// errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\n          }\n        }\n      } else {\n        console.log('point 6'); // alert('Please upload the document before clicking the checkbox!');\n        // errors.name = 'Please upload documents before proceeding here!';\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.mySubmitHandler = event => {\n      // alert(\"check\");\n      console.log('point 0');\n      event.preventDefault();\n      this.state.disabled = true;\n      console.log(this.state.placementData.interviewStatus);\n      this.validate(\"interviewStatus\", this.state.placementData.interviewStatus);\n      console.log('This is the part of error');\n\n      if (this.state.errors.interviewStatus === '') {\n        if (this.state.placementData.interviewStatus === 'Placed') {\n          console.log('point 1');\n          /*the following is the validation for general form*/\n\n          this.validatePlacedAndOfferNotTaken(\"empId\", this.state.placementData.empId);\n          this.validatePlacedAndOfferNotTaken(\"domainName\", this.state.placementData.domainName);\n          this.validatePlacedAndOfferNotTaken(\"spocName\", this.state.placementData.spocName);\n          this.validatePlacedAndOfferNotTaken(\"designation\", this.state.placementData.designation);\n          this.validatePlacedAndOfferNotTaken(\"spocPhoneNumber\", this.state.placementData.spocPhoneNumber);\n          this.validatePlacedAndOfferNotTaken(\"spocEmailId\", this.state.placementData.spocEmailId);\n          this.validatePlacedAndOfferNotTaken(\"monthlyGrossSal\", this.state.placementData.monthlyGrossSal);\n          this.validatePlacedAndOfferNotTaken(\"accommodationProvided\", this.state.placementData.accommodationProvided);\n          this.validatePlacedAndOfferNotTaken(\"foodProvided\", this.state.placementData.foodProvided);\n          this.validatePlacedAndOfferNotTaken(\"offerDate\", this.state.placementData.offerDate);\n          this.validatePlacedAndOfferNotTaken(\"offerStatus\", this.state.placementData.offerStatus);\n\n          if (this.state.placementData.offerStatus == 'Accepted') {\n            this.validatePlacedAndOfferNotTaken(\"joined\", this.state.placementData.joined);\n          } else if (this.state.placementData.offerStatus == 'Rejected') {\n            this.validatePlacedAndOfferNotTaken(\"reasonJobRejected\", this.state.placementData.reasonJobRejected);\n            this.validatePlacedAndOfferNotTaken(\"otherReasonInBrief\", this.state.placementData.otherReasonInBrief);\n          } // this.validatePlacedAndOfferNotTaken(\"documentsUploaded\", this.state.placementData.documentsUploaded);\n          // this.validatePlacedAndOfferNotTaken(\"authenticationAndConsent\", this.state.placementData.authenticationAndConsent);\n          // this.validateAppropriateCheckBoxes(\"documentsUploaded\");\n          // this.validateAppropriateCheckBoxes(\"authenticationAndConsent\");\n          //         /*the following is the validation for address*/\n\n\n          this.validateAddress(\"pincode\", this.state.address.pincode);\n          this.validateAddress(\"villageName\", this.state.address.villageName);\n          this.validateAddress(\"cityName\", this.state.address.cityName);\n          this.validateAddress(\"state\", this.state.address.state);\n          this.validateAddress(\"district\", this.state.address.district);\n          let errorsExist = true;\n          Object.values(this.state.errors).forEach(val => {\n            val.length > 0 && (errorsExist = false);\n          });\n\n          if (errorsExist) {\n            this.submitPlacementDetails();\n          } else {\n            console.log(this.state.errors); // alert('Please upload the document before clicking the checkbox!');\n          }\n        } //**If Not placed then check reason if provided then submit details else alert  */\n        else if (this.state.placementData.interviewStatus === 'Not Placed') {\n          this.validateNotPlaced(\"reason\", this.state.placementData.reason);\n          this.validateNotPlaced(\"empId\", this.state.placementData.empId);\n          this.validateNotPlaced(\"reasonForNoOpportunity\", this.state.placementData.reasonForNoOpportunity);\n          this.validateNotPlaced(\"otherReasonInBrief\", this.state.placementData.otherReasonInBrief);\n          let errorsExist = true;\n          Object.values(this.state.errors).forEach(val => val.length > 0 && (errorsExist = false));\n\n          if (errorsExist) {\n            this.submitPlacementDetails();\n          } else {\n            console.log(this.state.errors); // alert('Please upload the document before clicking the checkbox!');\n          }\n        } //**If the status is Entrepreneurship check the checkboxes for documents uploaded*/\n        else if (this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\n          /*the following is the validation of the form data for enterpreneurship*/\n          this.validateEntrepreneurship(\"domainName\", this.state.placementData.domainName);\n          this.validateEntrepreneurship(\"noOfPeopleEmployed\", this.state.placementData.noOfPeopleEmployed);\n          this.validateEntrepreneurship(\"familyBusiness\", this.state.placementData.familyBusiness);\n          this.validateEntrepreneurship(\"availedLoan\", this.state.placementData.availedLoan);\n          this.validateEntrepreneurship(\"monthlyGrossSal\", this.state.placementData.monthlyGrossSal);\n          /*the following is the validation for address*/\n\n          this.validateAddress(\"pincode\", this.state.address.pincode);\n          this.validateAddress(\"villageName\", this.state.address.villageName);\n          this.validateAddress(\"cityName\", this.state.address.cityName);\n          this.validateAddress(\"state\", this.state.address.state);\n          this.validateAddress(\"district\", this.state.address.district);\n          /*validation of appropriate checkboxes*/\n          // this.validateEntrepreneurship(\"documentsUploaded\", this.state.placementData.documentsUploaded);\n\n          this.validateAppropriateCheckBoxes(\"documentsUploadedEntrepreneurship\");\n          let errorsExist = true;\n          Object.values(this.state.errors).forEach(val => val.length > 0 && (errorsExist = false));\n\n          if (errorsExist) {\n            this.submitPlacementDetails();\n          } else {// alert('Please upload the document before clicking the checkbox!');\n          }\n        } //**Else if nothing is from the selected try to save the data for the same if possible (this condition may not be arising ever but just in case) */\n        else {\n          this.submitPlacementDetails();\n        }\n      } //*authentication response and redirect to error or dashbaord page*/\n\n\n      this.setState({\n        errors: this.state.errors\n      });\n\n      if (checkButton(this.state.errors)) {} else {\n        this.state.disabled = true;\n      }\n    };\n\n    this.validate = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'interviewStatus':\n          {\n            errors.interviewStatus = isNotEmpty(value);\n\n            if (value == \"Placed\") {\n              this.state.errors = {\n                /*Placed Data here*/\n                domainName: '*',\n                spocName: '*',\n                spocPhoneNumber: '*',\n                spocEmailId: '',\n                monthlyGrossSal: '*',\n                foodProvided: '*',\n                accommodationProvided: '*',\n                offerDate: '*',\n                offerStatus: '*',\n                joined: '',\n                reason: '',\n                otherReasonInBrief: '',\n\n                /*Address here*/\n                joiningPin: '*',\n                joiningCity: '*',\n                addressId: '**',\n                empId: 0,\n                interviewStatus: ''\n              };\n            } else if (value == \"Entrepreneurship/ Self Employed\") {\n              this.state.errors = {\n                /*Address here*/\n                joiningPin: '*',\n                joiningCity: '*',\n                addressId: '*',\n\n                /*Entrepreneurship/ Self Employed*/\n                noOfPeopleEmployed: '*',\n                familyBusiness: '*',\n                availedLoan: '*',\n                interviewStatus: ''\n              };\n            } else if (value == \"Not Placed\") {\n              this.state.errors = {\n                /*Not Placed*/\n                reasonForNoOpportunity: '*',\n                reason: '',\n                otherReasonInBrief: '',\n                empId: '',\n                interviewStatus: ''\n              };\n            }\n\n            console.log(value);\n          }\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validateEntrepreneurship = (name, value) => {\n      console.log(\"name ===> \", name, \" value ===> \", value);\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'noOfPeopleEmployed':\n          errors.noOfPeopleEmployed = isNotZero(value);\n          break;\n\n        case 'domainName':\n          errors.domainName = isNotEmpty(value);\n          break;\n\n        case 'familyBusiness':\n          errors.familyBusiness = isNotEmpty(value);\n          break;\n\n        case 'availedLoan':\n          errors.availedLoan = isNotEmpty(value);\n          break;\n\n        case 'monthlyGrossSal':\n          errors.monthlyGrossSal = isNotZero(value);\n          break;\n\n        case 'documentsUploaded':\n          {\n            if (value) {\n              errors.documentsUploaded = \"\";\n              this.CheckForDocuments('documentsUploadedEntrepreneurship');\n            } else {\n              errors.documentsUploaded = 'Please upload the appropriate documents to continue';\n            }\n\n            break;\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validateNotPlaced = (name, value) => {\n      console.log(\"name ===> \", name, \" value ===> \", value);\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'reason':\n          errors.reason = isNotEmpty(value);\n          break;\n\n        case 'empId':\n          errors.reasonForNoOpportunity = isNotZero(value);\n          break;\n\n        case 'reasonForNoOpportunity':\n          errors.reasonForNoOpportunity = isNotEmpty(value);\n          break;\n\n        case 'otherReasonInBrief':\n          errors.otherReasonInBrief = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validatePlacedAndOfferNotTaken = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'empId':\n          errors.empId = isNotEmpty(value);\n          break;\n\n        case 'domainName':\n          errors.domainName = isNotEmpty(value);\n          break;\n\n        case 'spocName':\n          errors.spocName = isNotEmpty(value);\n          break;\n\n        case 'spocEmailId':\n          errors.spocEmailId = validateEmail('secondaryEmailId', value);\n          break;\n\n        case 'spocPhoneNumber':\n          errors.spocPhoneNumber = validateContact(name, value);\n          break;\n\n        case 'monthlyGrossSal':\n          errors.monthlyGrossSal = isNotZero(value);\n          break;\n\n        case 'accommodationProvided':\n          errors.accommodationProvided = isNotEmpty(value);\n          break;\n\n        case 'foodProvided':\n          errors.foodProvided = isNotEmpty(value);\n          break;\n\n        case 'offerDate':\n          errors.offerDate = isNotEmpty(value);\n          break;\n\n        case 'offerStatus':\n          errors.offerStatus = isNotEmpty(value);\n          break;\n\n        case 'joined':\n          errors.joined = isNotEmpty(value);\n          break;\n\n        case 'reasonForNoOpportunity':\n          errors.reasonForNoOpportunity = isNotEmpty(value);\n          break;\n\n        case 'otherReasonInBrief':\n          errors.otherReasonInBrief = isNotEmpty(value);\n          break;\n\n        case 'reason':\n          errors.reason = isNotEmpty(value);\n          break;\n\n        case 'reasonForRejection':\n          errors.reasonForRejection = isNotEmpty(value);\n          break;\n\n        case 'documentsUploaded':\n          {// if (value) {\n            //   errors.documentsUploaded = \"\";\n            //   this.CheckForDocuments('documentsUploaded');\n            // }\n            // else {\n            //   errors.documentsUploaded = 'Please upload the appropriate documents to continue';\n            // }\n            // break;\n          }\n\n        case 'authenticationAndConsent':\n          {// if (value) {\n            //   errors.authenticationAndConsent = \"\";\n            //   this.CheckForDocuments('authenticationAndConsent');\n            // }\n            // else {\n            //   errors.authenticationAndConsent = 'Please upload the appropriate documents to continue';\n            // }\n            // break;\n          }\n\n        default:\n          console.log('all clear');\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validateAddress = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'pincode':\n          errors.pincode = isNotEmpty(value);\n          break;\n\n        case 'villageName':\n          errors.village = isNotEmpty(value);\n          break;\n\n        case 'cityName':\n          errors.cityName = isNotEmpty(value);\n          break;\n\n        case 'state':\n          errors.state = isNotEmpty(value);\n          break;\n\n        case 'district':\n          errors.district = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.downloadDocuments = value => {\n      let formData = new FormData();\n      formData.append('data', '{\"token\" : \"\", \"action\" : \"downloadDocument\", \"data\" : [{\"basicDocId\":' + value + '}]}');\n      fetch(serviceEndPoint.documentServiceEndPoint, {\n        method: 'post',\n        headers: {\n          'Authorization': 'Bearer ' + UserContext.token\n        },\n        body: formData\n      }).then(response => response.json()).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data);\n        var url = serviceEndPoint.downloadDocument + jsonobjects[0].documentPath + \"\";\n        window.open(url, \"_blank\");\n      });\n    };\n\n    this.uploadDocuments = e => {\n      e.preventDefault();\n      var levelOfDocument = \"G\"; // console.log('dample here')\n\n      let localThis = this;\n      let reader = new FileReader();\n      reader.readAsDataURL(this.state.file);\n\n      reader.onload = function () {\n        let document = reader.result;\n        localThis.setState({\n          alertDialogFlag: false\n        });\n        uploadDocument(localThis.state.dbUserId, localThis.state.engagementId, localThis.state.typeOfDocument, 'PD', localThis.state.typeOfDocument, document, \"\").then(jsondata => {\n          //**Only if the student's data is successfully saved then display the message and update the documents list else display NOT uploaded message */\n          if (jsondata.status == \"success\") {\n            localThis.setState({\n              alertDialogFlag: false\n            });\n            alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                color: \"green\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 921,\n                columnNumber: 40\n              }\n            }, \"Document is Saved Sucessfully\");\n            localThis.setState({\n              alertDialogFlag: true\n            });\n            localThis.getDocuments();\n          } else {\n            localThis.setState({\n              alertDialogFlag: false\n            });\n            alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 927,\n                columnNumber: 40\n              }\n            }, \"Document is NOT SAVED Please Check the uploaded Documents\");\n            localThis.setState({\n              alertDialogFlag: true\n            });\n          }\n        });\n      };\n    };\n\n    this.onFileChangeHandler = files => {\n      this.setState({\n        file: files[0]\n      });\n    };\n\n    console.log(props.status);\n    /*State starts here*/\n\n    this.state = {\n      buttonStatus: props.status,\n      engagementId: props.engagementId,\n      alertDialogFlag: false,\n      disabled: false,\n      flag: \"0\",\n      errors: {\n        /*Placed Data here*/\n        domainName: '',\n        spocName: '',\n        spocPhoneNumber: '',\n        spocEmailId: '',\n        monthlyGrossSal: '',\n        foodProvided: '',\n        accommodationProvided: '',\n        offerDate: '',\n        offerStatus: '',\n        joined: '',\n        reason: '',\n        otherReasonInBrief: '',\n\n        /*Address here*/\n        joiningPin: '',\n        joiningCity: '',\n        addressId: '',\n\n        /*Entrepreneurship/ Self Employed*/\n        noOfPeopleEmployed: '',\n        familyBusiness: '',\n        availedLoan: '',\n        //domainName: '', monthlyGrossSal: '0'\n\n        /*Not Placed*/\n        reasonForNoOpportunity: '',\n        //reason: '', otherReasonInBrief: '',\n\n        /*General*/\n        empId: 0,\n        interviewStatus: ''\n      },\n      dbUserId: props.id,\n      info: [],\n      placementData: {\n        /*Placed Data here*/\n        domainName: '',\n        spocName: '',\n        spocPhoneNumber: '',\n        spocEmailId: '',\n        monthlyGrossSal: '0',\n        foodProvided: '',\n        accommodationProvided: '',\n        offerDate: '',\n        offerStatus: '',\n        joined: '',\n        reason: '',\n        otherReasonInBrief: '',\n\n        /*Address here*/\n        joiningPin: '',\n        joiningCity: '',\n        addressId: '',\n\n        /*Entrepreneurship/ Self Employed*/\n        noOfPeopleEmployed: '0',\n        familyBusiness: '',\n        availedLoan: '',\n        //domainName: '', monthlyGrossSal: '0'\n\n        /*Not Placed*/\n        reasonForNoOpportunity: '',\n        //reason: '', otherReasonInBrief: '',\n\n        /*General*/\n        empId: 0,\n        interviewStatus: '',\n        createdBy: UserContext.userid,\n        updatedBy: UserContext.userid,\n        engagementId: props.engagementId,\n        dbUserId: props.id,\n        isActive: \"Y\"\n      },\n      center: [],\n      centerData: [],\n      documents: [],\n      info: [{\n        \"createdBy\": UserContext.userid,\n        \"updatedBy\": UserContext.userid,\n        \"isActive\": \"Y\",\n        \"dbUserId\": props.id\n      }],\n      intStatus: [{\n        value: 'Placed',\n        label: 'Placed'\n      }, {\n        value: 'Entrepreneurship/ Self Employed',\n        label: 'Entrepreneurship/ Self Employed'\n      }, {\n        value: 'Not Placed',\n        label: 'Not Placed'\n      }],\n      notPlacedReason: [{\n        value: 'Rejected By Employer',\n        label: 'Rejected By Employer'\n      }, {\n        value: 'Not Avaliable Opportunity',\n        label: 'Not Avaliable Opportunity'\n      }],\n      notAvlOppReason: [{\n        value: 'No Employment Opportuntities',\n        label: 'No Employment Opportuntities'\n      }, {\n        value: 'Others',\n        label: 'Others'\n      }],\n      notInterestedReason: [{\n        value: 'Marriage',\n        label: 'Marriage'\n      }, {\n        value: 'Migration',\n        label: 'Migration'\n      }, {\n        value: 'Less Salary',\n        label: 'Less Salary'\n      }, {\n        value: 'Others',\n        label: 'Others'\n      }],\n      domains: [{\n        value: 'Agriculture',\n        label: 'Agriculture'\n      }, {\n        value: 'Apparel, made ups and Furnishing',\n        label: 'Apparel, made ups and Furnishing'\n      }, {\n        value: 'Automotive',\n        label: 'Automotive'\n      }, {\n        value: 'Beauty and Wellness',\n        label: 'Beauty and Wellness'\n      }, {\n        value: 'BFSI',\n        label: 'BFSI'\n      }, {\n        value: 'Construction',\n        label: 'Construction'\n      }, {\n        value: 'Electronics',\n        label: 'Electronics'\n      }, {\n        value: 'Furniture and Fittings',\n        label: 'Furniture and Fittings'\n      }, {\n        value: 'Healthcare',\n        label: 'Healthcare'\n      }, {\n        value: 'IT-ITeS',\n        label: 'IT-ITeS'\n      }, {\n        value: 'Management, Entrepreneurship and Preofessional Courses',\n        label: 'Management, Entrepreneurship and Preofessional Courses'\n      }, {\n        value: 'Retail',\n        label: 'Retail'\n      }, {\n        value: 'Green Jobs',\n        label: 'Green Jobs'\n      }, {\n        value: 'Telecom',\n        label: 'Telecom'\n      }, {\n        value: 'Tourism and Hospitality',\n        label: 'Tourism and Hospitality'\n      }],\n      yesOrNo: [{\n        value: 'Yes',\n        label: 'Yes'\n      }, {\n        value: 'No',\n        label: 'No'\n      }],\n      OfferStatus: [{\n        value: 'Accepted',\n        label: 'Accepted'\n      }, {\n        value: 'Rejected',\n        label: 'Rejected'\n      }],\n      typeOfDocument: null,\n      file: null,\n      typeOfDocumentData: [{\n        value: 'Offer Letter',\n        label: 'Offer Letter'\n      }, {\n        value: 'Joining Letter',\n        label: 'Joining Letter'\n      }, {\n        value: 'Pay Slip',\n        label: 'Pay Slip'\n      }, {\n        value: 'Bank Statement',\n        label: 'Bank Statement'\n      }, {\n        value: 'Email From Employer',\n        label: 'Email From Employer'\n      }, {\n        value: 'Workplace Picture',\n        label: 'Workplace Picture'\n      }, {\n        value: 'ID card',\n        label: 'ID card'\n      }, {\n        value: 'Letter from HR',\n        label: 'Letter from HR'\n      }, {\n        value: 'Student Declaration',\n        label: 'Student Declaration'\n      }, {\n        value: 'Pic Of Business',\n        label: 'Pic Of Business'\n      }, {\n        value: 'Registration Certificate',\n        label: 'Registration Certificate'\n      }, {\n        value: 'MSME Registration Certificate',\n        label: 'MSME Registration Certificate'\n      }, {\n        value: 'Three Party Certificate',\n        label: 'Three Party Certificate'\n      }],\n      address: {\n        entityId: props.engagementId,\n        createdBy: UserContext.userid,\n        'isActive': 'Y',\n        'type': 'PD',\n        'entityType': 'S',\n        pincode: \"\",\n        addressLine1: \"\",\n        addressLine2: \"\",\n        district: \"\",\n        state: \"\",\n        cityName: \"\",\n        villageName: \"\"\n      },\n      state: [],\n      district: [],\n      pincodes: [],\n      city: [],\n      village: [],\n      engagementId: props.engagementId\n    };\n    /*State ends here*/\n\n    this.formData = {\n      state: [],\n      district: [],\n      pincodes: [],\n      city: [],\n      village: []\n    };\n    /*function call for masters*/\n\n    this.getCenterMasters();\n    this.getDocuments();\n    /*binding for functions*/\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.validateAppropriateCheckBoxes = this.validateAppropriateCheckBoxes.bind(this);\n    this.CheckForDocuments = this.CheckForDocuments.bind(this);\n    /*fetch placement details if already present for the existing user*/\n\n    if (props.id != null && props.id != undefined) {\n      this.fetchPlacementdetailsFouUser(props.engagementId);\n    }\n  }\n  /*Constructor ends here*/\n\n\n  componentDidMount() {\n    roleBasedReadonly();\n  }\n\n  getDocuments() {\n    //**Set the state as empty or null initially to be refilled back so as not to create multiple copies of the same user Docs */\n    this.setState({\n      documents: []\n    });\n    fetchUserDocumentsByUserIdAndTypeOfDocument(this.state.dbUserId, 'PD').then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data);\n      console.log(jsonobjects);\n      this.setState({\n        documents: [...this.state.documents, ...jsonobjects]\n      });\n    });\n  }\n\n  handleEditChange(obj) {\n    obj.authenticationAndConsent = (obj === null || obj === void 0 ? void 0 : obj.authenticationAndConsent) == \"true\" ? true : false;\n    obj.documentsUploaded = (obj === null || obj === void 0 ? void 0 : obj.documentsUploaded) == \"true\" ? true : false;\n    this.setState({\n      placementData: obj\n    }, () => {\n      if (this.state.placementData.interviewStatus === 'Placed' || this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\n        this.getAddressDetailsByAddressID(this.state.placementData.addressId);\n\n        if (this.state.placementData.interviewStatus === 'Placed') {// console.log('check the boxes here placed')\n          // if (this.state.placementData.documentsUploaded) {\n          //   document.getElementById('documentsUploadedPlaced').click();\n          // }\n          // if (this.state.placementData.authenticationAndConsent) {\n          //   document.getElementById('authenticationAndConsent').click();\n          // }\n        }\n      }\n    });\n  }\n\n  getAddressDetailsByAddressID(addressId) {\n    fectAddressDetailsByAddressID(addressId).then(jsondata => {\n      let addressDetails = JSON.parse(jsondata.data);\n      this.setState({\n        address: addressDetails[0]\n      }, () => {\n        this.getAddressdataBasedOnPin(this.state.address.pincode);\n      });\n    });\n  }\n\n  getAddressdataBasedOnPin(pincode) {\n    fetchAddressDetailsBasedOnPincode(pincode).then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data);\n      let taluk = [];\n      let pincode = [];\n      let cityVillage = [];\n      let states = [];\n      let district = [];\n      this.formData.village.length = 0;\n      this.formData.pincodes.length = 0;\n      this.formData.city.length = 0;\n      this.formData.state.length = 0;\n      this.formData.district.length = 0;\n      jsonobjects.map(item => {\n        cityVillage.push({\n          label: item.cityVillage,\n          value: item.id\n        });\n      });\n      cityVillage = underscore.uniq(cityVillage, true, \"label\");\n      cityVillage.map(item => {\n        this.formData.village.push({\n          label: item.label,\n          value: item.label.toString()\n        });\n      });\n      this.setState({\n        village: this.formData.village\n      });\n      jsonobjects.map(item => {\n        taluk.push({\n          label: item.taluk,\n          value: item.id\n        });\n      });\n      taluk = underscore.uniq(taluk, true, \"label\");\n      taluk.map(item => {\n        this.formData.city.push({\n          label: item.label,\n          value: item.label.toString()\n        });\n      });\n      this.setState({\n        city: this.formData.city\n      });\n      jsonobjects.map(item => {\n        states.push({\n          label: item.state,\n          value: item.id\n        });\n      });\n      states = underscore.uniq(states, true, \"label\");\n      states.map(item => {\n        this.formData.state.push({\n          label: item.label,\n          value: item.value.toString()\n        });\n      });\n      this.setState({\n        state: this.formData.state\n      }, () => {\n        /*console.log(this.state.state)*/\n      });\n      jsonobjects.map(item => {\n        district.push({\n          label: item.district,\n          value: item.id\n        });\n      });\n      district = underscore.uniq(district, true, \"label\");\n      district.map(item => {\n        this.formData.district.push({\n          label: item.label,\n          value: item.value.toString()\n        });\n      });\n      this.setState({\n        district: this.formData.district\n      });\n    });\n  }\n\n  handleSelectChangeDoc(selectname, event) {\n    this.setState({\n      [selectname]: event\n    });\n  }\n\n  handlePlacementSelectChange(selectname, event) {\n    this.setState({\n      placementData: { ...this.state.placementData,\n        [selectname]: event\n      }\n    });\n    this.validate(selectname, event);\n  }\n\n  handleSelectChange(selectname, event) {\n    let value = 0;\n    let target = null;\n\n    try {\n      target = event.target;\n      value = target.value;\n    } catch (e) {\n      value = event;\n    }\n\n    this.setState({\n      \"disabled\": false\n    });\n    this.setState({\n      placementData: { ...this.state.placementData,\n        [selectname]: event\n      }\n    });\n\n    if (this.state.placementData.interviewStatus === 'Not Placed') {\n      this.validateNotPlaced(selectname, event);\n    } else if (this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\n      this.validateEntrepreneurship(selectname, event);\n      let typeOfDocumentData = [{\n        value: 'Pic Of Business',\n        label: 'Pic Of Business'\n      }, {\n        value: 'MSME Registration Certificate',\n        label: 'MSME Registration Certificate'\n      }, {\n        value: 'Registration Certificate',\n        label: 'Registration Certificate'\n      }];\n      this.setState({\n        typeOfDocumentData\n      });\n    } else if (this.state.placementData.interviewStatus === 'Placed') {\n      this.validatePlacedAndOfferNotTaken(selectname, event);\n      let typeOfDocumentData = [{\n        value: 'Offer Letter',\n        label: 'Offer Letter'\n      }, {\n        value: 'Joining Letter',\n        label: 'Joining Letter'\n      }, {\n        value: 'Pay Slip',\n        label: 'Pay Slip'\n      }, {\n        value: 'Bank Statement',\n        label: 'Bank Statement'\n      }, {\n        value: 'Email From Employer',\n        label: 'Email From Employer'\n      }, {\n        value: 'Workplace Picture',\n        label: 'Workplace Picture'\n      }, {\n        value: 'ID card',\n        label: 'ID card'\n      }, {\n        value: 'Letter from HR',\n        label: 'Letter from HR'\n      }];\n      this.setState({\n        typeOfDocumentData\n      });\n      console.log('point 0.2'); // if (selectname == \"joined\" && event == \"Yes\") {\n      // let DocToBeChecked = ['Joining Letter', 'Pay Slip', 'Bank Statement', 'Email From Employer', 'Workplace Picture', 'ID card', 'Letter From HR'];\n      // let raiseError = true;\n      // DocToBeChecked.map((element, id) => {\n      //   console.log('point 0.4')\n      //   this.state.documents.map((document, id) => {\n      //     console.log('pass by me everytime')\n      //     console.log('errors here ===> ', this.state.errors)\n      //     console.log(\"raise error here ===> \",raiseError)\n      //     if (document.documentName == element) {\n      //       this.state.errors.additionalDocuments = '';\n      //       raiseError = false\n      //     }\n      //     else if (element == 'Letter From HR' && raiseError) {\n      //       this.state.errors.additionalDocuments = 'Please upload appropriate Documents to continue';\n      //     }\n      //   })\n      // })\n      // }\n    }\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    let value = target.value;\n    const name = target.name;\n    console.log('value ', value, ' name ', name);\n    this.setState({\n      \"disabled\": false\n    }); //   this.setState({\n    //     errors: {\n    //       ...this.state.errors,\n    //       [name] : {\n    //         'label' : \"\" ,\n    //         'value' : false\n    //       }\n    //     }\n    // });\n\n    this.setState({\n      placementData: { ...this.state.placementData,\n        [name]: value\n      }\n    });\n\n    if (this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\n      this.validateEntrepreneurship(name, value);\n      console.log(this.state.errors);\n    } else if (this.state.placementData.interviewStatus === 'Placed') {\n      this.validatePlacedAndOfferNotTaken(name, value);\n      console.log(this.state.errors);\n    } else if (this.state.placementData.interviewStatus === 'Not Placed') {\n      this.validateNotPlaced(name, value);\n      console.log(this.state.errors);\n    }\n  }\n\n  CheckForDocuments(docName) {\n    this.state.documents.map((element, id) => {\n      if (element.documentType == docName) return true;else return false;\n    });\n  }\n\n  fetchPlacementdetailsFouUser(engagementId) {\n    let placementInfo = []; // console.log('point here')\n\n    fetchPlacementDetailsByEngagementId(engagementId).then(jsondata => {\n      // alert(JSON.stringify(jsondata));\n      let placementDetailsOfUser = JSON.parse(jsondata.data);\n\n      for (var i = 0; i < placementDetailsOfUser.length; i++) {\n        var details = {\n          // 'employer_name':placementDetailsOfUser[i].employerName,\n          'interview_status': placementDetailsOfUser[i].interviewStatus,\n          'Reason': placementDetailsOfUser[i].reason,\n          // 'annual_sal': placementDetailsOfUser[i].annualSal,\n          'action': /*#__PURE__*/React.createElement(EditIcon, {\n            style: {\n              color: \"blue\"\n            },\n            onClick: this.handleEditChange.bind(this, placementDetailsOfUser[i]),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 21\n            }\n          })\n        }; // console.log('placement details here ===> ', placementDetailsOfUser[i])\n\n        placementInfo.push(details);\n      } // console.log('plcament Info ===> ', placementInfo)\n\n\n      this.setState({\n        info: placementInfo\n      });\n    });\n  }\n\n  getCenterMasters(ids) {\n    //** Fetch employer details based on placement partner*//\n    fetchEmployerDetails('Active Partner', '%Placement Partner%').then(jsondata => {\n      console.log(\"employer data ===> \", jsondata);\n\n      if (jsondata.appError == null) {\n        let jsonObjects = JSON.parse(jsondata.data);\n        jsonObjects.map(item => {\n          this.state.center.push({\n            label: item.accountName,\n            value: item.id\n          });\n        });\n      }\n\n      return true;\n    }).then(response => response);\n  }\n\n  handleAddressInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      address: { ...this.state.address,\n        [name]: value\n      }\n    });\n    this.validate(name, value);\n  }\n\n  handleAddressSelectChange(selectname, event) {\n    this.setState({\n      address: { ...this.state.address,\n        [selectname]: event\n      }\n    });\n    this.validateAddress(selectname, event);\n  }\n\n  handleTypeOfProofSelectChange(selectname, event) {\n    let newVal = event;\n    let stateVal = this.state.documentType;\n    stateVal.indexOf(newVal) === -1 ? stateVal.push(newVal) : stateVal.length === 1 ? stateVal = [] : stateVal.splice(stateVal.indexOf(newVal), 1);\n    this.setState({\n      documentType: stateVal\n    });\n  }\n\n  getPincodeData(selectname, event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      address: { ...this.state.address,\n        [name]: value\n      }\n    });\n    this.validateAddress(name, value);\n\n    if (value.length == 6) {\n      fetchAddressDetailsBasedOnPincode(value).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data);\n        let taluk = [];\n        let pincode = [];\n        let cityVillage = [];\n        let states = [];\n        let district = [];\n        this.formData.village.length = 0;\n        this.formData.pincodes.length = 0;\n        this.formData.city.length = 0;\n        this.formData.state.length = 0;\n        this.formData.district.length = 0;\n        jsonobjects.map(item => {\n          cityVillage.push({\n            label: item.cityVillage,\n            value: item.id\n          });\n        });\n        cityVillage = underscore.uniq(cityVillage, true, \"label\");\n        cityVillage.map(item => {\n          this.formData.village.push({\n            label: item.label,\n            value: item.label.toString()\n          });\n        });\n        this.setState({\n          village: this.formData.village\n        });\n        jsonobjects.map(item => {\n          taluk.push({\n            label: item.taluk,\n            value: item.id\n          });\n        });\n        taluk = underscore.uniq(taluk, true, \"label\");\n        taluk.map(item => {\n          this.formData.city.push({\n            label: item.label,\n            value: item.label.toString()\n          });\n        });\n        this.setState({\n          city: this.formData.city\n        });\n        jsonobjects.map(item => {\n          states.push({\n            label: item.state,\n            value: item.id\n          });\n        });\n        states = underscore.uniq(states, true, \"label\");\n        states.map(item => {\n          this.formData.state.push({\n            label: item.label,\n            value: item.value.toString()\n          });\n        });\n        this.setState({\n          state: this.formData.state\n        }, () => {\n          /*console.log(this.state.state)*/\n        });\n        jsonobjects.map(item => {\n          district.push({\n            label: item.district,\n            value: item.id\n          });\n        });\n        district = underscore.uniq(district, true, \"label\");\n        district.map(item => {\n          this.formData.district.push({\n            label: item.label,\n            value: item.value.toString()\n          });\n        });\n        this.setState({\n          district: this.formData.district\n        });\n      });\n    }\n  }\n\n  submitPlacementDetails() {\n    this.getDocuments();\n\n    if (this.state.placementData.interviewStatus === 'Placed' || this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\n      // console.log(\" checkpoint 2 \")\n      saveAddressDetails(JSON.stringify(this.state.address)).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data); //alert(jsonobjects[0].id);\n\n        this.setState({\n          placementData: { ...this.state.placementData,\n            'addressId': jsonobjects[0].id\n          }\n        }, () => {\n          this.saveAllDetails();\n        });\n        this.setState({\n          alertDialogFlag: false\n        });\n        alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"green\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1008,\n            columnNumber: 38\n          }\n        }, \"Placement Details Saved Sucessfully\");\n        this.setState({\n          alertDialogFlag: true\n        });\n      });\n    } else {\n      this.saveAllDetails();\n    }\n  }\n\n  saveAllDetails() {\n    // console.log(\" checkpoint 3 \")\n    // console.log(this.state.placementData)\n    savePlacementDetails(this.state.placementData).then(jsondata => {\n      this.fetchPlacementdetailsFouUser(this.state.engagementId);\n\n      if (jsondata.appError == null || jsondata.status == 'success') {\n        let jsonobjects = JSON.parse(jsondata.data); //alert(JSON.stringify(jsonobjects));  \n        // console.log(jsonobjects);\n\n        this.setState({\n          alertDialogFlag: false\n        });\n        alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"green\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1028,\n            columnNumber: 38\n          }\n        }, \"Placement Details Saved Sucessfully\");\n        this.setState({\n          alertDialogFlag: true\n        });\n      } else {\n        console.log('error', this.state.errors);\n        this.setState({\n          alertDialogFlag: false\n        });\n        alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1035,\n            columnNumber: 38\n          }\n        }, \"Please upload the appropriate documents for saving the placement details!\");\n        this.setState({\n          alertDialogFlag: true\n        });\n      }\n    });\n  }\n\n  render() {\n    const columns = [{\n      label: 'Interview Status',\n      name: 'interview_status',\n      headerStyle: {\n        color: '#FF9800'\n      }\n    }, {\n      label: 'Reason',\n      name: 'Reason',\n      headerStyle: {\n        color: '#FF9800'\n      }\n    }, // { label: 'Annual Salary', name: 'annual_sal', headerStyle: { color: '#FF9800' } },\n    {\n      label: 'Action',\n      name: 'action',\n      headerStyle: {\n        color: '#FF9800'\n      }\n    }];\n    const options = {\n      filterType: \"dropdown\",\n      responsive: \"stacked\",\n      sortDirection: \"desc\",\n      selectableRows: 'single',\n      disableToolbarSelect: true,\n      rowsPerPage: 10,\n      selectableRowsOnClick: true\n    };\n    let button;\n    button = /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      id: \"btn\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 14\n      }\n    }, \"  \", /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      size: \"small\",\n      color: \"primary\",\n      disabled: this.state.buttonStatus == \"Enrolled\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 98\n      }\n    }, \"Save\"));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.mySubmitHandler,\n      method: \"post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"roleBasedDisable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      name: \"interviewStatus\",\n      id: \"interviewStatus\",\n      label: \"Interview Status\",\n      onChange: this.handlePlacementSelectChange.bind(this, 'interviewStatus'),\n      value: this.state.placementData.interviewStatus || '',\n      helperText: this.state.errors.interviewStatus,\n      error: this.state.errors.interviewStatus === '' ? false : true,\n      options: this.state.intStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: this.state.placementData.interviewStatus === \"Placed\" ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacementDetailsSubPlaced, {\n      props: this.props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"entrepreneurship\",\n      style: {\n        display: this.state.placementData.interviewStatus === \"Entrepreneurship/ Self Employed\" ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacementDetailsSubEntNP, {\n      props: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: this.state.placementData.interviewStatus === \"Not Placed\" ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlacementDetailsSubNP, {\n      props: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 27\n      }\n    })))), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.uploadDocuments,\n      method: \"post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1473,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      style: {\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1475,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1476,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        width: \"25%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477,\n        columnNumber: 17\n      }\n    }, \"Type of Document\"), /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        width: \"20%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1479,\n        columnNumber: 17\n      }\n    }, \"Browse and Upload\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"GrayText\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483,\n        columnNumber: 15\n      }\n    }, \"*Note : After Uploading the document if the checkbox still does not works, return to the screen after visiting some other screen!\"), /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1487,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"typeOfDocument\",\n      id: \"typeOfDocument\",\n      options: this.state.typeOfDocumentData,\n      onChange: this.handleSelectChangeDoc.bind(this, 'typeOfDocument'),\n      value: this.state.typeOfDocument || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1489,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1497,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DropzoneArea, {\n      name: \"file\",\n      id: \"file\",\n      maxFileSize: 200000,\n      filesLimit: 1,\n      showFileNames: true,\n      onChange: this.onFileChangeHandler // key={this.state.clearDropzoneArea}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      disabled: this.state.file == null || this.state.typeOfDocument == '' ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 13\n      }\n    }, \"Upload Document\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(MUIDataTable, {\n      id: \"dtb\",\n      title: \"List Of Placement Details\",\n      label: \"List of Placement Details \",\n      columns: columns,\n      data: this.state.info,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1518,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 9\n      }\n    }, \"List Of Uploaded Document\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521,\n        columnNumber: 9\n      }\n    }), this.state.documents != \"\" && /*#__PURE__*/React.createElement(Paper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 19\n      }\n    }, \"Created On\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1530,\n        columnNumber: 19\n      }\n    }, \"Document Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531,\n        columnNumber: 19\n      }\n    }, \"File Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532,\n        columnNumber: 19\n      }\n    }, \"Download\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533,\n        columnNumber: 19\n      }\n    }, \"Delete\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 15\n      }\n    }, this.state.documents.map(row => /*#__PURE__*/React.createElement(TableRow, {\n      key: row.basicDocId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1538,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539,\n        columnNumber: 21\n      }\n    }, row.createdOn), /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 21\n      }\n    }, row.documentName), /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546,\n        columnNumber: 21\n      }\n    }, row.documentPath.split(\"/\")[1]), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      name: \"download\",\n      id: \"download\",\n      onClick: this.downloadDocuments.bind(this, row.basicDocId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 23\n      }\n    }, \"Download\")), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      name: \"delete\",\n      id: \"delete\",\n      onClick: this.deleteDocument.bind(this, row.basicDocId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 23\n      }\n    }, \"Delete\"))))))), this.state.alertDialogFlag && /*#__PURE__*/React.createElement(AlertDialog, {\n      message: alertDialogOptions.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1573,\n        columnNumber: 43\n      }\n    }));\n  }\n\n}\n\nexport default PlacementDetails;","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/PlacementDetails.js"],"names":["React","Component","render","SingleSelect","callMerge","UserContext","FormControl","InputLabel","FormControlLabel","Input","Grid","RadioGroup","Radio","TextField","Button","isNotEmpty","isNotZero","validateEmail","validateContact","roleBasedReadonly","checkButton","AlertDialog","Paper","savePlacementDetails","deleteDocumentById","fetchUserDocumentsByUserIdAndTypeOfDocument","fectAddressDetailsByAddressID","fetchAddressDetailsBasedOnPincode","fetchPlacementDetailsByEngagementId","fetchAllCenter","saveAddressDetails","uploadDocument","fetchEmployerDetails","MUIDataTable","AddressForPlacement","underscore","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","EditIcon","serviceEndPoint","Checkbox","Label","error","PlacementDetailsSubPlaced","PlacementDetailsSubEntNP","PlacementDetailsSubNP","alertDialogOptions","message","PlacementDetails","constructor","props","deleteDocument","basicDocId","then","jsondata","status","data","JSON","parse","getDocuments","setState","alertDialogFlag","color","handleCheckboxChange","event","target","name","idName","id","console","log","validateAppropriateCheckBoxes","placementData","state","checked","errors","documents","length","docList","map","element","ans","CheckForDocuments","documentsUploaded","mySubmitHandler","preventDefault","disabled","interviewStatus","validate","validatePlacedAndOfferNotTaken","empId","domainName","spocName","designation","spocPhoneNumber","spocEmailId","monthlyGrossSal","accommodationProvided","foodProvided","offerDate","offerStatus","joined","reasonJobRejected","otherReasonInBrief","validateAddress","address","pincode","villageName","cityName","district","errorsExist","Object","values","forEach","val","submitPlacementDetails","validateNotPlaced","reason","reasonForNoOpportunity","validateEntrepreneurship","noOfPeopleEmployed","familyBusiness","availedLoan","value","joiningPin","joiningCity","addressId","reasonForRejection","village","downloadDocuments","formData","FormData","append","fetch","documentServiceEndPoint","method","headers","token","body","response","json","jsonobjects","url","downloadDocument","documentPath","window","open","uploadDocuments","e","levelOfDocument","localThis","reader","FileReader","readAsDataURL","file","onload","document","result","dbUserId","engagementId","typeOfDocument","onFileChangeHandler","files","buttonStatus","flag","info","createdBy","userid","updatedBy","isActive","center","centerData","intStatus","label","notPlacedReason","notAvlOppReason","notInterestedReason","domains","yesOrNo","OfferStatus","typeOfDocumentData","entityId","addressLine1","addressLine2","pincodes","city","getCenterMasters","handleInputChange","bind","undefined","fetchPlacementdetailsFouUser","componentDidMount","handleEditChange","obj","authenticationAndConsent","getAddressDetailsByAddressID","addressDetails","getAddressdataBasedOnPin","taluk","cityVillage","states","item","push","uniq","toString","handleSelectChangeDoc","selectname","handlePlacementSelectChange","handleSelectChange","docName","documentType","placementInfo","placementDetailsOfUser","i","details","ids","appError","jsonObjects","accountName","handleAddressInputChange","handleAddressSelectChange","handleTypeOfProofSelectChange","newVal","stateVal","indexOf","splice","getPincodeData","stringify","saveAllDetails","columns","headerStyle","options","filterType","responsive","sortDirection","selectableRows","disableToolbarSelect","rowsPerPage","selectableRowsOnClick","button","width","display","row","createdOn","documentName","split"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { render } from \"react-dom\";\r\nimport './../App.css';\r\nimport './../assets/css/login-style.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport callMerge from 'material-ui/svg-icons/communication/call-merge';\r\nimport UserContext from '../components/GolbalContext'\r\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { isNotEmpty, isNotZero, validateEmail, validateContact } from './../util/validation';\r\nimport { roleBasedReadonly, checkButton } from '../util/validation';\r\nimport AlertDialog from '../util/AlertDialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { savePlacementDetails, deleteDocumentById, fetchUserDocumentsByUserIdAndTypeOfDocument, fectAddressDetailsByAddressID, fetchAddressDetailsBasedOnPincode, fetchPlacementDetailsByEngagementId, fetchAllCenter, saveAddressDetails, uploadDocument, fetchEmployerDetails } from '../util/api';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport AddressForPlacement from \"./AddressForPlacement\";\r\nimport underscore from 'underscore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { serviceEndPoint } from '../util/serviceEndPoint';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Label } from 'recharts';\r\nimport error from 'material-ui/svg-icons/alert/error';\r\nimport PlacementDetailsSubPlaced from './PlacementDetailsSubPlaced';\r\nimport PlacementDetailsSubEntNP from './PlacementDetailsSubEntNP';\r\nimport PlacementDetailsSubNP from './PlacementDetailsSubNP';\r\n\r\nconst alertDialogOptions = {\r\n  message: ''\r\n}\r\n\r\nclass PlacementDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props.status);\r\n    /*State starts here*/\r\n    this.state = {\r\n      buttonStatus: props.status,\r\n      engagementId: props.engagementId, alertDialogFlag: false, disabled: false, flag: \"0\",\r\n      errors: { /*Placed Data here*/\r\n        domainName: '', spocName: '', spocPhoneNumber: '', spocEmailId: '', monthlyGrossSal: '',\r\n        foodProvided: '', accommodationProvided: '', offerDate: '', offerStatus: '', joined: '',\r\n        reason: '', otherReasonInBrief: '',\r\n        /*Address here*/\r\n        joiningPin: '', joiningCity: '', addressId: '',\r\n        /*Entrepreneurship/ Self Employed*/\r\n        noOfPeopleEmployed: '', familyBusiness: '', availedLoan: '',\r\n        //domainName: '', monthlyGrossSal: '0'\r\n        /*Not Placed*/\r\n        reasonForNoOpportunity: '',\r\n        //reason: '', otherReasonInBrief: '',\r\n        /*General*/\r\n        empId: 0, interviewStatus: '',},\r\n      dbUserId: props.id, info: [],\r\n      placementData: {\r\n        /*Placed Data here*/\r\n        domainName: '', spocName: '', spocPhoneNumber: '', spocEmailId: '', monthlyGrossSal: '0',\r\n        foodProvided: '', accommodationProvided: '', offerDate: '', offerStatus: '', joined: '',\r\n        reason: '', otherReasonInBrief: '',\r\n        /*Address here*/\r\n        joiningPin: '', joiningCity: '', addressId: '',\r\n        /*Entrepreneurship/ Self Employed*/\r\n        noOfPeopleEmployed: '0', familyBusiness: '', availedLoan: '',\r\n        //domainName: '', monthlyGrossSal: '0'\r\n        /*Not Placed*/\r\n        reasonForNoOpportunity: '',\r\n        //reason: '', otherReasonInBrief: '',\r\n        /*General*/\r\n        empId: 0, interviewStatus: '',\r\n        createdBy: UserContext.userid, updatedBy: UserContext.userid, engagementId: props.engagementId, dbUserId: props.id, isActive: \"Y\",\r\n      },\r\n      center: [], centerData: [], documents: [],\r\n      info: [{ \"createdBy\": UserContext.userid, \"updatedBy\": UserContext.userid, \"isActive\": \"Y\", \"dbUserId\": props.id }],\r\n      intStatus: [\r\n        { value: 'Placed', label: 'Placed' },\r\n        { value: 'Entrepreneurship/ Self Employed', label: 'Entrepreneurship/ Self Employed' },\r\n        { value: 'Not Placed', label: 'Not Placed' },\r\n      ],\r\n      notPlacedReason: [\r\n        { value: 'Rejected By Employer', label: 'Rejected By Employer' },\r\n        { value: 'Not Avaliable Opportunity', label: 'Not Avaliable Opportunity' }\r\n      ],\r\n      notAvlOppReason: [\r\n        { value: 'No Employment Opportuntities', label: 'No Employment Opportuntities' },\r\n        { value: 'Others', label: 'Others' }\r\n      ],\r\n      notInterestedReason: [\r\n        { value: 'Marriage', label: 'Marriage' },\r\n        { value: 'Migration', label: 'Migration' },\r\n        { value: 'Less Salary', label: 'Less Salary' },\r\n        { value: 'Others', label: 'Others' },\r\n      ],\r\n      domains: [\r\n        { value: 'Agriculture', label: 'Agriculture' },\r\n        { value: 'Apparel, made ups and Furnishing', label: 'Apparel, made ups and Furnishing' },\r\n        { value: 'Automotive', label: 'Automotive' },\r\n        { value: 'Beauty and Wellness', label: 'Beauty and Wellness' },\r\n        { value: 'BFSI', label: 'BFSI' },\r\n        { value: 'Construction', label: 'Construction' },\r\n        { value: 'Electronics', label: 'Electronics' },\r\n        { value: 'Furniture and Fittings', label: 'Furniture and Fittings' },\r\n        { value: 'Healthcare', label: 'Healthcare' },\r\n        { value: 'IT-ITeS', label: 'IT-ITeS' },\r\n        { value: 'Management, Entrepreneurship and Preofessional Courses', label: 'Management, Entrepreneurship and Preofessional Courses' },\r\n        { value: 'Retail', label: 'Retail' },\r\n        { value: 'Green Jobs', label: 'Green Jobs' },\r\n        { value: 'Telecom', label: 'Telecom' },\r\n        { value: 'Tourism and Hospitality', label: 'Tourism and Hospitality' }\r\n      ],\r\n      yesOrNo: [\r\n        { value: 'Yes', label: 'Yes' },\r\n        { value: 'No', label: 'No' }\r\n      ],\r\n      OfferStatus: [\r\n        { value: 'Accepted', label: 'Accepted' },\r\n        { value: 'Rejected', label: 'Rejected' }\r\n      ],\r\n      typeOfDocument: null, file: null,\r\n      typeOfDocumentData: [\r\n        { value: 'Offer Letter', label: 'Offer Letter' },\r\n        { value: 'Joining Letter', label: 'Joining Letter' },\r\n        { value: 'Pay Slip', label: 'Pay Slip' },\r\n        { value: 'Bank Statement', label: 'Bank Statement' },\r\n        { value: 'Email From Employer', label: 'Email From Employer' },\r\n        { value: 'Workplace Picture', label: 'Workplace Picture' },\r\n        { value: 'ID card', label: 'ID card' },\r\n        { value: 'Letter from HR', label: 'Letter from HR' },\r\n        { value: 'Student Declaration', label: 'Student Declaration' },\r\n        { value: 'Pic Of Business', label: 'Pic Of Business' },\r\n        { value: 'Registration Certificate', label: 'Registration Certificate' },\r\n        { value: 'MSME Registration Certificate', label: 'MSME Registration Certificate' },\r\n        { value: 'Three Party Certificate', label: 'Three Party Certificate' }\r\n      ],\r\n      address: { entityId: props.engagementId, createdBy: UserContext.userid, 'isActive': 'Y', 'type': 'PD',\r\n                 'entityType': 'S', pincode: \"\", addressLine1: \"\", addressLine2: \"\", district: \"\", state: \"\",\r\n                  cityName: \"\", villageName: \"\" },\r\n      state: [], district: [], pincodes: [], city: [], village: [], engagementId: props.engagementId\r\n    };\r\n    /*State ends here*/\r\n    this.formData = { state: [], district: [], pincodes: [], city: [], village: [] };\r\n    /*function call for masters*/\r\n    this.getCenterMasters();\r\n    this.getDocuments();\r\n    /*binding for functions*/\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.validateAppropriateCheckBoxes = this.validateAppropriateCheckBoxes.bind(this);\r\n    this.CheckForDocuments = this.CheckForDocuments.bind(this);\r\n    /*fetch placement details if already present for the existing user*/\r\n    if (props.id != null && props.id != undefined) {\r\n      this.fetchPlacementdetailsFouUser(props.engagementId);\r\n    }\r\n\r\n  }\r\n  /*Constructor ends here*/\r\n\r\n  componentDidMount() {\r\n    roleBasedReadonly();\r\n  }\r\n\r\n  getDocuments() {\r\n    //**Set the state as empty or null initially to be refilled back so as not to create multiple copies of the same user Docs */\r\n    this.setState({ documents: [] })\r\n    fetchUserDocumentsByUserIdAndTypeOfDocument(this.state.dbUserId, 'PD').then((jsondata) => {\r\n      let jsonobjects = JSON.parse(jsondata.data);\r\n      console.log(jsonobjects)\r\n      this.setState({ documents: [...this.state.documents, ...jsonobjects] })\r\n    });\r\n  }\r\n\r\n  deleteDocument = (basicDocId) => {\r\n    //**For deleting a particular element if deleted then check for the updated row */\r\n    deleteDocumentById(basicDocId).then((jsondata) => {\r\n      if (jsondata.status == \"success\") {\r\n        let data = JSON.parse(jsondata.data)\r\n        //** uncomment the below if an alert for deleting the document is required */\r\n        // this.setState({ alertDialogFlag: false });\r\n        //       alertDialogOptions.message = <span style={{ color: \"green\" }}>Document is Deleted Sucessfully</span>;\r\n        // this.setState({ alertDialogFlag: true });\r\n        this.getDocuments();\r\n      }\r\n      else {\r\n        this.setState({ alertDialogFlag: false });\r\n        alertDialogOptions.message = <span style={{ color: \"red\" }}>Document cannot be deleted, please try again!</span>;\r\n        this.setState({ alertDialogFlag: true });\r\n      }\r\n    })\r\n  }\r\n\r\n  handleEditChange(obj) {\r\n    obj.authenticationAndConsent = (obj?.authenticationAndConsent == \"true\") ? true : false;\r\n    obj.documentsUploaded = (obj?.documentsUploaded == \"true\") ? true : false;\r\n    this.setState({\r\n      placementData: obj\r\n    }, () => {\r\n      if (this.state.placementData.interviewStatus === 'Placed'\r\n        || this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\r\n        this.getAddressDetailsByAddressID(this.state.placementData.addressId)\r\n        if (this.state.placementData.interviewStatus === 'Placed') {\r\n          // console.log('check the boxes here placed')\r\n          // if (this.state.placementData.documentsUploaded) {\r\n          //   document.getElementById('documentsUploadedPlaced').click();\r\n          // }\r\n          // if (this.state.placementData.authenticationAndConsent) {\r\n          //   document.getElementById('authenticationAndConsent').click();\r\n          // }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getAddressDetailsByAddressID(addressId) {\r\n    fectAddressDetailsByAddressID(addressId).then((jsondata) => {\r\n      let addressDetails = JSON.parse(jsondata.data);\r\n      this.setState({\r\n        address: addressDetails[0]\r\n      }, () => { this.getAddressdataBasedOnPin(this.state.address.pincode) });\r\n    })\r\n  }\r\n\r\n  getAddressdataBasedOnPin(pincode) {\r\n    fetchAddressDetailsBasedOnPincode(pincode).then((jsondata) => {\r\n      let jsonobjects = JSON.parse(jsondata.data);\r\n      let taluk = [];\r\n      let pincode = [];\r\n      let cityVillage = [];\r\n      let states = [];\r\n      let district = [];\r\n\r\n      this.formData.village.length = 0;\r\n      this.formData.pincodes.length = 0;\r\n      this.formData.city.length = 0;\r\n      this.formData.state.length = 0;\r\n      this.formData.district.length = 0;\r\n\r\n      jsonobjects.map(item => { cityVillage.push({ label: item.cityVillage, value: item.id }) });\r\n      cityVillage = underscore.uniq(cityVillage, true, \"label\");\r\n      cityVillage.map(item => { this.formData.village.push({ label: item.label, value: (item.label).toString() }) });\r\n      this.setState({ village: this.formData.village });\r\n\r\n      jsonobjects.map(item => { taluk.push({ label: item.taluk, value: item.id }) });\r\n      taluk = underscore.uniq(taluk, true, \"label\");\r\n      taluk.map(item => { this.formData.city.push({ label: item.label, value: (item.label).toString() }) });\r\n      this.setState({ city: this.formData.city });\r\n\r\n      jsonobjects.map(item => { states.push({ label: item.state, value: item.id }) });\r\n      states = underscore.uniq(states, true, \"label\");\r\n      states.map(item => { this.formData.state.push({ label: item.label, value: (item.value).toString() }) });\r\n      this.setState({ state: this.formData.state }, () => { /*console.log(this.state.state)*/ });\r\n\r\n      jsonobjects.map(item => { district.push({ label: item.district, value: item.id }) });\r\n      district = underscore.uniq(district, true, \"label\");\r\n      district.map(item => { this.formData.district.push({ label: item.label, value: (item.value).toString() }) });\r\n      this.setState({ district: this.formData.district });\r\n    })\r\n  }\r\n\r\n\r\n  handleSelectChangeDoc(selectname, event) {\r\n    this.setState({ [selectname]: event });\r\n  }\r\n\r\n  handlePlacementSelectChange(selectname, event) {\r\n    this.setState({\r\n      placementData: {\r\n        ...this.state.placementData,\r\n        [selectname]: event\r\n      }\r\n    });\r\n    this.validate(selectname, event);\r\n  }\r\n\r\n\r\n  handleSelectChange(selectname, event) {\r\n    let value = 0;\r\n    let target = null;\r\n    try {\r\n      target = event.target;\r\n      value = target.value;\r\n    }\r\n    catch (e) {\r\n      value = event;\r\n    }\r\n\r\n    this.setState({\r\n      \"disabled\": false\r\n    });\r\n\r\n    this.setState({\r\n      placementData: {\r\n        ...this.state.placementData,\r\n        [selectname]: event\r\n      }\r\n    })\r\n\r\n    if (this.state.placementData.interviewStatus === 'Not Placed') {\r\n      this.validateNotPlaced(selectname, event);\r\n    }\r\n\r\n    else if (this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\r\n      this.validateEntrepreneurship(selectname, event);\r\n      let typeOfDocumentData = [\r\n      { value: 'Pic Of Business', label: 'Pic Of Business' },\r\n      { value: 'MSME Registration Certificate', label: 'MSME Registration Certificate' },\r\n      { value: 'Registration Certificate', label: 'Registration Certificate' }\r\n      ];\r\n      this.setState({\r\n        typeOfDocumentData\r\n      });\r\n    }\r\n\r\n    else if (this.state.placementData.interviewStatus === 'Placed' ) {\r\n      this.validatePlacedAndOfferNotTaken(selectname, event);\r\n     \r\n      let typeOfDocumentData = [{ value: 'Offer Letter', label: 'Offer Letter' },\r\n      { value: 'Joining Letter', label: 'Joining Letter' },\r\n      { value: 'Pay Slip', label: 'Pay Slip' },\r\n      { value: 'Bank Statement', label: 'Bank Statement' },\r\n      { value: 'Email From Employer', label: 'Email From Employer' },\r\n      { value: 'Workplace Picture', label: 'Workplace Picture' },\r\n      { value: 'ID card', label: 'ID card' },\r\n      { value: 'Letter from HR', label: 'Letter from HR' }];\r\n\r\n      this.setState({\r\n        typeOfDocumentData\r\n      });\r\n      console.log('point 0.2')\r\n      // if (selectname == \"joined\" && event == \"Yes\") {\r\n        // let DocToBeChecked = ['Joining Letter', 'Pay Slip', 'Bank Statement', 'Email From Employer', 'Workplace Picture', 'ID card', 'Letter From HR'];\r\n        // let raiseError = true;\r\n        // DocToBeChecked.map((element, id) => {\r\n        //   console.log('point 0.4')\r\n        //   this.state.documents.map((document, id) => {\r\n        //     console.log('pass by me everytime')\r\n        //     console.log('errors here ===> ', this.state.errors)\r\n        //     console.log(\"raise error here ===> \",raiseError)\r\n        //     if (document.documentName == element) {\r\n        //       this.state.errors.additionalDocuments = '';\r\n        //       raiseError = false\r\n        //     }\r\n        //     else if (element == 'Letter From HR' && raiseError) {\r\n        //       this.state.errors.additionalDocuments = 'Please upload appropriate Documents to continue';\r\n        //     }\r\n        //   })\r\n        // })\r\n      // }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleInputChange(event) {\r\n   \r\n    const target = event.target;\r\n    let value = target.value;\r\n    const name = target.name;\r\n    console.log('value ', value, ' name ', name)\r\n    this.setState({\r\n      \"disabled\": false\r\n    });\r\n\r\n    //   this.setState({\r\n    //     errors: {\r\n    //       ...this.state.errors,\r\n    //       [name] : {\r\n    //         'label' : \"\" ,\r\n    //         'value' : false\r\n    //       }\r\n    //     }\r\n    // });\r\n \r\n    this.setState({\r\n      placementData: {\r\n        ...this.state.placementData,\r\n        [name]: value\r\n      }\r\n    });\r\n\r\n    if (this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\r\n      this.validateEntrepreneurship(name, value);\r\n      console.log(this.state.errors)\r\n    }\r\n\r\n    else if (this.state.placementData.interviewStatus === 'Placed') {\r\n      this.validatePlacedAndOfferNotTaken(name, value);\r\n      console.log(this.state.errors)\r\n    }\r\n\r\n    else if (this.state.placementData.interviewStatus === 'Not Placed'){\r\n      this.validateNotPlaced(name, value);\r\n      console.log(this.state.errors)\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange = (event) => {\r\n    let target = event.target;\r\n    let name = target.name;\r\n    let idName = target.id;\r\n    console.log(idName)\r\n\r\n    // if (event.target.name == 'documentsUploaded') {\r\n    //   this.state.errors.documentsUploaded = '';\r\n    // }\r\n    // else if (name == 'authenticationAndConsent') {\r\n    //   this.state.errors.documentsUploaded = '';\r\n    //   this.state.errors.authenticationAndConsent = '';\r\n    // }\r\n    // else if (name == 'familyConsent') {\r\n    //   this.state.errors.familyConsent = '';\r\n    // }\r\n\r\n    this.validateAppropriateCheckBoxes(idName)\r\n\r\n    this.setState({\r\n      placementData: {\r\n        ...this.state.placementData,\r\n        [event.target.name]: event.target.checked\r\n      }\r\n    })\r\n\r\n  };\r\n\r\n  CheckForDocuments(docName) {\r\n    this.state.documents.map((element, id) => {\r\n      if (element.documentType == docName)\r\n        return true;\r\n      else\r\n        return false;\r\n    })\r\n  }\r\n\r\n  validateAppropriateCheckBoxes = (name) => {\r\n    console.log('point 2')\r\n    console.log('here')\r\n    let errors = this.state.errors;\r\n    console.log(this.state.documents)\r\n    //*Check if any documents are uploaded if not send to the else part if yes check the type and then check the appropriate documents*//\r\n    if (this.state.documents.length > 0) {\r\n\r\n      if (name == \"documentsUploaded\") {\r\n        console.log('point 3')\r\n        // console.log('placed documents to be checked here')\r\n        // this.state.documents.map((element, id) => {\r\n        //   // console.log(element)\r\n        //   var isPresent = (element.documentType == \"Offer Letter\" || element.documentType == \"Joining Letter\" || element.documentType == \"Pay Slip\" || element.documentType == \"Bank Statement\" || element.documentType == \"Email From Employer\" || element.documentType == \"Workplace Picture\" || element.documentType == \"ID card\" || element.documentType == \"Letter from HR\")\r\n        //   let errors = this.state.errors;\r\n        //   if (isPresent) {\r\n        //     errors.documentsUploaded = '';\r\n        //   }\r\n        //   else {\r\n        //     errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\r\n        //   }\r\n        // })\r\n        let docList = ['Offer Letter', 'Joining Letter', 'Pay Slip', 'Bank Statement', 'Email From Employer', 'Workplace Picture', 'ID card', 'Letter from HR'];\r\n        docList.map((element) => {\r\n          let ans = this.CheckForDocuments(element);\r\n          console.log(\"some value here ===> \", ans)\r\n          if (this.CheckForDocuments(element)) {\r\n            this.state.errors.documentsUploaded = '';\r\n          }\r\n          else if ((element == 'Letter from HR')) {\r\n            console.log('reached here!!!')\r\n            // this.state.errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\r\n          }\r\n        })\r\n      }\r\n\r\n      else if (name == \"authenticationAndConsent\") {\r\n        console.log('point 4')\r\n        // console.log('placed documents to be checked here')\r\n        // if (errors.documentsUploaded) {\r\n        //   errors.authenticationAndConsent = 'Please upload the document before clicking the checkbox!';\r\n        // }\r\n        // else {\r\n        //   errors.authenticationAndConsent = '';\r\n        // }\r\n\r\n      }\r\n\r\n      else if (name == \"documentsUploadedEntrepreneurship\") {\r\n        console.log('point 5')\r\n        // console.log('entrepreneurship documents to be checked here')\r\n\r\n        // this.state.documents.map((element, id) => {\r\n        //   // console.log(element)\r\n        //   var isPresent = (element.documentType == \"Registration Certificate\")\r\n        //   let errors = this.state.errors;\r\n        //   if (isPresent) {\r\n        //     errors.documentsUploaded = '';\r\n        //   }\r\n        //   else {\r\n        //     errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\r\n        //   }\r\n        // })\r\n        if (this.CheckForDocuments('Registration Certificate') || this.CheckForDocuments('Pic Of Business') || this.CheckForDocuments('MSME Registration Certificate')) {\r\n          errors.documentsUploaded = '';\r\n        }\r\n        else {\r\n          // errors.documentsUploaded = 'Please upload the document before clicking the checkbox!';\r\n        }\r\n      }\r\n\r\n    }\r\n    else {\r\n      console.log('point 6')\r\n      // alert('Please upload the document before clicking the checkbox!');\r\n      // errors.name = 'Please upload documents before proceeding here!';\r\n    }\r\n    this.setState({ errors });\r\n\r\n  }\r\n\r\n\r\n  fetchPlacementdetailsFouUser(engagementId) {\r\n\r\n    let placementInfo = [];\r\n    // console.log('point here')\r\n    fetchPlacementDetailsByEngagementId(engagementId).then((jsondata) => {\r\n      // alert(JSON.stringify(jsondata));\r\n      let placementDetailsOfUser = JSON.parse(jsondata.data);\r\n      for (var i = 0; i < placementDetailsOfUser.length; i++) {\r\n        var details =\r\n        {   // 'employer_name':placementDetailsOfUser[i].employerName,\r\n          'interview_status': placementDetailsOfUser[i].interviewStatus,\r\n          'Reason': placementDetailsOfUser[i].reason,\r\n          // 'annual_sal': placementDetailsOfUser[i].annualSal,\r\n          'action': <EditIcon style={{ color: \"blue\" }} onClick={this.handleEditChange.bind(this, placementDetailsOfUser[i])} />\r\n        };\r\n        // console.log('placement details here ===> ', placementDetailsOfUser[i])\r\n        placementInfo.push(details);\r\n      }\r\n      // console.log('plcament Info ===> ', placementInfo)\r\n      this.setState({\r\n        info: placementInfo\r\n      });\r\n    })\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  getCenterMasters(ids) {\r\n    //** Fetch employer details based on placement partner*//\r\n    fetchEmployerDetails('Active Partner', '%Placement Partner%').then((jsondata) => {\r\n      console.log(\"employer data ===> \",jsondata)\r\n      if (jsondata.appError == null) {\r\n        let jsonObjects = JSON.parse(jsondata.data);\r\n        jsonObjects.map(item => {\r\n          this.state.center.push({ label: item.accountName, value: item.id })\r\n        })\r\n      }\r\n      return (true);\r\n    }).then(response => response);\r\n  }\r\n\r\n\r\n  mySubmitHandler = (event) => {\r\n    // alert(\"check\");\r\n    console.log('point 0')\r\n    event.preventDefault();\r\n    this.state.disabled = true;\r\n    console.log(this.state.placementData.interviewStatus)\r\n    this.validate(\"interviewStatus\", this.state.placementData.interviewStatus);\r\n    console.log('This is the part of error')\r\n    if (this.state.errors.interviewStatus === '') {\r\n\r\n      if (this.state.placementData.interviewStatus === 'Placed') {\r\n        console.log('point 1')\r\n                /*the following is the validation for general form*/\r\n        this.validatePlacedAndOfferNotTaken(\"empId\", this.state.placementData.empId);\r\n        this.validatePlacedAndOfferNotTaken(\"domainName\", this.state.placementData.domainName);\r\n        this.validatePlacedAndOfferNotTaken(\"spocName\", this.state.placementData.spocName);\r\n        this.validatePlacedAndOfferNotTaken(\"designation\", this.state.placementData.designation);\r\n        this.validatePlacedAndOfferNotTaken(\"spocPhoneNumber\", this.state.placementData.spocPhoneNumber);\r\n        this.validatePlacedAndOfferNotTaken(\"spocEmailId\", this.state.placementData.spocEmailId);\r\n        this.validatePlacedAndOfferNotTaken(\"monthlyGrossSal\", this.state.placementData.monthlyGrossSal);\r\n        this.validatePlacedAndOfferNotTaken(\"accommodationProvided\", this.state.placementData.accommodationProvided);\r\n        this.validatePlacedAndOfferNotTaken(\"foodProvided\", this.state.placementData.foodProvided);\r\n        this.validatePlacedAndOfferNotTaken(\"offerDate\", this.state.placementData.offerDate);\r\n        this.validatePlacedAndOfferNotTaken(\"offerStatus\", this.state.placementData.offerStatus);\r\n        if (this.state.placementData.offerStatus=='Accepted'){\r\n          this.validatePlacedAndOfferNotTaken(\"joined\", this.state.placementData.joined);\r\n        }\r\n        else if (this.state.placementData.offerStatus=='Rejected'){\r\n          this.validatePlacedAndOfferNotTaken(\"reasonJobRejected\", this.state.placementData.reasonJobRejected);\r\n          this.validatePlacedAndOfferNotTaken(\"otherReasonInBrief\", this.state.placementData.otherReasonInBrief);\r\n        }\r\n        // this.validatePlacedAndOfferNotTaken(\"documentsUploaded\", this.state.placementData.documentsUploaded);\r\n        // this.validatePlacedAndOfferNotTaken(\"authenticationAndConsent\", this.state.placementData.authenticationAndConsent);\r\n        // this.validateAppropriateCheckBoxes(\"documentsUploaded\");\r\n        // this.validateAppropriateCheckBoxes(\"authenticationAndConsent\");\r\n        //         /*the following is the validation for address*/\r\n        this.validateAddress(\"pincode\", this.state.address.pincode);\r\n        this.validateAddress(\"villageName\", this.state.address.villageName);\r\n        this.validateAddress(\"cityName\", this.state.address.cityName);\r\n        this.validateAddress(\"state\", this.state.address.state);\r\n        this.validateAddress(\"district\", this.state.address.district);\r\n\r\n        let errorsExist = true;\r\n        Object.values(this.state.errors).forEach(\r\n          (val) => {\r\n            val.length > 0 && (errorsExist = false)\r\n          }\r\n        );\r\n        if (errorsExist) {\r\n          this.submitPlacementDetails();\r\n        }\r\n        else {\r\n          console.log(this.state.errors)\r\n          // alert('Please upload the document before clicking the checkbox!');\r\n        }\r\n      }\r\n      //**If Not placed then check reason if provided then submit details else alert  */\r\n      else if (this.state.placementData.interviewStatus === 'Not Placed') {\r\n        this.validateNotPlaced(\"reason\", this.state.placementData.reason);\r\n        this.validateNotPlaced(\"empId\", this.state.placementData.empId);\r\n        this.validateNotPlaced(\"reasonForNoOpportunity\", this.state.placementData.reasonForNoOpportunity);\r\n        this.validateNotPlaced(\"otherReasonInBrief\", this.state.placementData.otherReasonInBrief);\r\n        let errorsExist = true;\r\n        Object.values(this.state.errors).forEach(\r\n          (val) => val.length > 0 && (errorsExist = false)\r\n        );\r\n        if (errorsExist) {\r\n          this.submitPlacementDetails();\r\n        }\r\n        else {\r\n          console.log(this.state.errors)\r\n          // alert('Please upload the document before clicking the checkbox!');\r\n        }\r\n      }\r\n      //**If the status is Entrepreneurship check the checkboxes for documents uploaded*/\r\n      else if (this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\r\n                  /*the following is the validation of the form data for enterpreneurship*/\r\n        this.validateEntrepreneurship(\"domainName\", this.state.placementData.domainName);\r\n        this.validateEntrepreneurship(\"noOfPeopleEmployed\", this.state.placementData.noOfPeopleEmployed);\r\n        this.validateEntrepreneurship(\"familyBusiness\", this.state.placementData.familyBusiness);\r\n        this.validateEntrepreneurship(\"availedLoan\", this.state.placementData.availedLoan);\r\n        this.validateEntrepreneurship(\"monthlyGrossSal\", this.state.placementData.monthlyGrossSal);\r\n                  /*the following is the validation for address*/\r\n         this.validateAddress(\"pincode\", this.state.address.pincode);\r\n         this.validateAddress(\"villageName\", this.state.address.villageName);\r\n         this.validateAddress(\"cityName\", this.state.address.cityName);\r\n         this.validateAddress(\"state\", this.state.address.state);\r\n         this.validateAddress(\"district\", this.state.address.district);\r\n                  /*validation of appropriate checkboxes*/\r\n     // this.validateEntrepreneurship(\"documentsUploaded\", this.state.placementData.documentsUploaded);\r\n        this.validateAppropriateCheckBoxes(\"documentsUploadedEntrepreneurship\");\r\n        let errorsExist = true;\r\n        Object.values(this.state.errors).forEach(\r\n          (val) => val.length > 0 && (errorsExist = false));\r\n        if (errorsExist) {\r\n          this.submitPlacementDetails();\r\n        }\r\n        else {\r\n          // alert('Please upload the document before clicking the checkbox!');\r\n        }\r\n      }\r\n      //**Else if nothing is from the selected try to save the data for the same if possible (this condition may not be arising ever but just in case) */\r\n      else {\r\n        this.submitPlacementDetails();\r\n      }\r\n    }\r\n    //*authentication response and redirect to error or dashbaord page*/\r\n    this.setState({\r\n      errors: this.state.errors,\r\n    });\r\n    if (checkButton(this.state.errors)) {\r\n\r\n    }\r\n    else {\r\n      this.state.disabled = true;\r\n    }\r\n  }\r\n\r\n\r\n  validate = (name, value) => {\r\n    let errors = this.state.errors;\r\n    switch (name) {\r\n      case 'interviewStatus': {\r\n        errors.interviewStatus = isNotEmpty(value);\r\n        if(value==\"Placed\"){\r\n            this.state.errors = {\r\n                        /*Placed Data here*/\r\n              domainName: '*', spocName: '*', spocPhoneNumber: '*', spocEmailId: '', monthlyGrossSal: '*',\r\n              foodProvided: '*', accommodationProvided: '*', offerDate: '*', offerStatus: '*', joined: '',\r\n              reason: '', otherReasonInBrief: '',\r\n                        /*Address here*/\r\n              joiningPin: '*', joiningCity: '*', addressId: '**', empId: 0, interviewStatus: '',\r\n            }\r\n        }\r\n        else if(value==\"Entrepreneurship/ Self Employed\"){\r\n            this.state.errors = {\r\n                        /*Address here*/\r\n              joiningPin: '*', joiningCity: '*', addressId: '*',\r\n                        /*Entrepreneurship/ Self Employed*/\r\n              noOfPeopleEmployed: '*', familyBusiness: '*', availedLoan: '*', interviewStatus: '',\r\n            }\r\n        }\r\n        else if(value==\"Not Placed\"){\r\n              this.state.errors = {\r\n                          /*Not Placed*/\r\n                  reasonForNoOpportunity: '*', reason: '', otherReasonInBrief: '', empId: '', interviewStatus: '',\r\n          }\r\n        }\r\n        console.log(value)\r\n      }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ errors });\r\n  }\r\n\r\n\r\n  validateEntrepreneurship = (name, value) => {\r\n    console.log(\"name ===> \", name, \" value ===> \", value)\r\n    let errors = this.state.errors;\r\n    switch (name) {\r\n      case 'noOfPeopleEmployed': errors.noOfPeopleEmployed = isNotZero(value);\r\n        break;\r\n      case 'domainName': errors.domainName = isNotEmpty(value);\r\n        break;\r\n      case 'familyBusiness' : errors.familyBusiness = isNotEmpty(value);\r\n        break;\r\n      case 'availedLoan' : errors.availedLoan = isNotEmpty(value);\r\n        break;\r\n      case 'monthlyGrossSal' : errors.monthlyGrossSal = isNotZero(value);\r\n        break;\r\n      case 'documentsUploaded': {\r\n        if (value) {\r\n          errors.documentsUploaded = \"\";\r\n          this.CheckForDocuments('documentsUploadedEntrepreneurship');\r\n        }\r\n        else {\r\n          errors.documentsUploaded = 'Please upload the appropriate documents to continue';\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ errors });\r\n  }\r\n\r\n  validateNotPlaced = (name, value) => {\r\n    console.log(\"name ===> \", name, \" value ===> \", value)\r\n    let errors = this.state.errors;\r\n    switch (name) {\r\n      case 'reason': errors.reason = isNotEmpty(value);\r\n        break;\r\n      case 'empId': errors.reasonForNoOpportunity = isNotZero(value);\r\n        break;\r\n      case 'reasonForNoOpportunity': errors.reasonForNoOpportunity = isNotEmpty(value);\r\n        break;\r\n      case 'otherReasonInBrief': errors.otherReasonInBrief = isNotEmpty(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ errors });\r\n  }\r\n\r\n\r\n  validatePlacedAndOfferNotTaken = (name, value) => {\r\n    let errors = this.state.errors;\r\n    switch (name) {\r\n      case  'empId': errors.empId = isNotEmpty(value);\r\n        break;\r\n      case  'domainName': errors.domainName = isNotEmpty(value);\r\n        break;\r\n      case  'spocName': errors.spocName = isNotEmpty(value);\r\n        break;\r\n      case  'spocEmailId': errors.spocEmailId = validateEmail('secondaryEmailId', value);\r\n        break;\r\n      case  'spocPhoneNumber': errors.spocPhoneNumber = validateContact(name, value);\r\n        break;\r\n      case  'monthlyGrossSal': errors.monthlyGrossSal = isNotZero(value);\r\n        break;\r\n      case  'accommodationProvided' : errors.accommodationProvided = isNotEmpty(value);\r\n        break;\r\n      case  'foodProvided' : errors.foodProvided = isNotEmpty(value);\r\n        break;\r\n      case  'offerDate': errors.offerDate = isNotEmpty(value);\r\n        break;\r\n      case  'offerStatus': errors.offerStatus = isNotEmpty(value);\r\n        break;\r\n      case  'joined': errors.joined = isNotEmpty(value);\r\n        break;\r\n      case  'reasonForNoOpportunity': errors.reasonForNoOpportunity = isNotEmpty(value);\r\n        break;\r\n      case  'otherReasonInBrief': errors.otherReasonInBrief = isNotEmpty(value);\r\n        break;\r\n      case  'reason': errors.reason = isNotEmpty(value);\r\n        break;\r\n      case  'reasonForRejection': errors.reasonForRejection = isNotEmpty(value);\r\n        break;\r\n      case  'documentsUploaded': {\r\n        // if (value) {\r\n        //   errors.documentsUploaded = \"\";\r\n        //   this.CheckForDocuments('documentsUploaded');\r\n        // }\r\n        // else {\r\n        //   errors.documentsUploaded = 'Please upload the appropriate documents to continue';\r\n        // }\r\n        // break;\r\n      }\r\n      case  'authenticationAndConsent': {\r\n        // if (value) {\r\n        //   errors.authenticationAndConsent = \"\";\r\n        //   this.CheckForDocuments('authenticationAndConsent');\r\n        // }\r\n        // else {\r\n        //   errors.authenticationAndConsent = 'Please upload the appropriate documents to continue';\r\n        // }\r\n        // break;\r\n      }\r\n      default: console.log('all clear');\r\n        break;\r\n    }\r\n    this.setState({ errors });\r\n  }\r\n\r\n\r\n  validateAddress = (name, value) => {\r\n    let errors = this.state.errors;\r\n    switch (name) {\r\n      case 'pincode': errors.pincode = isNotEmpty(value);\r\n        break;\r\n      case 'villageName': errors.village = isNotEmpty(value);\r\n        break;\r\n      case 'cityName': errors.cityName = isNotEmpty(value);\r\n        break;\r\n      case 'state': errors.state = isNotEmpty(value);\r\n        break;\r\n      case 'district': errors.district = isNotEmpty(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ errors });\r\n  }\r\n\r\n\r\n  handleAddressInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      address: {\r\n        ...this.state.address,\r\n        [name]: value\r\n      }\r\n    })\r\n    this.validate(name, value);\r\n  }\r\n  handleAddressSelectChange(selectname, event) {\r\n    this.setState({\r\n      address: {\r\n        ...this.state.address,\r\n        [selectname]: event\r\n      }\r\n    })\r\n\r\n    this.validateAddress(selectname, event);\r\n  }\r\n\r\n  handleTypeOfProofSelectChange(selectname, event) {\r\n\r\n    let newVal = event;\r\n    let stateVal = this.state.documentType;\r\n\r\n    stateVal.indexOf(newVal) === -1\r\n      ? stateVal.push(newVal)\r\n      : stateVal.length === 1\r\n        ? (stateVal = [])\r\n        : stateVal.splice(stateVal.indexOf(newVal), 1)\r\n\r\n    this.setState({ documentType: stateVal });\r\n\r\n  }\r\n\r\n  downloadDocuments = (value) => {\r\n    let formData = new FormData();\r\n    formData.append('data', '{\"token\" : \"\", \"action\" : \"downloadDocument\", \"data\" : [{\"basicDocId\":' + value + '}]}');\r\n    fetch(serviceEndPoint.documentServiceEndPoint, {\r\n      method: 'post',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + UserContext.token\r\n      },\r\n      body: formData\r\n    }).then(response => response.json()).then((jsondata) => {\r\n      let jsonobjects = JSON.parse(jsondata.data);\r\n      var url = serviceEndPoint.downloadDocument + jsonobjects[0].documentPath + \"\";\r\n      window.open(url, \"_blank\");\r\n    });\r\n  }\r\n\r\n  uploadDocuments = (e) => {\r\n    e.preventDefault();\r\n    var levelOfDocument = \"G\";\r\n    // console.log('dample here')\r\n    let localThis = this;\r\n\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(this.state.file);\r\n    reader.onload = function () {\r\n      let document = reader.result;\r\n\r\n      localThis.setState({ alertDialogFlag: false });\r\n      uploadDocument(localThis.state.dbUserId, localThis.state.engagementId, localThis.state.typeOfDocument, 'PD', localThis.state.typeOfDocument, document, \"\").then((jsondata) => {\r\n        //**Only if the student's data is successfully saved then display the message and update the documents list else display NOT uploaded message */\r\n        if (jsondata.status == \"success\") {\r\n          localThis.setState({ alertDialogFlag: false });\r\n          alertDialogOptions.message = <span style={{ color: \"green\" }}>Document is Saved Sucessfully</span>;\r\n          localThis.setState({ alertDialogFlag: true });\r\n          localThis.getDocuments();\r\n        }\r\n        else {\r\n          localThis.setState({ alertDialogFlag: false });\r\n          alertDialogOptions.message = <span style={{ color: \"red\" }}>Document is NOT SAVED Please Check the uploaded Documents</span>;\r\n          localThis.setState({ alertDialogFlag: true });\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n  onFileChangeHandler = (files) => { this.setState({ file: files[0] }); }\r\n\r\n  getPincodeData(selectname, event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      address: {\r\n        ...this.state.address,\r\n        [name]: value\r\n      }\r\n    })\r\n    this.validateAddress(name, value);\r\n    if (value.length == 6) {\r\n\r\n      fetchAddressDetailsBasedOnPincode(value).then((jsondata) => {\r\n        let jsonobjects = JSON.parse(jsondata.data);\r\n        let taluk = [];\r\n        let pincode = [];\r\n        let cityVillage = [];\r\n        let states = [];\r\n        let district = [];\r\n\r\n        this.formData.village.length = 0;\r\n        this.formData.pincodes.length = 0;\r\n        this.formData.city.length = 0;\r\n        this.formData.state.length = 0;\r\n        this.formData.district.length = 0;\r\n\r\n        jsonobjects.map(item => { cityVillage.push({ label: item.cityVillage, value: item.id }) });\r\n        cityVillage = underscore.uniq(cityVillage, true, \"label\");\r\n        cityVillage.map(item => { this.formData.village.push({ label: item.label, value: (item.label).toString() }) });\r\n        this.setState({ village: this.formData.village });\r\n\r\n        jsonobjects.map(item => { taluk.push({ label: item.taluk, value: item.id }) });\r\n        taluk = underscore.uniq(taluk, true, \"label\");\r\n        taluk.map(item => { this.formData.city.push({ label: item.label, value: (item.label).toString() }) });\r\n        this.setState({ city: this.formData.city });\r\n\r\n\r\n\r\n        jsonobjects.map(item => { states.push({ label: item.state, value: item.id }) });\r\n        states = underscore.uniq(states, true, \"label\");\r\n        states.map(item => { this.formData.state.push({ label: item.label, value: (item.value).toString() }) });\r\n        this.setState({ state: this.formData.state }, () => { /*console.log(this.state.state)*/ });\r\n\r\n        jsonobjects.map(item => { district.push({ label: item.district, value: item.id }) });\r\n        district = underscore.uniq(district, true, \"label\");\r\n        district.map(item => { this.formData.district.push({ label: item.label, value: (item.value).toString() }) });\r\n        this.setState({ district: this.formData.district });\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  submitPlacementDetails() {\r\n    this.getDocuments();\r\n    if (this.state.placementData.interviewStatus === 'Placed'\r\n      || this.state.placementData.interviewStatus === 'Entrepreneurship/ Self Employed') {\r\n      // console.log(\" checkpoint 2 \")\r\n      saveAddressDetails(JSON.stringify(this.state.address)).then((jsondata) => {\r\n        let jsonobjects = JSON.parse(jsondata.data);\r\n        //alert(jsonobjects[0].id);\r\n        this.setState({\r\n          placementData: {\r\n            ...this.state.placementData,\r\n            'addressId': jsonobjects[0].id\r\n          }\r\n        }, () => { this.saveAllDetails() });\r\n        this.setState({ alertDialogFlag: false });\r\n        alertDialogOptions.message = <span style={{ color: \"green\" }}>Placement Details Saved Sucessfully</span>;\r\n        this.setState({ alertDialogFlag: true });\r\n      });\r\n\r\n    }\r\n    else {\r\n      this.saveAllDetails();\r\n    }\r\n  }\r\n\r\n  saveAllDetails() {\r\n    // console.log(\" checkpoint 3 \")\r\n    // console.log(this.state.placementData)\r\n    savePlacementDetails(this.state.placementData).then((jsondata) => {\r\n      this.fetchPlacementdetailsFouUser(this.state.engagementId);\r\n      if (jsondata.appError == null || jsondata.status == 'success') {\r\n        let jsonobjects = JSON.parse(jsondata.data);\r\n        //alert(JSON.stringify(jsonobjects));  \r\n        // console.log(jsonobjects);\r\n        this.setState({ alertDialogFlag: false });\r\n        alertDialogOptions.message = <span style={{ color: \"green\" }}>Placement Details Saved Sucessfully</span>;\r\n        this.setState({ alertDialogFlag: true });\r\n\r\n      }\r\n      else {\r\n        console.log('error', this.state.errors)\r\n        this.setState({ alertDialogFlag: false });\r\n        alertDialogOptions.message = <span style={{ color: \"red\" }}>Please upload the appropriate documents for saving the placement details!</span>;\r\n        this.setState({ alertDialogFlag: true });\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const columns = [\r\n      { label: 'Interview Status', name: 'interview_status', headerStyle: { color: '#FF9800' } },\r\n      { label: 'Reason', name: 'Reason', headerStyle: { color: '#FF9800' } },\r\n      // { label: 'Annual Salary', name: 'annual_sal', headerStyle: { color: '#FF9800' } },\r\n      { label: 'Action', name: 'action', headerStyle: { color: '#FF9800' } }\r\n    ]\r\n\r\n    const options = {\r\n      filterType: \"dropdown\",\r\n      responsive: \"stacked\",\r\n      sortDirection: \"desc\",\r\n      selectableRows: 'single',\r\n      disableToolbarSelect: true,\r\n      rowsPerPage: 10,\r\n      selectableRowsOnClick: true,\r\n\r\n\r\n\r\n    };\r\n\r\n    let button;\r\n    button = <Grid container direction=\"row\" justify=\"flex-end\" id=\"btn\" alignItems=\"flex-end\">  <Button variant=\"contained\" type=\"submit\" size=\"small\" color=\"primary\"\r\n    disabled={(this.state.buttonStatus == \"Enrolled\") ? false : true}\r\n    >\r\n      Save\r\n    </Button></Grid>\r\n\r\n\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n        <form onSubmit={this.mySubmitHandler} method=\"post\">\r\n          <fieldset id=\"roleBasedDisable\">\r\n            <Grid item xs={12} sm={3}>\r\n              <SingleSelect name=\"interviewStatus\" id=\"interviewStatus\" label=\"Interview Status\"\r\n                onChange={this.handlePlacementSelectChange.bind(this, 'interviewStatus')}\r\n                value={this.state.placementData.interviewStatus || ''}\r\n                helperText={this.state.errors.interviewStatus}\r\n                error={this.state.errors.interviewStatus === '' ? false : true}\r\n                options={this.state.intStatus}\r\n              />\r\n            </Grid>\r\n            {/*If the status is placed*/}\r\n            <div style={{ display: (this.state.placementData.interviewStatus === \"Placed\" ? \"block\" : \"none\") }}>\r\n              {/* <Grid id=\"hideData\" container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <FormControl>\r\n                  </FormControl>\r\n                </Grid>\r\n                <br></br>\r\n\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"empId\" id=\"empId\" label=\"Employer Name\"\r\n                    onChange={this.handleSelectChange.bind(this, 'empId')}\r\n                    value={this.state.placementData.empId || ''}\r\n                    helperText={this.state.errors.empId}\r\n                    error={this.state.errors.empId === '' ? false : true}\r\n                    options={this.state.center}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"domainName\" id=\"domainName\" label=\"Domain\"\r\n                    onChange={this.handleSelectChange.bind(this, 'domainName')}\r\n                    value={this.state.placementData.domainName || ''}\r\n                    helperText={this.state.errors.domainName}\r\n                    error={this.state.errors.domainName === '' ? false : true}\r\n                    options={this.state.domains} />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}></Grid>\r\n                <Grid item xs={12} sm={3}></Grid>\r\n\r\n                <Grid item xs={12} sm={3} id=\"interviewRemark\">\r\n                  <FormControl>\r\n                    <TextField type=\"text\" name=\"spocName\" id=\"spocName\"\r\n                      label=\"Employer SPOC Name\"\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.spocName || ''}\r\n                      helperText={this.state.errors.spocName}\r\n                      error={this.state.errors.spocName === '' ? false : true}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3} id=\"interviewRemark\">\r\n                  <FormControl>\r\n                    <TextField type=\"number\" name=\"spocPhoneNumber\" id=\"spocPhoneNumber\"\r\n                      label=\"SPOC contact NO.\"\r\n                      onInput={(e) => {\r\n                        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 10)\r\n                      }}\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.spocPhoneNumber || ''}\r\n                      helperText={this.state.errors.spocPhoneNumber}\r\n                      error={this.state.errors.spocPhoneNumber === '' ? false : true}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3} id=\"interviewRemark\">\r\n                  <FormControl>\r\n                    <TextField type=\"text\" name=\"spocEmailId\" id=\"spocEmailId\"\r\n                      label=\"SPOC email Id\"\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.spocEmailId || ''}\r\n                      helperText={this.state.errors.spocEmailId}\r\n                      error={this.state.errors.spocEmailId === '' ? false : true}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid items xs={12} sm={3} />\r\n\r\n                <Grid item xs={12} sm={3} id=\"annualSal\">\r\n                  <FormControl>\r\n                    <TextField type=\"number\" name=\"monthlyGrossSal\" id=\"monthlyGrossSal\"\r\n                      label=\"Monthly Gross Salary\"\r\n                      helperText={this.state.errors.monthlyGrossSal}\r\n                      error={this.state.errors.monthlyGrossSal === '' ? false : true}\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.monthlyGrossSal || ''}\r\n                      onInput={(e) => {\r\n                        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 6)\r\n                      }}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"accommodationProvided\" id=\"accommodationProvided\" label=\"Accommodation Provided\"\r\n                    onChange={this.handleSelectChange.bind(this, 'accommodationProvided')}\r\n                    value={this.state.placementData.accommodationProvided || ''}\r\n                    options={this.state.yesOrNo}\r\n                    helperText={this.state.errors.accommodationProvided}\r\n                    error={this.state.errors.accommodationProvided === '' ? false : true}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"foodProvided\" id=\"foodProvided\" label=\"Food Provided\"\r\n                    onChange={this.handleSelectChange.bind(this, 'foodProvided')}\r\n                    value={this.state.placementData.foodProvided || ''}\r\n                    options={this.state.yesOrNo}\r\n                    helperText={this.state.errors.foodProvided}\r\n                    error={this.state.errors.foodProvided === '' ? false : true}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3} id=\"offerDate\">\r\n                  <TextField id=\"date\" name=\"offerDate\" id=\"offerDate\" onChange={this.handleInputChange}\r\n                    label=\"Offer Date\" value={this.state.placementData.offerDate || ''}\r\n                    helperText={this.state.errors.offerDate}\r\n                    error={this.state.errors.offerDate === '' ? false : true}\r\n                    type=\"date\"\r\n                    inputProps={{ max: new Date().toISOString().slice(0, 10) }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }} />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"offerStatus\" id=\"offerStatus\" label=\"Offer Status\"\r\n                    onChange={this.handleSelectChange.bind(this, 'offerStatus')}\r\n                    value={this.state.placementData.offerStatus || ''}\r\n                    options={this.state.OfferStatus}\r\n                    helperText={this.state.errors.offerStatus}\r\n                    error={this.state.errors.offerStatus === '' ? false : true}\r\n                  />\r\n                </Grid>\r\n                <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                  {(this.state.errors.additionalDocuments || '')}\r\n                </InputLabel>\r\n\r\n                {(this.state.placementData.offerStatus == \"Rejected\") ?\r\n                  <Grid item xs={12} sm={3}>\r\n                    <SingleSelect name=\"reasonJobRejected\" id=\"reasonJobRejected\" label=\"Reason For Job Rejection\"\r\n                      onChange={this.handleSelectChange.bind(this, 'reason')}\r\n                      value={this.state.placementData.reason || ''}\r\n                      options={this.state.notInterestedReason}\r\n                      helperText={this.state.errors.reason}\r\n                      error={this.state.errors.reason === '' ? false : true}\r\n                    />\r\n                  </Grid> :\r\n                  (this.state.placementData.offerStatus == \"Accepted\") && <Grid item xs={12} sm={3}>\r\n                    <SingleSelect name=\"joined\" id=\"joined\" label=\"Joined\"\r\n                      onChange={this.handleSelectChange.bind(this, 'joined')}\r\n                      value={this.state.placementData.joined || ''}\r\n                      options={this.state.yesOrNo}\r\n                      helperText={this.state.errors.joined}\r\n                      error={this.state.errors.joined === '' ? false : true}\r\n                    />\r\n                  </Grid>}\r\n\r\n                {(this.state.placementData.reason == \"Others\") && <Grid item xs={12} sm={6}>\r\n                  <FormControl>\r\n                    <TextField type=\"text\" name=\"otherReasonInBrief\" id=\"otherReasonInBrief\" label=\"Please state the reason for Rejection\"\r\n                      helperText={this.state.errors.otherReasonInBrief}\r\n                      error={this.state.errors.otherReasonInBrief === '' ? false : true}\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.otherReasonInBrief || ''}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>}\r\n             \r\n\r\n                <Grid item xs={12}>\r\n                  <FormControl>\r\n                    <h6 style={{ fontWeight: 'bold' }}>Job Location</h6>\r\n                  </FormControl>\r\n\r\n\r\n                </Grid>\r\n\r\n                <AddressForPlacement\r\n                  pincodeName=\"pincode\" pincodeId=\"pincode\" pincodeOnChange={this.getPincodeData.bind(this, 'pincode')} pincodeValue={this.state.address.pincode || ''} pincodeHelperText={this.state.errors.pincode} pincodeError={this.state.errors.pincode == '' ? false : true}\r\n                  villageName=\"villageName\" villageId=\"villageName\" villageInputValue={this.handleAddressSelectChange.bind(this, 'villageName')} villageData={this.state.village} villageValue={this.state.address.villageName || ''} villageHelperText={this.state.errors.village} villageError={this.state.errors.village == '' ? false : true}\r\n                  cityName=\"cityName\" cityId=\"cityName\" cityValue={this.state.address.cityName || ''} cityData={this.state.city} cityInputValue={this.handleAddressSelectChange.bind(this, 'cityName')} cityNameHelperText={this.state.errors.cityName} cityNameError={this.state.errors.cityName == '' ? false : true}\r\n                  stateName=\"state\" stateId=\"state\" stateData={this.state.state} stateValue={this.state.address.state || ''} stateInputValue={this.handleAddressSelectChange.bind(this, 'state')} stateHelperText={this.state.errors.state} stateError={this.state.errors.state == '' ? false : true}\r\n                  districtName=\"district\" districtId=\"district\" districtValue={this.state.address.district || ''} districtData={this.state.district} districtInputValue={this.handleAddressSelectChange.bind(this, 'district')} districtHelperText={this.state.errors.district} districtError={this.state.errors.district == '' ? false : true}\r\n                />\r\n\r\n                <Grid item xs={12} sm={6} >\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        onChange={this.handleCheckboxChange}\r\n                        name=\"documentsUploaded\"\r\n                        id=\"documentsUploaded\"\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"I have uploaded appropriate Evidence\"\r\n                  />\r\n                  <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                    {(this.state.errors.documentsUploaded || '')}\r\n                  </InputLabel>\r\n\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        onChange={this.handleCheckboxChange}\r\n                        name=\"authenticationAndConsent\"\r\n                        id=\"authenticationAndConsent\"\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"Have gone though the placement evidence and Authentic for both data and evidence\"\r\n                  />\r\n                  <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                    {(this.state.errors.authenticationAndConsent || '')}\r\n                  </InputLabel>\r\n                </Grid>\r\n                <br />\r\n              </Grid>*/}\r\n                <PlacementDetailsSubPlaced props={this.props}/>\r\n            </div>\r\n                   \r\n            {/* Incase if a candidate has opted for entrepreneurship/ self Employed */}\r\n            <div id=\"entrepreneurship\" style={{ display: (this.state.placementData.interviewStatus === \"Entrepreneurship/ Self Employed\" ? \"block\" : \"none\") }}>\r\n              {/* <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <FormControl>\r\n                  </FormControl>\r\n                </Grid>\r\n                <br></br>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"domainName\" id=\"domainName\" label=\"Domain\"\r\n                    onChange={this.handleSelectChange.bind(this, 'domainName')}\r\n                    value={this.state.placementData.domainName || ''}\r\n                    helperText={this.state.errors.domainName}\r\n                    error={this.state.errors.domainName === '' ? false : true}\r\n                    options={this.state.domains} />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3} id=\"studentRemark\">\r\n                  <FormControl>\r\n                    <TextField type=\"text\" name=\"noOfPeopleEmployed\" id=\"noOfPeopleEmployed\" label=\"No. of people employed\"\r\n                      helperText={this.state.errors.noOfPeopleEmployed}\r\n                      error={this.state.errors.noOfPeopleEmployed === '' ? false : true}\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.noOfPeopleEmployed || ''}\r\n                      onInput={(e) => {\r\n                        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 4)\r\n                      }} />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} />\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"familyBusiness\" id=\"familyBusiness\" label=\"Is it a Family Business\"\r\n                    onChange={this.handleSelectChange.bind(this, 'familyBusiness')}\r\n                    value={this.state.placementData.familyBusiness || ''}\r\n                    helperText={this.state.errors.familyBusiness}\r\n                    error={this.state.errors.familyBusiness === '' ? false : true}\r\n                    options={this.state.yesOrNo} />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"availedLoan\" id=\"availedLoan\" label=\"Availed Loan\"\r\n                    onChange={this.handleSelectChange.bind(this, 'availedLoan')}\r\n                    value={this.state.placementData.availedLoan || ''}\r\n                    helperText={this.state.errors.availedLoan}\r\n                    error={this.state.errors.availedLoan === '' ? false : true}\r\n                    options={this.state.yesOrNo} />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={3}>\r\n                  <FormControl>\r\n                    <TextField type=\"number\" name=\"monthlyGrossSal\" id=\"monthlyGrossSal\"\r\n                      label=\"Monthly Gross Income\"\r\n                      helperText={this.state.errors.monthlyGrossSal}\r\n                      error={this.state.errors.monthlyGrossSal === '' ? false : true}\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.placementData.monthlyGrossSal || ''}\r\n                      onInput={(e) => {\r\n                        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, 6)\r\n                      }}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <FormControl>\r\n                    <h6 style={{ fontWeight: 'bold' }}>Job Location</h6>\r\n                  </FormControl>\r\n                </Grid>\r\n                <AddressForPlacement\r\n                  pincodeName=\"pincode\" pincodeId=\"pincode\" pincodeOnChange={this.getPincodeData.bind(this, 'pincode')} pincodeValue={this.state.address.pincode || ''} pincodeHelperText={this.state.errors.pincode} pincodeError={this.state.errors.pincode == '' ? false : true}\r\n                  villageName=\"villageName\" villageId=\"villageName\" villageInputValue={this.handleAddressSelectChange.bind(this, 'villageName')} villageData={this.state.village} villageValue={this.state.address.villageName || ''} villageHelperText={this.state.errors.village} villageError={this.state.errors.village == '' ? false : true}\r\n                  cityName=\"cityName\" cityId=\"cityName\" cityValue={this.state.address.cityName || ''} cityData={this.state.city} cityInputValue={this.handleAddressSelectChange.bind(this, 'cityName')} cityNameHelperText={this.state.errors.cityName} cityNameError={this.state.errors.cityName == '' ? false : true}\r\n                  stateName=\"stateName\" stateId=\"stateName\" stateData={this.state.state} stateValue={this.state.address.state || ''} stateInputValue={this.handleAddressSelectChange.bind(this, 'state')} stateHelperText={this.state.errors.state} stateError={this.state.errors.state == '' ? false : true}\r\n                  districtName=\"district\" districtId=\"district\" districtValue={this.state.address.district || ''} districtData={this.state.district} districtInputValue={this.handleAddressSelectChange.bind(this, 'district')} districtHelperText={this.state.errors.district} districtError={this.state.errors.district == '' ? false : true}\r\n                />\r\n\r\n                <Grid item xs={12} sm={6} >\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        onChange={this.handleCheckboxChange}\r\n                        name=\"documentsUploaded\"\r\n                        id=\"documentsUploadedEntrepreneurship\"\r\n                        color=\"primary\"\r\n                      // value={(this.state.placementData.documentsUploaded == \"true\" || this.state.placementData.documentsUploaded) ? true : false}\r\n                      // required={true}\r\n                      />\r\n                    }\r\n                    label=\"I have uploaded appropriate Evidence\"\r\n                  />\r\n                  <InputLabel shrink={true} style={{ color: \"red\" }} >\r\n                    {(this.state.errors.documentsUploaded || '')}\r\n                  </InputLabel>\r\n                </Grid>\r\n                <br />\r\n              </Grid> */}\r\n              <PlacementDetailsSubEntNP props={this.state} />\r\n            </div>\r\n\r\n            {/*Incase a candidate has opted for not being placed or the candidate is not placed*/}\r\n            <div style={{ display: (this.state.placementData.interviewStatus === \"Not Placed\" ? \"block\" : \"none\") }}>\r\n              {/* <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <FormControl>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              <br></br>\r\n\r\n              <Grid id=\"hideData\" container spacing={2}>\r\n                <Grid item xs={12} sm={3}>\r\n                  <SingleSelect name=\"reason\" id=\"reason\" label=\"Reason\"\r\n                    onChange={this.handleSelectChange.bind(this, 'reason')}\r\n                    value={this.state.placementData.reason || ''}\r\n                    options={this.state.notPlacedReason}\r\n                    helperText={this.state.errors.reason}\r\n                    error={this.state.errors.reason === '' ? false : true}\r\n                  />\r\n                </Grid>\r\n                <br></br>\r\n                {\r\n                  (this.state.placementData.reason == 'Rejected By Employer') &&\r\n                  <Grid item xs={12} sm={3}>\r\n                    <SingleSelect name=\"empId\" id=\"empId\" label=\"Employer Name\"\r\n                      onChange={this.handleSelectChange.bind(this, 'empId')}\r\n                      value={this.state.placementData.empId || ''}\r\n                      helperText={this.state.errors.empId} n\r\n                      error={this.state.errors.empId === '' ? false : true}\r\n                      options={this.state.center}\r\n                    />\r\n                  </Grid>\r\n                }\r\n\r\n                {\r\n                  (this.state.placementData.reason == 'Not Avaliable Opportunity') &&\r\n                  <Grid item xs={12} sm={3}>\r\n                    <SingleSelect name=\"empId\" id=\"empId\" label=\"Reason for No Opportunites\"\r\n                      onChange={this.handleSelectChange.bind(this, 'reasonForNoOpportunity')}\r\n                      value={this.state.placementData.reasonForNoOpportunity || ''}\r\n                      helperText={this.state.errors.reasonForNoOpportunity}\r\n                      error={this.state.errors.reasonForNoOpportunity === '' ? false : true}\r\n                      options={this.state.notAvlOppReason}\r\n                    />\r\n                  </Grid>\r\n                }\r\n\r\n\r\n                {\r\n                  (this.state.placementData.reasonForNoOpportunity == 'Others' || this.state.placementData.reasonForNoOpportunity == 'No Employment Opportuntities') &&\r\n                  <Grid item xs={12} sm={3}>\r\n                    <FormControl>\r\n                      <TextField type=\"text\" name=\"otherReasonInBrief\" id=\"otherReasonInBrief\" label=  \"Please state/ brief the reason for No Opportunities\"\r\n                        helperText={this.state.errors.otherReasonInBrief}\r\n                        error={this.state.errors.otherReasonInBrief === '' ? false : true}\r\n                        onChange={this.handleInputChange}\r\n                        value={this.state.placementData.otherReasonInBrief || ''}\r\n                      />\r\n                    </FormControl>\r\n                  </Grid>\r\n                }\r\n              </Grid> */}\r\n                          <PlacementDetailsSubNP props={this.state} />\r\n            </div>\r\n\r\n\r\n\r\n            {/*button*/}\r\n          </fieldset>\r\n        </form>\r\n        <form onSubmit={this.uploadDocuments} method=\"post\">\r\n          <Table aria-label=\"simple table\" style={{ width: \"100%\" }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell style={{ width: \"25%\" }}>Type of Document</TableCell>\r\n\r\n                <TableCell style={{ width: \"20%\" }}>Browse and Upload</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <InputLabel shrink={true} style={{ color: \"GrayText\" }} >\r\n                *Note : After Uploading the document if the checkbox still does not works, return to the screen after visiting some other screen!\r\n              </InputLabel>\r\n              <TableRow >\r\n                <TableCell >\r\n\r\n                  <SingleSelect isClearable={true}\r\n                    name=\"typeOfDocument\" id=\"typeOfDocument\"\r\n                    options={this.state.typeOfDocumentData}\r\n                    onChange={this.handleSelectChangeDoc.bind(this, 'typeOfDocument')}\r\n                    value={this.state.typeOfDocument || ''}\r\n                  />\r\n                </TableCell>\r\n\r\n                <TableCell>\r\n                  <DropzoneArea\r\n                    name=\"file\" id=\"file\"\r\n                    maxFileSize={200000} filesLimit={1} showFileNames={true}\r\n                    onChange={this.onFileChangeHandler}\r\n                  // key={this.state.clearDropzoneArea}\r\n                  />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n          <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\"\r\n              disabled={this.state.file == null || this.state.typeOfDocument == '' ? true : false}\r\n            >Upload Document</Button>\r\n          </Grid>\r\n        </form>\r\n\r\n\r\n\r\n        <br></br><br></br><br></br><br></br><br></br><br></br>\r\n        <MUIDataTable id=\"dtb\" title={\"List Of Placement Details\"} label={\"List of Placement Details \"} columns={columns} data={this.state.info} options={options} />\r\n        <br /><br />\r\n        <InputLabel>List Of Uploaded Document</InputLabel>\r\n        <br />\r\n        {\r\n          (this.state.documents != \"\") &&\r\n\r\n          <Paper>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Created On</TableCell>\r\n                  <TableCell>Document Name</TableCell>\r\n                  <TableCell>File Name</TableCell>\r\n                  <TableCell >Download</TableCell>\r\n                  <TableCell >Delete</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {this.state.documents.map(row => (\r\n                  <TableRow key={row.basicDocId}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n\r\n                      {row.createdOn}\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.documentName}\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.documentPath.split(\"/\")[1]}\r\n                    </TableCell>\r\n                    <TableCell >\r\n                      <Button variant=\"contained\" color=\"primary\" size=\"small\" name=\"download\" id=\"download\"\r\n\r\n                        onClick={this.downloadDocuments.bind(this, row.basicDocId)}\r\n                      >Download</Button>\r\n                    </TableCell>\r\n\r\n                    <TableCell >\r\n                      <Button variant=\"contained\" color=\"primary\" size=\"small\" name=\"delete\" id=\"delete\"\r\n                        onClick={this.deleteDocument.bind(this, row.basicDocId)}\r\n                      >Delete</Button>\r\n                    </TableCell>\r\n\r\n\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Paper>\r\n\r\n\r\n        }\r\n\r\n        {\r\n          (this.state.alertDialogFlag) && <AlertDialog message={alertDialogOptions.message}></AlertDialog>\r\n        }\r\n\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default PlacementDetails;"]},"metadata":{},"sourceType":"module"}