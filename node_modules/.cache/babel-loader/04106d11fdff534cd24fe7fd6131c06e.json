{"ast":null,"code":"import { ReadStreamTokenizer } from './ReadStreamTokenizer.js';\nimport { BufferTokenizer } from './BufferTokenizer.js';\nexport { EndOfStreamError } from 'peek-readable';\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\r\n * @returns ReadStreamTokenizer\r\n */\n\nexport function fromStream(stream, fileInfo) {\n  fileInfo = fileInfo ? fileInfo : {};\n  return new ReadStreamTokenizer(stream, fileInfo);\n}\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns BufferTokenizer\r\n */\n\nexport function fromBuffer(uint8Array, fileInfo) {\n  return new BufferTokenizer(uint8Array, fileInfo);\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/node_modules/strtok3/lib/core.js"],"names":["ReadStreamTokenizer","BufferTokenizer","EndOfStreamError","fromStream","stream","fileInfo","fromBuffer","uint8Array"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACzCA,EAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAH,GAAc,EAAjC;AACA,SAAO,IAAIL,mBAAJ,CAAwBI,MAAxB,EAAgCC,QAAhC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,UAApB,EAAgCF,QAAhC,EAA0C;AAC7C,SAAO,IAAIJ,eAAJ,CAAoBM,UAApB,EAAgCF,QAAhC,CAAP;AACH","sourcesContent":["import { ReadStreamTokenizer } from './ReadStreamTokenizer.js';\r\nimport { BufferTokenizer } from './BufferTokenizer.js';\r\nexport { EndOfStreamError } from 'peek-readable';\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\r\n * @returns ReadStreamTokenizer\r\n */\r\nexport function fromStream(stream, fileInfo) {\r\n    fileInfo = fileInfo ? fileInfo : {};\r\n    return new ReadStreamTokenizer(stream, fileInfo);\r\n}\r\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns BufferTokenizer\r\n */\r\nexport function fromBuffer(uint8Array, fileInfo) {\r\n    return new BufferTokenizer(uint8Array, fileInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}