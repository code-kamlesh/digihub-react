{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\History.js\";\n// import React, { Component } from 'react';\nimport React, { Component, PureComponent } from 'react';\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport UserContext from '../components/GolbalContext';\nimport { fetchStudentFile, fetchBulkAllMetaDataByCenterId } from './../util/api';\n\nconst XLSX = require('xlsx');\n\nconst x = 0;\nexport default class History extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disable: false,\n      metaData: [],\n      studentData: [],\n      status_of_File: \"\"\n    };\n    this.loadData = this.loadData.bind(this);\n  }\n\n  loadData() {\n    const response = fetchBulkAllMetaDataByCenterId(UserContext.centerId).then(jsondata => {\n      var metaData = [];\n      let result = JSON.parse(jsondata.data);\n      var arrData = {}; // console.log(\"Bulk Meta Data : \",result)\n\n      result[0].forEach((element, id) => {\n        arrData = element; // console.log(element)\n\n        metaData = [...metaData, {\n          \"regId\": arrData.regId,\n          \"uploadFileName\": arrData.uploadFileName,\n          \"batchName\": arrData.batchName || \"--------------------\",\n          \"records\": arrData.records,\n          \"uploadDate\": arrData.uploadDate,\n          \"status\": arrData.status\n        }];\n      }); // changes\n\n      this.setState({\n        metaData\n      }); // console.log(\"Before \",this.state.metaData)\n\n      for (var i = 0; i < this.state.metaData.length; i++) {\n        if (this.state.metaData[i].status === \"C\") {\n          metaData[i].status = \"Completed\";\n        } else if (this.state.metaData[i].status === \"P\") {\n          metaData[i].status = \"Pending\";\n        } else if (this.state.metaData[i].status === \"L\") {\n          metaData[i].status = \"Not Loaded Yet\";\n        }\n      }\n\n      this.setState({\n        metaData\n      }); // this.setState({metaData})\n      // console.log(\"after \",this.state.metaData)\n    });\n  } // Download the data\n\n\n  downloadFile(e, x) {\n    let studentData = [];\n    const regId = e;\n    const file_name = x; // console.log(x)\n\n    var data = {};\n    fetchStudentFile(regId).then(jsondata => {\n      let res = JSON.parse(jsondata.data);\n      res[0].forEach(element => {\n        // console.log(element)\n        data = element;\n        studentData = [...studentData, {\n          \"Reg_No\": data.regId,\n          \"First_Name\": data.firstName,\n          \"Middle_Name\": data.middleName,\n          \"Last_Name\": data.lastName,\n          \"Batch_Name\": data.batchName,\n          \"Aadhar_Number\": data.aadharNo,\n          \"DOB\": data.dob,\n          \"Gender\": data.gender,\n          \"Highest_Qualification\": data.highestQualification,\n          \"Passing_Year\": data.passingYear,\n          \"Address_Line_1\": data.addressLine1,\n          \"Village\": data.villageName,\n          \"Religion\": data.religion,\n          \"District\": data.district,\n          \"State\": data.state,\n          \"PINCODE\": data.pincode,\n          \"Category\": data.category,\n          \"Primary_Contact_Number\": data.primaryContactNumber,\n          \"Primary_Mail_ID\": data.primaryEmailId,\n          \"College_register_no\": data.collegeRegisterNo,\n          \"Iti_grade\": data.itiGrade,\n          \"Iti_trade\": data.itiTrade,\n          \"created_on\": data.createdOn,\n          // removing to coloum creted by updated by\n          \"Student_ID\": data.studentId,\n          \"Eng_ID\": data.engagementId,\n          \"Status\": data.status,\n          \"Validation_Error\": data.reason // Changes\n\n        }];\n        this.setState({\n          studentData\n        });\n        console.log(\"Student data Before \", studentData);\n        console.log(this.state.studentData[i].status);\n\n        for (var i = 0; i < this.state.studentData.length; i++) {\n          if (this.state.studentData[i].Status === \"D\") {\n            console.log(this.state.studentData[i].status);\n            studentData[i].status = \"Upload Successfully\";\n          } else if (this.state.studentData[i].status === \"P\") {\n            studentData[i].status = \"Upload Pending\";\n          } else if (this.state.studentData[i].status === \"F\") {\n            studentData[i].status = \"Input Data Error\";\n          } else if (this.state.studentData[i].status === \"S\") {\n            studentData[i].status = \"Upload Successfully\";\n          }\n        }\n\n        this.setState({\n          studentData\n        });\n        console.log(\"Student data After \", studentData); // console.log(studentData)\n      }); // console.log(\"Student data in bulk : \",res)\n\n      const workSheet = XLSX.utils.json_to_sheet(studentData);\n      const workBook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workBook, workSheet, file_name); // Genrarting buffer if there is large amount of data\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"buffer\"\n      }); // Binary String\n\n      XLSX.write(workBook, {\n        bookType: \"xlsx\",\n        type: \"binary\"\n      });\n      XLSX.writeFile(workBook, file_name);\n    });\n  } // Changes\n  // routes to bulk upload\n\n\n  routes() {\n    this.props.history.push({\n      pathname: '/dashboard/BulkUpload',\n      state: {}\n    });\n  }\n\n  render() {\n    this.loadData();\n    const Greeting = React.memo(() => {\n      this.loadData();\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      onClick: this.routes.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 14\n      }\n    }, \"Bulk Upload\")), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      style: {\n        width: '80%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, \"Reg Id\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, \"File Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, \"Batch Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \"Records\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, \"Upload Date\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, \"Status\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, this.state.metaData.map((dataValue, id) => /*#__PURE__*/React.createElement(TableRow, {\n      id: \"tablerow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 23\n      }\n    }, dataValue.regId), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 23\n      }\n    }, dataValue.uploadFileName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 23\n      }\n    }, dataValue.batchName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 23\n      }\n    }, dataValue.records), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 23\n      }\n    }, dataValue.uploadDate), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 23\n      }\n    }, dataValue.status), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.downloadFile(dataValue.regId, dataValue.uploadFileName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 35\n      }\n    }, \" Download \"))))))));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/History.js"],"names":["React","Component","PureComponent","Checkbox","InputLabel","Input","Grid","Button","Table","TableBody","TableCell","TableHead","TableRow","UserContext","fetchStudentFile","fetchBulkAllMetaDataByCenterId","XLSX","require","x","History","constructor","props","state","disable","metaData","studentData","status_of_File","loadData","bind","response","centerId","then","jsondata","result","JSON","parse","data","arrData","forEach","element","id","regId","uploadFileName","batchName","records","uploadDate","status","setState","i","length","downloadFile","e","file_name","res","firstName","middleName","lastName","aadharNo","dob","gender","highestQualification","passingYear","addressLine1","villageName","religion","district","pincode","category","primaryContactNumber","primaryEmailId","collegeRegisterNo","itiGrade","itiTrade","createdOn","studentId","engagementId","reason","console","log","Status","workSheet","utils","json_to_sheet","workBook","book_new","book_append_sheet","write","bookType","type","writeFile","routes","history","push","pathname","render","Greeting","memo","width","map","dataValue"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\r\nimport React, { Component, PureComponent } from 'react';\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchStudentFile,fetchBulkAllMetaDataByCenterId} from './../util/api';\r\n\r\nconst XLSX = require('xlsx')\r\nconst x=0\r\nexport default class History extends PureComponent{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            disable:false,\r\n            metaData:[],\r\n            studentData:[],\r\n            status_of_File:\"\",\r\n        } \r\n        this.loadData = this.loadData.bind(this) ;\r\n    }\r\n loadData(){\r\n       const response = fetchBulkAllMetaDataByCenterId(UserContext.centerId).then((jsondata) => {\r\n            var metaData=[]\r\n            let result = JSON.parse(jsondata.data);\r\n            var arrData = {}\r\n            // console.log(\"Bulk Meta Data : \",result)\r\n            result[0].forEach((element ,id)=> {\r\n                arrData=element\r\n                // console.log(element)\r\n                metaData=[\r\n                    ...metaData,\r\n                    {\r\n                        \"regId\":arrData.regId,\r\n                        \"uploadFileName\": arrData.uploadFileName,\r\n                        \"batchName\": arrData.batchName || \"--------------------\",\r\n                        \"records\":arrData.records,\r\n                        \"uploadDate\":arrData.uploadDate,\r\n                        \"status\": arrData.status\r\n                    }]\r\n            });\r\n            // changes\r\n            this.setState({metaData})\r\n            // console.log(\"Before \",this.state.metaData)\r\n            for(var i=0;i<this.state.metaData.length;i++){\r\n\r\n                if(this.state.metaData[i].status === \"C\"){\r\n                    metaData[i].status = \"Completed\" \r\n             }\r\n             else if(this.state.metaData[i].status ===\"P\"){\r\n                metaData[i].status = \"Pending\" \r\n             }\r\n             else if(this.state.metaData[i].status ===\"L\"){\r\n                metaData[i].status = \"Not Loaded Yet\" \r\n             }\r\n            }\r\n\r\n            this.setState({metaData})\r\n            // this.setState({metaData})\r\n            // console.log(\"after \",this.state.metaData)\r\n        })\r\n    }\r\n\r\n    // Download the data\r\n    downloadFile(e,x){\r\n        let studentData=[]\r\n            const regId= e\r\n            const file_name = x\r\n            // console.log(x)\r\n            var data={}\r\n            fetchStudentFile(regId).then((jsondata)=>{\r\n                let res = JSON.parse(jsondata.data)\r\n                res[0].forEach(element=>{\r\n                    // console.log(element)\r\n                    data= element  \r\n                    studentData=[\r\n                        ...studentData,{\r\n                            \"Reg_No\":data.regId,\r\n                            \"First_Name\":data.firstName,\r\n                            \"Middle_Name\": data.middleName,\r\n                            \"Last_Name\": data.lastName,\r\n                            \"Batch_Name\":data.batchName,\r\n                            \"Aadhar_Number\": data.aadharNo,\r\n                            \"DOB\": data.dob,\r\n                            \"Gender\":data.gender,\r\n                            \"Highest_Qualification\":data.highestQualification,\r\n                            \"Passing_Year\": data.passingYear,\r\n                            \"Address_Line_1\": data.addressLine1,\r\n                            \"Village\": data.villageName,\r\n                            \"Religion\":data.religion,\r\n                            \"District\":data.district,\r\n                            \"State\": data.state,\r\n                            \"PINCODE\": data.pincode,\r\n                            \"Category\": data.category,\r\n                            \"Primary_Contact_Number\": data.primaryContactNumber,\r\n                            \"Primary_Mail_ID\": data.primaryEmailId,\r\n                            \"College_register_no\":data.collegeRegisterNo,\r\n                            \"Iti_grade\":data.itiGrade,\r\n                            \"Iti_trade\":data.itiTrade,\r\n                           \"created_on\":data.createdOn,\r\n// removing to coloum creted by updated by\r\n                            \"Student_ID\": data.studentId,\r\n                            \"Eng_ID\":data.engagementId,\r\n                            \"Status\":data.status,\r\n                            \"Validation_Error\":data.reason, // Changes\r\n                    }]\r\n                    this.setState({studentData})\r\n                    console.log(\"Student data Before \", studentData)\r\n                    console.log(this.state.studentData[i].status)\r\n                    for(var i=0;i<this.state.studentData.length;i++){\r\n                        if(this.state.studentData[i].Status === \"D\"){\r\n                            console.log(this.state.studentData[i].status)\r\n                            studentData[i].status = \"Upload Successfully\" \r\n                     }\r\n                     else if(this.state.studentData[i].status ===\"P\"){\r\n                        studentData[i].status = \"Upload Pending\" \r\n                     }\r\n                     else if(this.state.studentData[i].status ===\"F\"){\r\n                        studentData[i].status = \"Input Data Error\" \r\n                     }\r\n                     else if(this.state.studentData[i].status ===\"S\"){\r\n                        studentData[i].status = \"Upload Successfully\" \r\n                     }\r\n                    }\r\n        \r\n                    this.setState({studentData})\r\n                    console.log(\"Student data After \", studentData)\r\n                    // console.log(studentData)\r\n                })\r\n                // console.log(\"Student data in bulk : \",res)\r\n                const workSheet = XLSX.utils.json_to_sheet(studentData)\r\n                const workBook = XLSX.utils.book_new()\r\n\r\n                XLSX.utils.book_append_sheet(workBook,workSheet,file_name)\r\n                // Genrarting buffer if there is large amount of data\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\r\n\r\n                // Binary String\r\n                XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\r\n\r\n                XLSX.writeFile(workBook,file_name)\r\n            })\r\n    }\r\n\r\n    // Changes\r\n    // routes to bulk upload\r\n    routes(){\r\n        this.props.history.push(({ pathname: '/dashboard/BulkUpload',state: {} }));\r\n    }\r\n    render(){\r\n        this.loadData();\r\n        const Greeting = React.memo(()=>{\r\n            this.loadData();\r\n        })\r\n       \r\n        return(\r\n            <div style={{ width: '100%' }}>\r\n\r\n\r\n            <Grid container  justify=\"flex-end\" alignItems=\"flex-end\">\r\n\r\n             <Button type=\"submit\" color=\"primary\"  onClick={this.routes.bind(this)}>\r\n               Bulk Upload\r\n             </Button>\r\n             </Grid>\r\n\r\n            <Grid>\r\n             <Table aria-label=\"simple table\"  style={{ width: '80%'}}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Reg Id</TableCell>\r\n                <TableCell>File Name</TableCell>\r\n                <TableCell>Batch Name</TableCell>\r\n                <TableCell>Records</TableCell>\r\n                <TableCell>Upload Date</TableCell>\r\n                <TableCell>Status</TableCell>\r\n\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {this.state.metaData.map((dataValue, id) => (\r\n                    <TableRow id=\"tablerow\">\r\n                      <TableCell>{dataValue.regId}</TableCell>\r\n                      <TableCell>{dataValue.uploadFileName}</TableCell>\r\n                      <TableCell>{dataValue.batchName}</TableCell>\r\n                      <TableCell>{dataValue.records}</TableCell>\r\n                      <TableCell>{dataValue.uploadDate}</TableCell>\r\n                      <TableCell>{dataValue.status}</TableCell>\r\n                      <TableCell>{<Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.downloadFile(dataValue.regId,dataValue.uploadFileName)} > Download </Button>}</TableCell>\r\n                    </TableRow>))}\r\n            </TableBody>\r\n           </Table>\r\n\r\n           </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}