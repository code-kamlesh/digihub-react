{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\BulkUpload.js\";\nimport React from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport UserContext from '../components/GolbalContext';\nimport { fetchNotCompletedBatchDetails } from '../util/api';\nimport excel from 'xlsx';\nlet today = new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\nlet yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd;\nexport default function (props) {\n  let student_data_count;\n  const option = [{\n    value: 1,\n    label: \"Mobilization\"\n  }, {\n    value: 2,\n    label: \"Enrollment\"\n  }];\n  const [disabled, setDisabled] = useState(true);\n  const [dbUserId, setdbUserId] = useState(0);\n  const [engagementId, setengagementId] = useState(0);\n\n  if (props.id != null && props.id != undefined) {\n    setdbUserId = props.id;\n    setengagementId = props.engagementId;\n  }\n\n  const [batchelist] = useState([]);\n  const [batches, setbatches] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [selectedBatches, setselectedBatches] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [error, setserros] = useState(\"\"); // // Reading excel file\n  // Calling the above function to read the file\n\n  const readExcel = file => {\n    const fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(file);\n\n    fileReader.onload = e => {\n      const bufferArray = e.target.result;\n      const wb = XLSX.read(bufferArray, {\n        type: \"buffer\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const student_data = XLSX.utils.sheet_to_json(ws);\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      console.log(\" Studeny data : \", student_data);\n      student_data_count = data.length - 1;\n      console.log(\"DataCount : \", student_data_count);\n      const requiredHeader = ['Reg No', 'Aadhar No  ', 'First Name ', 'Middle Name', 'Last Name', 'DOB', 'Gender ', ' Highest Qualification', 'Passing Year', 'Address Line 1', 'Village ', 'District ', 'PINCODE ', 'Category', 'Primary Contact Number', 'Primary Mail ID', 'Created date', 'Created by', 'Updated date', ' Updated by', 'Student ID', 'Eng ID', 'Status ', 'Reason'];\n      let flag = true;\n      requiredHeader.map((element, id) => {\n        // console.log(\"elemet \",element, \"data : \",data[0][id])\n        if (flag) {\n          if (element == data[0][id]) {\n            if (id + 1 == requiredHeader.length) {\n              alert(\"Data in proper format\");\n              setDisabled(false);\n            }\n          } else {\n            flag = false;\n            alert(\"please fill the all column as per sample template\");\n            return;\n          }\n        } else {// console.log(\"please fill the all column should not be repwted twice\") \n        }\n      });\n    };\n  }; // For handling the dropdown\n\n\n  const handleChange = e => {\n    setSelectedOption(e);\n    setbatches.value = [];\n    setbatches.label = [];\n\n    if (e == 2 || e === \"Enrollment\") {\n      fetchNotCompletedBatchDetails(UserContext.centerId).then(jsondata => {\n        let result = JSON.parse(jsondata.data); // console.log(result)\n        // console.log(result[0].freezeDate)\n        // setbatches([])\n\n        result.forEach(element => {\n          console.log(\"Condition for date \", element.freezeDate > today);\n\n          if (element.freezeDate > today) {\n            batchelist.push({\n              \"value\": element.batchId,\n              \"label\": element.batchName\n            });\n          }\n        }); //  console.log(batches)\n      });\n    }\n  }; // for handling batches changes\n\n\n  const batchesChanges = e => {\n    setselectedBatches(e);\n    console.log(\"Batchec : \", e); // console.log(UserContext.)\n\n    console.log(setengagementId.label); // console.log(selectedBatches.e)\n  }; // handlingError((e)=>{\n  //   if(setSelectedOption===\"\"){\n  //     setserros=\"Plase select Some option\"\n  //   }\n  // })\n  // Handler for file upload\n\n\n  const onFileChangeHandler = file => {\n    setItems(file);\n    console.log(file);\n    console.log(\"File name:\", file.name);\n    console.log(\"File name:\", file.lastModifiedDate);\n  }; // Upload document\n\n\n  const uploadDocuments = e => {\n    e.preventDefault();\n    items.map(function (setItems) {\n      // uploadDocument(setItems);\n      {\n        uploadDocument(setItems);\n      }\n      console.log(\"file data : \", setItems);\n    }); //   this.setState({documentNumber:''});\n    //   this.setState({clearDropzoneArea: this.state.clearDropzoneArea + 1});\n    //  // this.setState({typeOfDocument:null});\n    //   this.setState({ documentType:[]});\n  }; // Uploading the file in s3 buckket\n\n\n  const uploadDocument = setItems => {\n    //   e.preventDefault();\n    // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\n    var levelOfDocument = \"G\"; // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\n\n    let localThis = this;\n    let reader = new FileReader();\n    reader.readAsDataURL(setItems);\n\n    reader.onload = function () {\n      let document = reader.result;\n      console.log(document); //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\n      //  .then((jsondata) => {\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\n      //        localThis.setState({alertDialogFlag:true});\n      //        localThis.getDocuments();\n      //     })\n    };\n  }; // Routes handling for history\n\n\n  const routeChange = () => {\n    let path = \"./History\"; // history.push(path);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, \"Options\"), /*#__PURE__*/React.createElement(SingleSelect, {\n    name: \"\",\n    id: \"\" // key={this.state.Selectedstate || ''}\n    ,\n    options: option,\n    value: selectedOption,\n    onChange: handleChange // error={handlingError}\n    // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, \"Batches\"), /*#__PURE__*/React.createElement(SingleSelect // key={this.state.Selectedstate || ''}\n  , {\n    name: \"batchname\",\n    id: \"batchId\",\n    options: batchelist,\n    value: selectedBatches,\n    onChange: batchesChanges // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"upload-photo\",\n    type: \"file\",\n    accept: \".xlsx/*, .xls/*\",\n    onClick: e => {\n      e.target.value = null;\n      setDisabled(true);\n    },\n    onChange: e => {\n      const file = e.target.files[0];\n      var substr1 = file.name.substring(file.name.length - 4, file.name.length);\n      var substr2 = file.name.substring(file.name.length - 3, file.name.length);\n\n      if (substr1 == \"xlsx\" || substr2 == \"xls\") {\n        readExcel(file);\n      } else {\n        alert(\"Please Upload Excel file\");\n        return;\n      }\n    },\n    maxFileSize: 2000000,\n    filesLimit: 1,\n    showFileNames: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  }, \"Note-: Document size should not be greater than 2mb.\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 20\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: uploadDocuments,\n    method: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"small\",\n    disabled: disabled // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 15\n    }\n  }, \"Upload Document\"))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 14\n    }\n  }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 22\n    }\n  }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 30\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: routeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 14\n    }\n  }, \"Go to History\")));\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/BulkUpload.js"],"names":["React","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","useHistory","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","UserContext","fetchNotCompletedBatchDetails","excel","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","props","student_data_count","option","value","disabled","setDisabled","dbUserId","setdbUserId","engagementId","setengagementId","id","undefined","batchelist","batches","setbatches","selectedOption","setSelectedOption","selectedBatches","setselectedBatches","items","setItems","error","setserros","readExcel","file","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","student_data","utils","sheet_to_json","data","header","console","log","length","requiredHeader","flag","map","element","alert","handleChange","centerId","then","jsondata","JSON","parse","forEach","freezeDate","push","batchId","batchName","batchesChanges","onFileChangeHandler","name","lastModifiedDate","uploadDocuments","preventDefault","uploadDocument","levelOfDocument","localThis","reader","readAsDataURL","document","routeChange","path","width","files","substr1","substring","substr2","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {DropzoneArea} from 'material-ui-dropzone';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchNotCompletedBatchDetails} from '../util/api';\r\nimport excel from 'xlsx';\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + '-' + mm + '-' + dd;\r\n\r\nexport default function(props){\r\n  let student_data_count\r\n    const option=[{value:1, label:\"Mobilization\"},{value:2 ,label:\"Enrollment\"}]\r\n    const [disabled,setDisabled]= useState(true);\r\n    const [dbUserId,setdbUserId]= useState(0);\r\n    const [engagementId,setengagementId]= useState(0);\r\n    \r\n    if(props.id != null && props.id != undefined)\r\n    {\r\n      setdbUserId=props.id;\r\n      setengagementId=props.engagementId;\r\n    }\r\n    const [batchelist] = useState([])\r\n    const [batches, setbatches]= useState(\"\");\r\n    const [selectedOption, setSelectedOption] = useState(\"\")\r\n    const [selectedBatches, setselectedBatches] = useState(\"\")\r\n    const [items, setItems] = useState([]);\r\n    const[error,setserros]= useState(\"\")\r\n    // // Reading excel file\r\n\r\n    // Calling the above function to read the file\r\n\r\n    const readExcel = (file) => {\r\n\r\n       const fileReader = new FileReader();\r\n       fileReader.readAsArrayBuffer(file);\r\n \r\n       fileReader.onload = (e) => {\r\n         const bufferArray = e.target.result;\r\n \r\n         const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n \r\n         const wsname = wb.SheetNames[0];\r\n \r\n         const ws = wb.Sheets[wsname];\r\n         const student_data = XLSX.utils.sheet_to_json(ws);\r\n\r\n         const data = XLSX.utils.sheet_to_json(ws,{header:1});\r\n         console.log(\" Studeny data : \",student_data)\r\n        student_data_count = data.length-1\r\n         console.log(\"DataCount : \",student_data_count )\r\n\r\n         const requiredHeader =['Reg No', 'Aadhar No  ', 'First Name ', 'Middle Name', 'Last Name', 'DOB', 'Gender ', ' Highest Qualification', 'Passing Year', 'Address Line 1', 'Village ', 'District ', 'PINCODE ', 'Category', 'Primary Contact Number', 'Primary Mail ID', 'Created date', 'Created by', 'Updated date', ' Updated by', 'Student ID', 'Eng ID', 'Status ', 'Reason']\r\n        let flag = true\r\n        requiredHeader.map((element,id) =>{\r\n          // console.log(\"elemet \",element, \"data : \",data[0][id])\r\n          if(flag){\r\n            if(element==data[0][id]){\r\n                if(id+1 == requiredHeader.length)\r\n                {\r\n                alert(\"Data in proper format\");\r\n                setDisabled(false)\r\n            }\r\n          }\r\n            else{\r\n              flag = false\r\n              alert(\"please fill the all column as per sample template\")\r\n              return;\r\n            }\r\n          }\r\n          else{\r\n            // console.log(\"please fill the all column should not be repwted twice\") \r\n          }\r\n         \r\n        })\r\n       }\r\n     \r\n   }\r\n\r\n\r\n    \r\n    // For handling the dropdown\r\n    const handleChange=((e)=>{\r\n      setSelectedOption(e);\r\n      setbatches.value=[]\r\n      setbatches.label=[]\r\n      if(e== 2 || e === \"Enrollment\"){\r\n        fetchNotCompletedBatchDetails(UserContext.centerId).then((jsondata) => {\r\n          let result = JSON.parse(jsondata.data);\r\n          // console.log(result)\r\n          // console.log(result[0].freezeDate)\r\n          // setbatches([])\r\n         result.forEach(element => {\r\n\r\n           console.log(\"Condition for date \" , element.freezeDate > today)\r\n            \r\n            if(element.freezeDate > today ){\r\n              batchelist.push({\r\n                \"value\" : element.batchId,\r\n                \"label\": element.batchName\r\n              })\r\n\r\n          }\r\n         });\r\n         \r\n        //  console.log(batches)\r\n        })\r\n      }\r\n    })\r\n\r\n    // for handling batches changes\r\n   const  batchesChanges= ((e)=>{\r\n      setselectedBatches(e)\r\n      console.log(\"Batchec : \",e)\r\n      // console.log(UserContext.)\r\n      console.log(setengagementId.label)\r\n      // console.log(selectedBatches.e)\r\n    })\r\n\r\n    \r\n    // handlingError((e)=>{\r\n    //   if(setSelectedOption===\"\"){\r\n    //     setserros=\"Plase select Some option\"\r\n    //   }\r\n    // })\r\n\r\n    // Handler for file upload\r\n\r\n    const onFileChangeHandler = ((file)=>{\r\n      setItems(file);\r\n      console.log(file)\r\n      console.log(\"File name:\" , file.name)\r\n      console.log(\"File name:\" , file.lastModifiedDate)\r\n     \r\n    })\r\n\r\n    // Upload document\r\n    const uploadDocuments = ((e)=>{\r\n     \r\n        e.preventDefault();\r\n        items.map(function(setItems){\r\n        // uploadDocument(setItems);\r\n        {uploadDocument(setItems)}\r\n        console.log(\"file data : \",setItems)\r\n      });\r\n    \r\n    //   this.setState({documentNumber:''});\r\n    //   this.setState({clearDropzoneArea: this.state.clearDropzoneArea + 1});\r\n    //  // this.setState({typeOfDocument:null});\r\n    //   this.setState({ documentType:[]});\r\n        \r\n    })\r\n\r\n    // Uploading the file in s3 buckket\r\n    const uploadDocument = ((setItems)=>{\r\n        //   e.preventDefault();\r\n       // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\r\n       var levelOfDocument=\"G\";\r\n       // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\r\n       \r\n       \r\n       let localThis=this;\r\n       \r\n       let reader = new FileReader();\r\n       reader.readAsDataURL(setItems);\r\n       reader.onload = function () {\r\n       let  document = reader.result;\r\n       console.log(document)\r\n      //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\r\n      //  .then((jsondata) => {\r\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\r\n      //        localThis.setState({alertDialogFlag:true});\r\n      //        localThis.getDocuments();\r\n      //     })\r\n       }\r\n         \r\n    })\r\n\r\n// Routes handling for history\r\n    const routeChange=(()=>{\r\n      let path = \"./History\"; \r\n      // history.push(path);\r\n      \r\n    })\r\n        return(\r\n          \r\n            <Grid container>\r\n               <Grid container>\r\n                <Grid item xs={12}> </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Options</InputLabel>\r\n            <SingleSelect\r\n              name=\"\" id=\"\"\r\n              // key={this.state.Selectedstate || ''}\r\n              options={option}\r\n              value={selectedOption}\r\n              onChange={handleChange}\r\n              // error={handlingError}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n\r\n           <Grid item xs={12} sm={2}></Grid>\r\n            <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Batches</InputLabel>\r\n            <SingleSelect\r\n              // key={this.state.Selectedstate || ''}\r\n              name=\"batchname\"  id =\"batchId\"\r\n              options={batchelist}\r\n              value={selectedBatches}\r\n              onChange={batchesChanges}\r\n              \r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n          </Grid>\r\n         \r\n          <Table  aria-label=\"simple table\" style={{ width:\"100%\"}}>\r\n          <TableBody>\r\n          <TableRow>\r\n            <TableCell> \r\n            <Input \r\n               name=\"upload-photo\"\r\n               type=\"file\"\r\n               accept='.xlsx/*, .xls/*'\r\n               onClick={e => {\r\n                (e.target.value = null)\r\n                setDisabled(true)\r\n              }\r\n               }\r\n               onChange={(e) => {\r\n                const file = e.target.files[0];\r\n                var substr1 = file.name.substring(file.name.length-4, file.name.length);\r\n                var substr2 = file.name.substring(file.name.length-3, file.name.length);\r\n                if(substr1== \"xlsx\" || substr2 == \"xls\"){\r\n                  readExcel(file); \r\n                }\r\n                else{\r\n                  alert(\"Please Upload Excel file\")\r\n                  return;\r\n                }\r\n               \r\n              }}\r\n              maxFileSize={2000000} filesLimit={1} showFileNames={true}\r\n              />\r\n              <p  style={{color:\"red\"}}>Note-: Document size should not be greater than 2mb.</p>\r\n            </TableCell>\r\n            </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n            <br /> <br />\r\n            <form onSubmit={uploadDocuments} method=\"post\">\r\n              <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" disabled={disabled}\r\n                    // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\r\n             >Upload Document</Button>\r\n             </Grid>\r\n\r\n             </form>\r\n\r\n\r\n\r\n             <br />  <br />  <br />\r\n\r\n             <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n             <Button color=\"primary\"  onClick={routeChange}>\r\n               Go to History\r\n             </Button>\r\n             </Grid>\r\n            </Grid>\r\n       \r\n        )\r\n}   "]},"metadata":{},"sourceType":"module"}