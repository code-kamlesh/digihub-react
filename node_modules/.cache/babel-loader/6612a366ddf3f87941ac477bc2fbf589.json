{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\CourseEnrollment.js\";\nimport React from 'react';\nimport { Grid, InputLabel, Input, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport UserContext from '../components/GolbalContext';\nimport { getUdyogMitraAndSkillInstitute, fetchSkillMithraByIdAndProgramId, findInformalCourses, saveInformalEnrollmentDetails, fectEnrollmentDetails, findSkillmithraByOrgId, changeStudentStatus } from '../util/api';\nimport { getBusinessCaseDocument, getExperienceDetails, getBasicDetails, getAddressData, getFamilyData, getBusinessCaseData, getExistingBusiness, validateInterestInventory, getSocioEconomicData, validateEducationData, validateSingleCounselData, validateEndDate, validateStartDate } from './../util/validation'; //since there are only two center types so this is constant \n\nconst centerType = [//{ value: 'skillmithra', label: 'Skill Mithra' },\n{\n  value: 'skillinginstitute',\n  label: 'Skilling Institute'\n}, {\n  value: 'udhyogmithra',\n  label: 'Udhyog Mithra'\n}, {\n  value: 'entrepreneurship',\n  label: 'Entrepreneurship'\n}];\nexport default class CourseEnrollment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      availaibleCenters: [],\n      selectedCenterType: '',\n      selectedAvailableCenter: '',\n      endDate: '',\n      startDate: '',\n      errors: {},\n      selectedCourseName: '',\n      courseNameOptions: [],\n      orgId: '',\n      courseId: '',\n      engagementId: props.engagementId,\n      batchId: '0',\n      createdBy: UserContext.userid,\n      disableSelects: false,\n      disableAll: false,\n      res: {},\n      linkedEngagementId: props.linkedEngagementId,\n      dbUserId: props.id\n    }; //find informal courses so options filled are centerType and CoursesAvailable\n\n    findInformalCourses().then(jsondata => {\n      let res = JSON.parse(jsondata.data);\n      res.forEach(value => {\n        this.setState({\n          courseNameOptions: [...this.state.courseNameOptions, {\n            'label': value.name,\n            'value': value.name,\n            'courseId': value.id\n          }]\n        });\n      });\n    }); //if user has already saved enrollment then fetch the details and auto populate the values\n\n    fectEnrollmentDetails(this.state.engagementId).then(jsondata => {\n      let savedData = JSON.parse(jsondata.data);\n      savedData = savedData[0]; //if data is present then unload the data orgId, courseId etc and fetch the appropriate details\n\n      if (savedData != undefined) {\n        this.setState({\n          orgId: savedData.orgId,\n          batchId: savedData.batchId,\n          createdBy: savedData.createdBy\n        }); //fetching the courseName from available courses by courseId from courseNameOptions\n\n        this.state.courseNameOptions.forEach(course => {\n          if (savedData.courseId == course.courseId) {\n            this.setState({\n              selectedCourseName: course.value,\n              courseId: course.courseId\n            });\n          }\n        });\n        this.state.disableAll = false;\n        this.state.disableSelects = false;\n        let startDate = new Date(savedData.startDate);\n        let endDate = new Date(savedData.endDate);\n        let today = new Date(); // today = today.getFullYear() + \"-\" + (((today.getMonth() + 1) < 10) ? \"0\" + (today.getMonth() + 1) : (today.getMonth() + 1)) + \"-\" + ((today.getDate() < 10) ? \"0\" + today.getDate() : today.getDate());\n        //disable all the selects + start Date incase date is lesser than today \n        // (startDate < today) ? this.setState({ disableSelects: true }) : this.setState({ disableSelects: false })\n        // console.log(startDate.getDate()+1,\" today \", today.getDate()+1 ,\" end \", endDate.getDate()+1)\n        // console.log(today+1,\" Startdate \",  startDate+1 ,\" end \", endDate+1,\"\")\n\n        let diff = today.getDate() > startDate.getDate() ? today.getDate() - startDate.getDate() : startDate.getDate() - today.getDate(); // // console.log(30 - diff)\n\n        let dateDiff = 31 - diff; // console.log(dateDiff) \n        // console.log(\"Start Date \",startDate.getDate()-1)\n        // console.log(\"today Date \",(31-(today.getDate()-6)))\n\n        let currentDay = new Date(startDate);\n        console.log(\"Start \", currentDay);\n        let nextday1 = currentDay.setDate(startDate.getDate() + 4);\n        let nextday2 = currentDay.setDate(startDate.getDate() + 5);\n        console.log(nextday1 > currentDay);\n        console.log(nextday1 < nextday2); // nextDay.setDate(startDate.getDate() + 4);\n        // console.log(nextDay.getDate())\n        // console.log(nextDay.getMonth())\n        // let nextMonth= (new Date(startDate).getMonth()+1)%12 + 1\n        // let currentMonth = (new startDate().getMonth()+1)%12\n        // let x = (currentMonth<nextMonth)\n        // console.log(\"Month\",x)\n        // console.log(\"First + \",(30-(today.getDate()- startDate.getDate())))\n        // console.log(\"Second \",(30-(today.getDate()- startDate.getDate()))<=3)\n        // if (dateDiff>7)\n\n        if (nextday1 > currentDay && nextday1 < nextday2) {\n          this.setState({\n            disableSelects: true\n          });\n        } //disable all the selects + start Date incase date is lesser than today \n        // (startDate < today) ? this.setState({ disableSelects: true }) : this.setState({ disableSelects: false })\n\n\n        if (endDate < today) {\n          //console.log('disable All')\n          this.setState({\n            disableAll: true\n          });\n        } //In js month of any date when converted comes one month back so to avoid this code is written as +1 eg month[0] = \"January\"\n        //getting the dates in proper format to populate the data i.e. yyyy-MM-dd\n\n\n        startDate = startDate.getFullYear() + \"-\" + (startDate.getMonth() + 1 < 10 ? \"0\" + (startDate.getMonth() + 1) : startDate.getMonth() + 1) + \"-\" + (startDate.getDate() < 10 ? \"0\" + startDate.getDate() : startDate.getDate());\n        endDate = endDate.getFullYear() + \"-\" + (endDate.getMonth() + 1 < 10 ? \"0\" + (endDate.getMonth() + 1) : endDate.getMonth() + 1) + \"-\" + (endDate.getDate() < 10 ? \"0\" + endDate.getDate() : endDate.getDate());\n        this.setState({\n          startDate,\n          endDate\n        }); //if orgId is present fetch all the orgName, enterType from findskillmithraByOrgId\n\n        if (this.state.orgId != undefined || this.state.orgId != '') {\n          getUdyogMitraAndSkillInstitute(this.state.orgId).then(jsondata => {\n            let response = JSON.parse(jsondata.data);\n            response = response[0];\n\n            if (response) {\n              this.setState({\n                selectedAvailableCenter: response.organizationName,\n                selectedCenterType: response.orgType\n              });\n            } //options from getUdyogMitraAndSkillInstitute to be populated in the option in availableCenters\n\n\n            fetchSkillMithraByIdAndProgramId(this.state.selectedCenterType, UserContext.defaultProgramId).then(jsondata => {\n              let res = JSON.parse(jsondata.data);\n\n              if (res) {\n                res.forEach(value => {\n                  this.setState({\n                    availaibleCenters: [...this.state.availaibleCenters, {\n                      'label': value.organizationName,\n                      'value': value.organizationName,\n                      'orgId': value.orgId\n                    }]\n                  });\n                });\n              }\n            });\n          });\n        }\n      }\n    }); //validate if the prior data is filled or not\n\n    if (UserContext.defaultProgramId != 1) {\n      this.validateData();\n    }\n  }\n\n  componentDidUpdate() {\n    //this.handleselectedCenterType.bind(this, 'selectedCenterType')\n    this.handleStartDate = this.handleStartDate.bind(this);\n    this.handleEndDate = this.handleEndDate.bind(this);\n    this.validateEndDate = this.validateEndDate.bind(this);\n    this.validateStartDate = this.validateStartDate.bind(this);\n    this.writeEmptyError = this.writeEmptyError.bind(this);\n    this.verify = this.verify.bind(this);\n  }\n\n  validateStartDate() {\n    let dateError = validateStartDate(this.state.startDate);\n\n    if (dateError) {\n      this.setState({\n        errors: { ...this.state.errors,\n          startDate: {\n            'label': dateError,\n            'value': true\n          }\n        }\n      });\n      return true;\n    }\n  }\n\n  validateEndDate() {\n    let dateError = validateEndDate(this.state.endDate);\n\n    if (dateError) {\n      this.setState({\n        errors: { ...this.state.errors,\n          endDate: {\n            'label': dateError,\n            'value': true\n          }\n        }\n      });\n      return true;\n    }\n  } //if anything comes as empty this is the error\n\n\n  writeEmptyError(fieldname, error) {\n    this.setState({\n      errors: { ...this.state.errors,\n        [fieldname]: {\n          'label': error,\n          'value': true\n        }\n      }\n    });\n  }\n\n  validateData() {\n    getFamilyData(this.state.engagementId, this.state.dbUserId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['family']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n    getExperienceDetails(this.state.engagementId, this.state.dbUserId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['experience']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n    getBasicDetails(this.state.engagementId, this.state.dbUserId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['basic']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n    validateInterestInventory(UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9 ? this.state.linkedEngagementId : this.state.engagementId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['inventory']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n    getAddressData(this.state.engagementId, this.state.dbUserId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['address']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    }); //observation is only mandatory for existing student of TS not for outside TS\n    //if (UserContext.defaultProgramId != 7) {\n    //   getBusinessCaseData((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId, this.state.dbUserId).then(result => {this.setState({\n    //     res: {\n    //       ...this.state.res, ['bc']: result\n    //     }\n    //   })\n    //   if(result){\n    //     this.setState({\n    //       disableSelects : true,\n    //       disableAll : true\n    //     })\n    //   }\n    // });\n    //   getBusinessCaseDocument((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId).then(result => {this.setState({\n    //     res: {\n    //       ...this.state.res, ['document']: result\n    //     }\n    //   })\n    //   if(result){\n    //     this.setState({\n    //       disableSelects : true,\n    //       disableAll : true\n    //     })\n    //   }\n    // });\n    // getExistingBusiness((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId).then(result => {\n    //   this.setState({\n    //     res: {\n    //       ...this.state.res, ['existingBusiness']: result\n    //     }\n    //   })\n    //   if (result) {\n    //     this.setState({\n    //       disableSelects: true,\n    //       disableAll: true\n    //     })\n    //   }\n    // });\n    //}\n\n    getSocioEconomicData(this.state.engagementId, this.state.dbUserId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['socio']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n    validateEducationData(this.state.engagementId, this.state.dbUserId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['education']: result\n        }\n      });\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n    validateSingleCounselData(this.state.engagementId).then(result => {\n      this.setState({\n        res: { ...this.state.res,\n          ['Single Counselling']: result\n        }\n      }); //console.log(result)\n\n      if (result) {\n        this.setState({\n          disableSelects: true,\n          disableAll: true\n        });\n      }\n    });\n  }\n\n  verify() {\n    //console.log(this.state)\n    let isEmpty = '';\n    let count = 0;\n\n    if (this.state.disableSelects) {\n      //For End Date if field is empty\n      if (this.state.endDate == undefined || this.state.endDate === 'NaN-NaN-NaN') {\n        this.writeEmptyError('endDate', 'Field cannot be empty');\n        isEmpty = isEmpty + ' End Date \\n ';\n      } else {\n        this.validateEndDate(this.state.endDate) ? isEmpty = isEmpty + ' End Date \\n' : isEmpty = isEmpty + '';\n      }\n    } else {\n      var _this$state$errors, _this$state$errors$se, _this$state$errors3, _this$state$errors3$s, _this$state$errors5, _this$state$errors5$s, _this$state$errors7, _this$state$errors7$s, _this$state$errors9, _this$state$errors9$e;\n\n      //checking if the fields are empty or any error present\n      //For Center Type if field is empty \n      if (this.state.selectedCenterType == undefined || this.state.selectedCenterType === '' || ((_this$state$errors = this.state.errors) === null || _this$state$errors === void 0 ? void 0 : (_this$state$errors$se = _this$state$errors.selectedCenterType) === null || _this$state$errors$se === void 0 ? void 0 : _this$state$errors$se.value)) {\n        var _this$state$errors2, _this$state$errors2$s;\n\n        if ((_this$state$errors2 = this.state.errors) === null || _this$state$errors2 === void 0 ? void 0 : (_this$state$errors2$s = _this$state$errors2.selectedCenterType) === null || _this$state$errors2$s === void 0 ? void 0 : _this$state$errors2$s.value) {\n          this.writeEmptyError('selectedCenterType', this.state.errors.selectedCenterType.label);\n          count += 1;\n        } else {\n          this.writeEmptyError('selectedCenterType', 'Field cannot be empty');\n          isEmpty = isEmpty + ' Center Type \\n ';\n        }\n      } //For Availaible Center if field is empty \n\n\n      if (this.state.selectedAvailableCenter == undefined || this.state.selectedAvailableCenter === '' || this.state.orgId === undefined || this.state.orgId === '' || ((_this$state$errors3 = this.state.errors) === null || _this$state$errors3 === void 0 ? void 0 : (_this$state$errors3$s = _this$state$errors3.selectedCenterType) === null || _this$state$errors3$s === void 0 ? void 0 : _this$state$errors3$s.value)) {\n        var _this$state$errors4, _this$state$errors4$s;\n\n        if ((_this$state$errors4 = this.state.errors) === null || _this$state$errors4 === void 0 ? void 0 : (_this$state$errors4$s = _this$state$errors4.selectedAvailableCenter) === null || _this$state$errors4$s === void 0 ? void 0 : _this$state$errors4$s.value) {\n          this.writeEmptyError('selectedAvailableCenter', this.state.selectedAvailableCenter.label);\n          count += 1;\n        } else {\n          this.writeEmptyError('selectedAvailableCenter', 'Field cannot be empty');\n          isEmpty = isEmpty + ' Availaible Center \\n ';\n        }\n      } //For Course Name if field is empty \n\n\n      if (this.state.selectedCourseName === undefined || this.state.selectedCourseName === '' || this.state.courseId === undefined || this.state.courseId === '' || ((_this$state$errors5 = this.state.errors) === null || _this$state$errors5 === void 0 ? void 0 : (_this$state$errors5$s = _this$state$errors5.selectedCourseName) === null || _this$state$errors5$s === void 0 ? void 0 : _this$state$errors5$s.value)) {\n        var _this$state$errors6, _this$state$errors6$s;\n\n        if ((_this$state$errors6 = this.state.errors) === null || _this$state$errors6 === void 0 ? void 0 : (_this$state$errors6$s = _this$state$errors6.selectedCourseName) === null || _this$state$errors6$s === void 0 ? void 0 : _this$state$errors6$s.value) {\n          this.writeEmptyError('selectedCourseName', this.state.selectedCourseName.label);\n          count += 1;\n        } else {\n          this.writeEmptyError('selectedCourseName', 'Field cannot be empty');\n          isEmpty = isEmpty + ' Course Name \\n ';\n        }\n      } //For Start Date if field is empty\n\n\n      if (this.state.startDate == undefined || this.state.startDate === 'NaN-NaN-NaN' || ((_this$state$errors7 = this.state.errors) === null || _this$state$errors7 === void 0 ? void 0 : (_this$state$errors7$s = _this$state$errors7.startDate) === null || _this$state$errors7$s === void 0 ? void 0 : _this$state$errors7$s.value)) {\n        var _this$state$errors8, _this$state$errors8$s;\n\n        if ((_this$state$errors8 = this.state.errors) === null || _this$state$errors8 === void 0 ? void 0 : (_this$state$errors8$s = _this$state$errors8.startDate) === null || _this$state$errors8$s === void 0 ? void 0 : _this$state$errors8$s.value) {\n          this.writeEmptyError('startDate', this.state.errors.startDate.label);\n          count += 1;\n        } else {\n          this.writeEmptyError('startDate', 'Field cannot be empty');\n          isEmpty = isEmpty + ' Start Date \\n ';\n        }\n      } //For End Date if field is empty\n\n\n      if (this.state.endDate == undefined || this.state.endDate === 'NaN-NaN-NaN' || ((_this$state$errors9 = this.state.errors) === null || _this$state$errors9 === void 0 ? void 0 : (_this$state$errors9$e = _this$state$errors9.endDate) === null || _this$state$errors9$e === void 0 ? void 0 : _this$state$errors9$e.value)) {\n        var _this$state$errors10, _this$state$errors10$;\n\n        if ((_this$state$errors10 = this.state.errors) === null || _this$state$errors10 === void 0 ? void 0 : (_this$state$errors10$ = _this$state$errors10.endDate) === null || _this$state$errors10$ === void 0 ? void 0 : _this$state$errors10$.value) {\n          this.writeEmptyError('endDate', this.state.errors.endDate.label);\n          count += 1;\n        } else {\n          this.writeEmptyError('endDate', 'Field cannot be empty');\n          isEmpty = isEmpty + ' End Date \\n ';\n        }\n      }\n    }\n\n    if (isEmpty || count > 0) {\n      if (isEmpty) {\n        alert(\"Please Fill in the Following values\\n\" + isEmpty);\n      } else {\n        alert(\"There are one or more errors in the fields!\");\n      }\n    } else {\n      //console.log(this.state)\n      //alert('hurray!!')\n      let statusChangeData = '\"engagementId\":' + this.state.engagementId + ',\"status\":\"enrolled\", \"updatedBy\":' + UserContext.userid + ''; //api call for saving the information   \n\n      saveInformalEnrollmentDetails(this.state.engagementId, '0', this.state.courseId, UserContext.userid, this.state.startDate, this.state.endDate, this.state.orgId).then(jsondata => {\n        //let result = jsondata.status\n        let resultSave = jsondata.status;\n\n        if (resultSave === \"success\") {\n          //console.log('hello')\n          //api to change the status to enrolled\n          changeStudentStatus(statusChangeData).then(jsondata => {\n            let resultStatus = jsondata.status;\n\n            if (resultSave === \"success\" && resultStatus === \"success\") {\n              alert(\"Successfully Enrolled\");\n              setTimeout(() => {\n                this.props.history.push({\n                  pathname: '/dashboard/managebeneficiary',\n                  state: {}\n                });\n              }, 3000);\n            } else {\n              alert(\"Data not saved/updated successfully, Please try again!\"); //console.log('try again \\n' + this.state)\n            }\n          });\n        } else {\n          alert(\"Both Start date and End date are Mandatory!\");\n        }\n      });\n    }\n  }\n\n  handleStartDate(event) {\n    let dateError = validateStartDate(event.target.value);\n    this.setState({\n      [event.target.name]: event.target.value,\n      endDate: '',\n      errors: { ...this.state.errors,\n        [event.target.name]: {\n          'label': dateError ? dateError : '',\n          'value': dateError ? true : false\n        }\n      }\n    });\n  }\n\n  handleEndDate(event) {\n    let dateError = validateEndDate(event.target.value);\n    this.setState({\n      [event.target.name]: event.target.value,\n      errors: { ...this.state.errors,\n        [event.target.name]: {\n          'label': dateError ? dateError : '',\n          'value': dateError ? true : false\n        }\n      }\n    });\n  }\n\n  handleselectedCenterType(selectname, value) {\n    this.setState({\n      [selectname]: value,\n      availaibleCenters: [],\n      selectedAvailableCenter: '',\n      selectedCourseName: '',\n      courseId: '',\n      orgId: '',\n      errors: { ...this.state.errors,\n        selectedCenterType: {\n          'label': '',\n          'value': false\n        },\n        selectedAvailableCenter: {\n          'label': 'Please select some option',\n          'value': true\n        },\n        selectedCourseName: {\n          'label': 'Please select some option',\n          'value': true\n        }\n      }\n    });\n    fetchSkillMithraByIdAndProgramId(value, UserContext.defaultProgramId).then(jsondata => {\n      let result = jsondata.data;\n      result = JSON.parse(result);\n      result.forEach(center => {\n        this.setState({\n          availaibleCenters: [...this.state.availaibleCenters, {\n            'label': center.organizationName,\n            'value': center.organizationName,\n            'orgId': center.orgId\n          }]\n        });\n      });\n    });\n  }\n\n  handleSelectedAvailableCenter(selectname, value) {\n    let orgId = '';\n    this.state.availaibleCenters.forEach(center => {\n      if (center.label == value || center.value == value) {\n        orgId = center.orgId;\n      }\n    });\n    this.setState({\n      [selectname]: value,\n      orgId: orgId,\n      selectedCourseName: '',\n      courseId: '',\n      errors: { ...this.state.errors,\n        selectedAvailableCenter: {\n          'label': '',\n          'value': false\n        },\n        selectedCourseName: {\n          'label': 'Please select some option',\n          'value': true\n        }\n      }\n    });\n  }\n\n  handleSelectedCourseName(selectname, value) {\n    let courseId = '';\n    this.state.courseNameOptions.forEach(course => {\n      if (course.label == value || course.value == value) {\n        courseId = course.courseId;\n      }\n    });\n    this.setState({\n      [selectname]: value,\n      courseId: courseId,\n      errors: { ...this.state.errors,\n        selectedCourseName: {\n          'label': '',\n          'value': false\n        }\n      }\n    });\n  }\n\n  render() {\n    let res = [];\n\n    if (this.state.res.basic) {\n      res.push(\"Basic details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.address) {\n      res.push(\"Address details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.family) {\n      res.push(\"Family details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.experience) {\n      res.push(\"Experience details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.bc) {\n      res.push(\"Business case details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.document) {\n      res.push(\"Business case document not uploaded\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.ob) {\n      res.push(\"Observations details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.inventory) {\n      res.push(\"Interest Inventory details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.existingBusiness) {\n      res.push(\"Existing Business details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.socio) {\n      res.push(\"SocioEconomic details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.education) {\n      res.push(\"Education details\"); //console.log(this.state.res)\n    }\n\n    if (this.state.res.Counselling) {\n      res.push(\"Counselling details\"); //console.log(this.state.res)\n    } //console.log(res)\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 7\n      }\n    }, res.length != 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 31\n      }\n    }, \"Below details are incomplete\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 9\n      }\n    }, \" \", res.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        fontWeight: \"600\",\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 15\n      }\n    }, \" \", item)))), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.verify,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 15\n      }\n    }, \"Center Type\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"selectedCenterType\",\n      options: centerType,\n      onChange: this.handleselectedCenterType.bind(this, 'selectedCenterType'),\n      value: this.state.selectedCenterType || '',\n      key: this.state.selectedCenterType || '',\n      id: \"selectedCenterType\",\n      helperText: this.state.errors.selectedCenterType != undefined ? this.state.errors.selectedCenterType.label : '',\n      error: this.state.errors.selectedCenterType != undefined ? this.state.errors.selectedCenterType.value : '',\n      disabled: this.state.disableSelects ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 15\n      }\n    }, \"Available Centers\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"selectedAvailableCenter\",\n      options: this.state.availaibleCenters || '',\n      onChange: this.handleSelectedAvailableCenter.bind(this, 'selectedAvailableCenter'),\n      value: this.state.selectedAvailableCenter || '',\n      key: this.state.selectedAvailableCenter || '',\n      id: \"selectedAvailableCenter\",\n      helperText: this.state.errors.selectedAvailableCenter != undefined ? this.state.errors.selectedAvailableCenter.label : '',\n      error: this.state.errors.selectedAvailableCenter != undefined ? this.state.errors.selectedAvailableCenter.value : '',\n      disabled: this.state.disableSelects ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 15\n      }\n    }, \"Courses Available\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"selectedCourseName\",\n      options: this.state.courseNameOptions,\n      onChange: this.handleSelectedCourseName.bind(this, 'selectedCourseName'),\n      value: this.state.selectedCourseName || '',\n      key: this.state.selectedCourseName || '',\n      id: \"selctedCourseName\",\n      helperText: this.state.errors.selectedCourseName != undefined ? this.state.errors.selectedCourseName.label : '',\n      error: this.state.errors.selectedCourseName != undefined ? this.state.errors.selectedCourseName.value : '',\n      disabled: this.state.disableSelects ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 15\n      }\n    }, \"Start Date\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"startDate\",\n      id: \"startDate\",\n      value: this.state.startDate || '',\n      onChange: this.handleStartDate // error={this.state.errors.startDate != undefined ? this.state.errors.startDate.value : ''}\n      //helperText={this.state.errors.startDate != undefined ? this.state.errors.startDate.label : ''}\n      ,\n      disabled: this.state.disableSelects ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 15\n      }\n    }, this.state.errors.startDate != undefined ? this.state.errors.startDate.label : '')), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 15\n      }\n    }, \"End Date \"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"endDate\",\n      id: \"endDate\",\n      value: this.state.endDate || '',\n      onChange: this.handleEndDate,\n      error: this.state.errors.endDate != undefined ? this.state.errors.endDate.value : '' //helperText={this.state.errors.endDate != undefined ? this.state.errors.endDate.label : ''}\n      ,\n      disabled: this.state.disableAll ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 15\n      }\n    }, this.state.errors.endDate != undefined ? this.state.errors.endDate.label : '')), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.verify,\n      disabled: this.state.disableAll ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 15\n      }\n    }, \"submit\")))));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/CourseEnrollment.js"],"names":["React","Grid","InputLabel","Input","Button","SingleSelect","UserContext","getUdyogMitraAndSkillInstitute","fetchSkillMithraByIdAndProgramId","findInformalCourses","saveInformalEnrollmentDetails","fectEnrollmentDetails","findSkillmithraByOrgId","changeStudentStatus","getBusinessCaseDocument","getExperienceDetails","getBasicDetails","getAddressData","getFamilyData","getBusinessCaseData","getExistingBusiness","validateInterestInventory","getSocioEconomicData","validateEducationData","validateSingleCounselData","validateEndDate","validateStartDate","centerType","value","label","CourseEnrollment","Component","constructor","props","state","availaibleCenters","selectedCenterType","selectedAvailableCenter","endDate","startDate","errors","selectedCourseName","courseNameOptions","orgId","courseId","engagementId","batchId","createdBy","userid","disableSelects","disableAll","res","linkedEngagementId","dbUserId","id","then","jsondata","JSON","parse","data","forEach","setState","name","savedData","undefined","course","Date","today","diff","getDate","dateDiff","currentDay","console","log","nextday1","setDate","nextday2","getFullYear","getMonth","response","organizationName","orgType","defaultProgramId","validateData","componentDidUpdate","handleStartDate","bind","handleEndDate","writeEmptyError","verify","dateError","fieldname","error","result","isEmpty","count","alert","statusChangeData","resultSave","status","resultStatus","setTimeout","history","push","pathname","event","target","handleselectedCenterType","selectname","center","handleSelectedAvailableCenter","handleSelectedCourseName","render","basic","address","family","experience","bc","document","ob","inventory","existingBusiness","socio","education","Counselling","width","length","map","item","fontWeight","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Grid, InputLabel, Input, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport UserContext from '../components/GolbalContext'\r\nimport { getUdyogMitraAndSkillInstitute,fetchSkillMithraByIdAndProgramId, findInformalCourses, saveInformalEnrollmentDetails, fectEnrollmentDetails, findSkillmithraByOrgId, changeStudentStatus } from '../util/api';\r\nimport {\r\n  getBusinessCaseDocument, getExperienceDetails, getBasicDetails, getAddressData, getFamilyData, getBusinessCaseData, getExistingBusiness,\r\n  validateInterestInventory, getSocioEconomicData, validateEducationData, validateSingleCounselData, validateEndDate, validateStartDate\r\n} from './../util/validation';\r\n\r\n\r\n//since there are only two center types so this is constant \r\nconst centerType = [\r\n  //{ value: 'skillmithra', label: 'Skill Mithra' },\r\n  { value: 'skillinginstitute', label: 'Skilling Institute' },\r\n  { value: 'udhyogmithra', label: 'Udhyog Mithra' },\r\n  { value: 'entrepreneurship', label: 'Entrepreneurship' }\r\n];\r\n\r\nexport default class CourseEnrollment extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      availaibleCenters: [],\r\n      selectedCenterType: '',\r\n      selectedAvailableCenter: '',\r\n      endDate: '',\r\n      startDate: '',\r\n      errors: {},\r\n      selectedCourseName: '',\r\n      courseNameOptions: [],\r\n      orgId: '',\r\n      courseId: '',\r\n      engagementId: props.engagementId,\r\n      batchId: '0',\r\n      createdBy: UserContext.userid,\r\n      disableSelects: false,\r\n      disableAll: false,\r\n      res: {},\r\n      linkedEngagementId: props.linkedEngagementId,\r\n      dbUserId: props.id\r\n    }\r\n    //find informal courses so options filled are centerType and CoursesAvailable\r\n    findInformalCourses().then((jsondata) => {\r\n      let res = JSON.parse(jsondata.data)\r\n      res.forEach((value) => {\r\n        this.setState({\r\n          courseNameOptions: [...this.state.courseNameOptions,\r\n          {\r\n            'label': value.name,\r\n            'value': value.name,\r\n            'courseId': value.id\r\n          }]\r\n        })\r\n      })\r\n    })\r\n    //if user has already saved enrollment then fetch the details and auto populate the values\r\n    fectEnrollmentDetails(this.state.engagementId).then((jsondata) => {\r\n      let savedData = JSON.parse(jsondata.data)\r\n      savedData = savedData[0]\r\n      //if data is present then unload the data orgId, courseId etc and fetch the appropriate details\r\n      if (savedData != undefined) {\r\n        this.setState({\r\n          orgId: savedData.orgId,\r\n          batchId: savedData.batchId,\r\n          createdBy: savedData.createdBy\r\n        })\r\n        //fetching the courseName from available courses by courseId from courseNameOptions\r\n        this.state.courseNameOptions.forEach((course) => {\r\n          if (savedData.courseId == course.courseId) {\r\n            this.setState({\r\n              selectedCourseName: course.value,\r\n              courseId: course.courseId\r\n            })\r\n          }\r\n        })\r\n        this.state.disableAll = false;\r\n        this.state.disableSelects = false;\r\n        let startDate = new Date(savedData.startDate)\r\n        let endDate = new Date(savedData.endDate)\r\n        let today = new Date()\r\n        // today = today.getFullYear() + \"-\" + (((today.getMonth() + 1) < 10) ? \"0\" + (today.getMonth() + 1) : (today.getMonth() + 1)) + \"-\" + ((today.getDate() < 10) ? \"0\" + today.getDate() : today.getDate());\r\n        //disable all the selects + start Date incase date is lesser than today \r\n        // (startDate < today) ? this.setState({ disableSelects: true }) : this.setState({ disableSelects: false })\r\n        // console.log(startDate.getDate()+1,\" today \", today.getDate()+1 ,\" end \", endDate.getDate()+1)\r\n        // console.log(today+1,\" Startdate \",  startDate+1 ,\" end \", endDate+1,\"\")\r\n        let diff = today.getDate() > startDate.getDate()  ?  today.getDate() - startDate.getDate()  : startDate.getDate() - today.getDate()\r\n        // // console.log(30 - diff)\r\n        let dateDiff = 31- diff\r\n        // console.log(dateDiff) \r\n        // console.log(\"Start Date \",startDate.getDate()-1)\r\n        // console.log(\"today Date \",(31-(today.getDate()-6)))\r\n       \r\n        let currentDay = new Date(startDate);\r\n        console.log(\"Start \",currentDay)\r\n\r\n        let nextday1 = currentDay.setDate(startDate.getDate() + 4);\r\n        let nextday2 = currentDay.setDate(startDate.getDate() + 5);\r\n\r\n        console.log(nextday1>currentDay)\r\n        console.log(nextday1<nextday2)\r\n        // nextDay.setDate(startDate.getDate() + 4);\r\n        // console.log(nextDay.getDate())\r\n        // console.log(nextDay.getMonth())\r\n\r\n        // let nextMonth= (new Date(startDate).getMonth()+1)%12 + 1\r\n        // let currentMonth = (new startDate().getMonth()+1)%12\r\n        // let x = (currentMonth<nextMonth)\r\n        // console.log(\"Month\",x)\r\n        // console.log(\"First + \",(30-(today.getDate()- startDate.getDate())))\r\n        // console.log(\"Second \",(30-(today.getDate()- startDate.getDate()))<=3)\r\n        // if (dateDiff>7)\r\n        if(nextday1>currentDay && nextday1<nextday2){\r\n          this.setState({\r\n            disableSelects: true\r\n          })\r\n        }\r\n        //disable all the selects + start Date incase date is lesser than today \r\n        // (startDate < today) ? this.setState({ disableSelects: true }) : this.setState({ disableSelects: false })\r\n        if (endDate < today) {\r\n          //console.log('disable All')\r\n          this.setState({\r\n            disableAll: true\r\n          })\r\n        }\r\n        //In js month of any date when converted comes one month back so to avoid this code is written as +1 eg month[0] = \"January\"\r\n        //getting the dates in proper format to populate the data i.e. yyyy-MM-dd\r\n        \r\n        startDate = startDate.getFullYear() + \"-\" + (((startDate.getMonth() + 1) < 10) ? \"0\" + (startDate.getMonth() + 1) : (startDate.getMonth() + 1)) + \"-\" + ((startDate.getDate() < 10) ? \"0\" + startDate.getDate() : startDate.getDate());\r\n        endDate = endDate.getFullYear() + \"-\" + (((endDate.getMonth() + 1) < 10) ? \"0\" + (endDate.getMonth() + 1) : (endDate.getMonth() + 1)) + \"-\" + ((endDate.getDate() < 10) ? \"0\" + endDate.getDate() : endDate.getDate())\r\n        this.setState({\r\n          startDate,\r\n          endDate\r\n        })\r\n        //if orgId is present fetch all the orgName, enterType from findskillmithraByOrgId\r\n        if (this.state.orgId != undefined || this.state.orgId != '') {\r\n          getUdyogMitraAndSkillInstitute(this.state.orgId).then((jsondata) => {\r\n            let response = JSON.parse(jsondata.data)\r\n            response = response[0]\r\n            if (response) {\r\n              this.setState({\r\n                selectedAvailableCenter: response.organizationName,\r\n                selectedCenterType: response.orgType\r\n              })\r\n            }\r\n            //options from getUdyogMitraAndSkillInstitute to be populated in the option in availableCenters\r\n            fetchSkillMithraByIdAndProgramId(this.state.selectedCenterType,UserContext.defaultProgramId).then((jsondata) => {\r\n              let res = JSON.parse(jsondata.data)\r\n              if (res) {\r\n                res.forEach((value) => {\r\n                  this.setState({\r\n                    availaibleCenters: [...this.state.availaibleCenters,\r\n                    {\r\n                      'label': value.organizationName,\r\n                      'value': value.organizationName,\r\n                      'orgId': value.orgId\r\n                    }]\r\n                  })\r\n                })\r\n              }\r\n            })\r\n          })\r\n        }\r\n      }\r\n    })\r\n    //validate if the prior data is filled or not\r\n    if (UserContext.defaultProgramId != 1) {\r\n      this.validateData();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //this.handleselectedCenterType.bind(this, 'selectedCenterType')\r\n    this.handleStartDate = this.handleStartDate.bind(this)\r\n    this.handleEndDate = this.handleEndDate.bind(this)\r\n    this.validateEndDate = this.validateEndDate.bind(this)\r\n    this.validateStartDate = this.validateStartDate.bind(this)\r\n    this.writeEmptyError = this.writeEmptyError.bind(this)\r\n    this.verify = this.verify.bind(this)\r\n  }\r\n\r\n  \r\n  validateStartDate(){\r\n    let dateError = validateStartDate(this.state.startDate)\r\n    if (dateError) {\r\n      this.setState({\r\n        errors: {\r\n          ...this.state.errors,\r\n          startDate: {\r\n            'label': dateError,\r\n            'value': true\r\n          }\r\n        }\r\n      })\r\n      return true\r\n    }\r\n  }\r\n\r\n  validateEndDate(){\r\n    let dateError = validateEndDate(this.state.endDate)\r\n    if (dateError) {\r\n      this.setState({\r\n        errors: {\r\n          ...this.state.errors,\r\n          endDate: {\r\n            'label': dateError,\r\n            'value': true\r\n          }\r\n        }\r\n      })\r\n      return true\r\n    }\r\n  }\r\n\r\n  //if anything comes as empty this is the error\r\n  writeEmptyError(fieldname, error){\r\n    this.setState({\r\n      errors: {\r\n        ...this.state.errors,\r\n        [fieldname]: {\r\n          'label': error,\r\n          'value': true\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  validateData() {\r\n\r\n    getFamilyData(this.state.engagementId, this.state.dbUserId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['family']: result\r\n        }\r\n      })\r\n      if (result) {\r\n        this.setState({\r\n          disableSelects: true,\r\n          disableAll: true\r\n        })\r\n      }\r\n    });\r\n\r\n    getExperienceDetails(this.state.engagementId, this.state.dbUserId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['experience']: result\r\n        }\r\n      })\r\n      if (result) {\r\n        this.setState({\r\n          disableSelects: true,\r\n          disableAll: true\r\n        })\r\n      }\r\n    });\r\n    getBasicDetails(this.state.engagementId, this.state.dbUserId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['basic']: result\r\n        }\r\n      })\r\n      if (result) {\r\n        this.setState({\r\n          disableSelects: true,\r\n          disableAll: true\r\n        })\r\n      }\r\n    });\r\n    validateInterestInventory((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['inventory']: result\r\n        }\r\n      })\r\n      if (result) {\r\n        this.setState({\r\n          disableSelects: true,\r\n          disableAll: true\r\n        })\r\n      }\r\n    });\r\n    getAddressData(this.state.engagementId, this.state.dbUserId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['address']: result\r\n        }\r\n      })\r\n      if (result) {\r\n        this.setState({\r\n          disableSelects: true,\r\n          disableAll: true\r\n        })\r\n      }\r\n    });\r\n\r\n    //observation is only mandatory for existing student of TS not for outside TS\r\n    //if (UserContext.defaultProgramId != 7) {\r\n      //   getBusinessCaseData((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId, this.state.dbUserId).then(result => {this.setState({\r\n      //     res: {\r\n      //       ...this.state.res, ['bc']: result\r\n      //     }\r\n      //   })\r\n      //   if(result){\r\n      //     this.setState({\r\n      //       disableSelects : true,\r\n      //       disableAll : true\r\n      //     })\r\n      //   }\r\n      // });\r\n      //   getBusinessCaseDocument((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId).then(result => {this.setState({\r\n      //     res: {\r\n      //       ...this.state.res, ['document']: result\r\n      //     }\r\n      //   })\r\n      //   if(result){\r\n      //     this.setState({\r\n      //       disableSelects : true,\r\n      //       disableAll : true\r\n      //     })\r\n      //   }\r\n      // });\r\n      // getExistingBusiness((UserContext.defaultProgramId === 1 || UserContext.defaultProgramId === 9) ? this.state.linkedEngagementId : this.state.engagementId).then(result => {\r\n      //   this.setState({\r\n      //     res: {\r\n      //       ...this.state.res, ['existingBusiness']: result\r\n      //     }\r\n      //   })\r\n      //   if (result) {\r\n      //     this.setState({\r\n      //       disableSelects: true,\r\n      //       disableAll: true\r\n      //     })\r\n      //   }\r\n      // });\r\n    //}\r\n    getSocioEconomicData(this.state.engagementId, this.state.dbUserId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['socio']: result\r\n        }\r\n      })\r\n      if (result) {\r\n        this.setState({\r\n          disableSelects: true,\r\n          disableAll: true\r\n        })\r\n      }\r\n    });\r\n\r\n    validateEducationData(this.state.engagementId, this.state.dbUserId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['education']: result\r\n        }\r\n      })\r\n      if(result){\r\n        this.setState({\r\n          disableSelects : true,\r\n          disableAll : true\r\n        })\r\n      }\r\n    });\r\n\r\n    validateSingleCounselData(this.state.engagementId).then(result => {\r\n      this.setState({\r\n        res: {\r\n          ...this.state.res, ['Single Counselling']: result\r\n        }\r\n      })\r\n     //console.log(result)\r\n      if(result){\r\n        this.setState({\r\n          disableSelects : true,\r\n          disableAll : true\r\n        })\r\n      }\r\n    });\r\n\r\n  }\r\n\r\nverify() {\r\n    //console.log(this.state)\r\n    let isEmpty = '';\r\n    let count = 0\r\n    if(this.state.disableSelects){\r\n        //For End Date if field is empty\r\n        if (this.state.endDate == undefined || this.state.endDate === 'NaN-NaN-NaN') {\r\n          this.writeEmptyError('endDate','Field cannot be empty')\r\n          isEmpty = isEmpty + ' End Date \\n '\r\n        }\r\n        else {\r\n              this.validateEndDate(this.state.endDate) ?  (isEmpty = isEmpty + ' End Date \\n') : (isEmpty = isEmpty + '')\r\n        }\r\n    }\r\n    else{    \r\n        //checking if the fields are empty or any error present\r\n        //For Center Type if field is empty \r\n        if (this.state.selectedCenterType == undefined || this.state.selectedCenterType === '' || this.state.errors?.selectedCenterType?.value) {\r\n          if(this.state.errors?.selectedCenterType?.value){\r\n            this.writeEmptyError('selectedCenterType',this.state.errors.selectedCenterType.label)  \r\n            count+=1\r\n          }\r\n          else{\r\n            this.writeEmptyError('selectedCenterType','Field cannot be empty')\r\n            isEmpty = isEmpty + ' Center Type \\n '\r\n          }\r\n        }\r\n        //For Availaible Center if field is empty \r\n        if (this.state.selectedAvailableCenter == undefined || this.state.selectedAvailableCenter === '' || this.state.orgId === undefined || this.state.orgId === '' || this.state.errors?.selectedCenterType?.value) {\r\n          if(this.state.errors?.selectedAvailableCenter?.value){\r\n            this.writeEmptyError('selectedAvailableCenter',this.state.selectedAvailableCenter.label)\r\n            count+=1\r\n          }\r\n          else{\r\n            this.writeEmptyError('selectedAvailableCenter','Field cannot be empty')\r\n            isEmpty = isEmpty + ' Availaible Center \\n '\r\n          }\r\n        }\r\n        //For Course Name if field is empty \r\n        if (this.state.selectedCourseName === undefined || this.state.selectedCourseName === '' || this.state.courseId === undefined || this.state.courseId === '' || this.state.errors?.selectedCourseName?.value) {\r\n          if(this.state.errors?.selectedCourseName?.value){\r\n            this.writeEmptyError('selectedCourseName',this.state.selectedCourseName.label)\r\n            count+=1\r\n          }\r\n          else{\r\n            this.writeEmptyError('selectedCourseName','Field cannot be empty')\r\n            isEmpty = isEmpty + ' Course Name \\n '\r\n          }\r\n        }\r\n        //For Start Date if field is empty\r\n        if (this.state.startDate == undefined || this.state.startDate === 'NaN-NaN-NaN' || this.state.errors?.startDate?.value) {\r\n          if(this.state.errors?.startDate?.value){\r\n            this.writeEmptyError('startDate',this.state.errors.startDate.label)\r\n            count+=1\r\n          }\r\n          else{\r\n            this.writeEmptyError('startDate','Field cannot be empty')\r\n            isEmpty = isEmpty + ' Start Date \\n '\r\n          }\r\n        }\r\n        //For End Date if field is empty\r\n        if (this.state.endDate == undefined || this.state.endDate === 'NaN-NaN-NaN' || this.state.errors?.endDate?.value) {\r\n          if(this.state.errors?.endDate?.value){\r\n            this.writeEmptyError('endDate',this.state.errors.endDate.label)\r\n            count+=1\r\n          }\r\n          else{\r\n            this.writeEmptyError('endDate','Field cannot be empty')\r\n            isEmpty = isEmpty + ' End Date \\n '\r\n          }\r\n        }\r\n    }\r\n    if (isEmpty || count>0) {\r\n      if(isEmpty){\r\n        alert(\"Please Fill in the Following values\\n\" + isEmpty)\r\n      }\r\n      else{\r\n        alert(\"There are one or more errors in the fields!\")\r\n      }\r\n      \r\n    }\r\n    else {\r\n      //console.log(this.state)\r\n      //alert('hurray!!')\r\n      let statusChangeData = '\"engagementId\":' + this.state.engagementId + ',\"status\":\"enrolled\", \"updatedBy\":' + UserContext.userid + '';\r\n      //api call for saving the information   \r\n      saveInformalEnrollmentDetails(this.state.engagementId, '0', this.state.courseId, UserContext.userid, this.state.startDate, this.state.endDate, this.state.orgId).then((jsondata) => {\r\n        //let result = jsondata.status\r\n        let resultSave = jsondata.status\r\n        if(resultSave===\"success\"){\r\n            //console.log('hello')\r\n            //api to change the status to enrolled\r\n        changeStudentStatus(statusChangeData).then((jsondata) => {\r\n            let resultStatus = jsondata.status\r\n            if (resultSave === \"success\" && resultStatus === \"success\") {\r\n              alert(\"Successfully Enrolled\")\r\n              setTimeout(() => { this.props.history.push({ pathname: '/dashboard/managebeneficiary', state: {} }) }, 3000)\r\n            }\r\n            else {\r\n\r\n              alert(\"Data not saved/updated successfully, Please try again!\")\r\n              //console.log('try again \\n' + this.state)\r\n            }\r\n          })\r\n        }\r\n        else{\r\n            alert(\"Both Start date and End date are Mandatory!\")\r\n        }\r\n        })\r\n    }\r\n  }\r\n\r\n\r\n  handleStartDate(event) {\r\n    let dateError = validateStartDate(event.target.value)\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n      endDate: '',\r\n      errors: {\r\n        ...this.state.errors,\r\n        [event.target.name]: {\r\n          'label': dateError ? dateError : '',\r\n          'value': dateError ? true : false\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  handleEndDate(event) {\r\n    let dateError = validateEndDate(event.target.value)\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n      errors: {\r\n        ...this.state.errors,\r\n        [event.target.name]: {\r\n          'label': dateError ? dateError : '',\r\n          'value': dateError ? true : false\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  handleselectedCenterType(selectname, value) {\r\n    this.setState({\r\n      [selectname]: value,\r\n      availaibleCenters: [],\r\n      selectedAvailableCenter: '',\r\n      selectedCourseName: '',\r\n      courseId: '',\r\n      orgId: '',\r\n      errors: {\r\n        ...this.state.errors,\r\n        selectedCenterType: {\r\n          'label': '',\r\n          'value': false\r\n        },\r\n        selectedAvailableCenter: {\r\n          'label': 'Please select some option',\r\n          'value': true\r\n        },\r\n        selectedCourseName: {\r\n          'label': 'Please select some option',\r\n          'value': true\r\n        }\r\n      }\r\n    })\r\n    fetchSkillMithraByIdAndProgramId(value,UserContext.defaultProgramId).then((jsondata) => {\r\n      let result = jsondata.data\r\n      result = JSON.parse(result)\r\n      result.forEach((center) => {\r\n        this.setState({\r\n          availaibleCenters: [...this.state.availaibleCenters,\r\n          {\r\n            'label': center.organizationName,\r\n            'value': center.organizationName,\r\n            'orgId': center.orgId\r\n          }]\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  handleSelectedAvailableCenter(selectname, value) {\r\n    let orgId = ''\r\n    this.state.availaibleCenters.forEach((center) => {\r\n      if (center.label == value || center.value == value) {\r\n        orgId = center.orgId;\r\n      }\r\n    })\r\n    this.setState({\r\n      [selectname]: value,\r\n      orgId: orgId,\r\n      selectedCourseName: '',\r\n      courseId: '',\r\n      errors: {\r\n        ...this.state.errors,\r\n        selectedAvailableCenter: {\r\n          'label': '',\r\n          'value': false\r\n        },\r\n        selectedCourseName: {\r\n          'label': 'Please select some option',\r\n          'value': true\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  handleSelectedCourseName(selectname, value) {\r\n    let courseId = ''\r\n    this.state.courseNameOptions.forEach((course) => {\r\n      if (course.label == value || course.value == value) {\r\n        courseId = course.courseId\r\n      }\r\n    })\r\n    this.setState({\r\n      [selectname]: value,\r\n      courseId: courseId,\r\n      errors: {\r\n        ...this.state.errors,\r\n        selectedCourseName: {\r\n          'label': '',\r\n          'value': false\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let res = [];\r\n    if (this.state.res.basic) {\r\n      res.push(\"Basic details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.address) {\r\n      res.push(\"Address details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.family) {\r\n      res.push(\"Family details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.experience) {\r\n      res.push(\"Experience details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.bc) {\r\n      res.push(\"Business case details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.document) {\r\n      res.push(\"Business case document not uploaded\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.ob) {\r\n      res.push(\"Observations details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.inventory) {\r\n      res.push(\"Interest Inventory details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.existingBusiness) {\r\n      res.push(\"Existing Business details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.socio) {\r\n      res.push(\"SocioEconomic details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.education) {\r\n      res.push(\"Education details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    if (this.state.res.Counselling) {\r\n      res.push(\"Counselling details\");\r\n      //console.log(this.state.res)\r\n    }\r\n    //console.log(res)\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n\r\n        {(res.length != 0) && <div>Below details are incomplete</div>}\r\n        <ul> {res.map((item) => (\r\n          <li><h4 style={{ fontWeight: \"600\", color: \"red\" }}> {item}</h4></li>\r\n        ))}\r\n        </ul>\r\n        {/* {console.log(this.state)} */}\r\n\r\n        <form onSubmit={this.verify}>\r\n          <Grid container>\r\n\r\n            <Grid item xs={12} sm={4}>\r\n              <InputLabel shrink={true} >Center Type</InputLabel>\r\n              <>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"selectedCenterType\" options={centerType}\r\n                  onChange={this.handleselectedCenterType.bind(this, 'selectedCenterType')}\r\n                  value={this.state.selectedCenterType || ''}\r\n                  key={this.state.selectedCenterType || ''}\r\n                  id=\"selectedCenterType\" helperText={this.state.errors.selectedCenterType != undefined ? this.state.errors.selectedCenterType.label : ''}\r\n                  error={this.state.errors.selectedCenterType != undefined ? this.state.errors.selectedCenterType.value : ''}\r\n                  disabled={this.state.disableSelects ? true : false} />\r\n              </>\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}></Grid>\r\n            <Grid item xs={12} sm={4}>\r\n              <InputLabel shrink={true} >Available Centers</InputLabel>\r\n              <>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"selectedAvailableCenter\" options={this.state.availaibleCenters || ''}\r\n                  onChange={this.handleSelectedAvailableCenter.bind(this, 'selectedAvailableCenter')}\r\n                  value={this.state.selectedAvailableCenter || ''}\r\n                  key={this.state.selectedAvailableCenter || ''}\r\n                  id=\"selectedAvailableCenter\" helperText={this.state.errors.selectedAvailableCenter != undefined ? this.state.errors.selectedAvailableCenter.label : ''}\r\n                  error={this.state.errors.selectedAvailableCenter != undefined ? this.state.errors.selectedAvailableCenter.value : ''}\r\n                  disabled={this.state.disableSelects ? true : false} />\r\n              </>\r\n            </Grid>\r\n\r\n          </Grid>\r\n          <br />\r\n          <br />\r\n          <Grid container>\r\n            <Grid item xs={12} sm={4}>\r\n              <InputLabel shrink={true} >Courses Available</InputLabel>\r\n              <>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"selectedCourseName\" options={this.state.courseNameOptions}\r\n                  onChange={this.handleSelectedCourseName.bind(this, 'selectedCourseName')}\r\n                  value={this.state.selectedCourseName || ''}\r\n                  key={this.state.selectedCourseName || ''}\r\n                  id=\"selctedCourseName\" helperText={this.state.errors.selectedCourseName != undefined ? this.state.errors.selectedCourseName.label : ''}\r\n                  error={this.state.errors.selectedCourseName != undefined ? this.state.errors.selectedCourseName.value : ''}\r\n                  disabled={this.state.disableSelects ? true : false} />\r\n              </>\r\n            </Grid>\r\n            <Grid item xs={12} sm={1}></Grid>\r\n            <Grid item xs={12} sm={2}>\r\n              <InputLabel shrink={true} >Start Date</InputLabel>\r\n              <>\r\n                <Input type=\"date\" name=\"startDate\" id=\"startDate\"\r\n                  value={this.state.startDate || ''}\r\n                  onChange={this.handleStartDate}\r\n                  // error={this.state.errors.startDate != undefined ? this.state.errors.startDate.value : ''}\r\n                  //helperText={this.state.errors.startDate != undefined ? this.state.errors.startDate.label : ''}\r\n                  disabled={this.state.disableSelects ? true : false} />\r\n              </>\r\n              <InputLabel shrink={true} style={{ color: \"red\" }}>{this.state.errors.startDate != undefined ? this.state.errors.startDate.label : ''}</InputLabel>\r\n            </Grid>\r\n            <Grid item xs={12} sm={1}></Grid>\r\n            <Grid item xs={12} sm={2}>\r\n              <InputLabel shrink={true} >End Date </InputLabel>\r\n              <>\r\n                <Input type=\"date\" name=\"endDate\" id=\"endDate\"\r\n                  value={this.state.endDate || ''}\r\n                  onChange={this.handleEndDate}\r\n                  error={this.state.errors.endDate != undefined ? this.state.errors.endDate.value : ''}\r\n                  //helperText={this.state.errors.endDate != undefined ? this.state.errors.endDate.label : ''}\r\n                  disabled={this.state.disableAll ? true : false} />\r\n              </>\r\n              <InputLabel shrink={true} style={{ color: \"red\" }}>{this.state.errors.endDate != undefined ? this.state.errors.endDate.label : ''}</InputLabel>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={1}></Grid>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <Grid item xs={12} sm={2}>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={this.verify} disabled={this.state.disableAll ? true : false}>submit</Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}