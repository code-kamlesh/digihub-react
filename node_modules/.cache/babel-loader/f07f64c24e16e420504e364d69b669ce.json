{"ast":null,"code":"import { Buffer } from 'node:buffer';\nimport * as Token from 'token-types';\nimport * as strtok3 from 'strtok3/core';\nimport { stringToBytes, tarHeaderChecksumMatches, uint32SyncSafeToken } from './util.js';\nimport { extensions, mimeTypes } from './supported.js';\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range.\n\nexport async function fileTypeFromStream(stream) {\n  const tokenizer = await strtok3.fromStream(stream);\n\n  try {\n    return await fileTypeFromTokenizer(tokenizer);\n  } finally {\n    await tokenizer.close();\n  }\n}\nexport async function fileTypeFromBuffer(input) {\n  if (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {\n    throw new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n  }\n\n  const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);\n\n  if (!(buffer && buffer.length > 1)) {\n    return;\n  }\n\n  return fileTypeFromTokenizer(strtok3.fromBuffer(buffer));\n}\n\nfunction _check(buffer, headers, options) {\n  options = {\n    offset: 0,\n    ...options\n  };\n\n  for (const [index, header] of headers.entries()) {\n    // If a bitmask is set\n    if (options.mask) {\n      // If header doesn't equal `buf` with bits masked off\n      if (header !== (options.mask[index] & buffer[index + options.offset])) {\n        return false;\n      }\n    } else if (header !== buffer[index + options.offset]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function fileTypeFromTokenizer(tokenizer) {\n  try {\n    return new FileTypeParser().parse(tokenizer);\n  } catch (error) {\n    if (!(error instanceof strtok3.EndOfStreamError)) {\n      throw error;\n    }\n  }\n}\n\nclass FileTypeParser {\n  check(header, options) {\n    return _check(this.buffer, header, options);\n  }\n\n  checkString(header, options) {\n    return this.check(stringToBytes(header), options);\n  }\n\n  async parse(tokenizer) {\n    this.buffer = Buffer.alloc(minimumBytes); // Keep reading until EOF if the file size is unknown.\n\n    if (tokenizer.fileInfo.size === undefined) {\n      tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n    } // Keep reading until EOF if the file size is unknown.\n\n\n    if (tokenizer.fileInfo.size === undefined) {\n      tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n    }\n\n    this.tokenizer = tokenizer;\n    await tokenizer.peekBuffer(this.buffer, {\n      length: 12,\n      mayBeLess: true\n    }); // -- 2-byte signatures --\n\n    if (this.check([0x42, 0x4D])) {\n      return {\n        ext: 'bmp',\n        mime: 'image/bmp'\n      };\n    }\n\n    if (this.check([0x0B, 0x77])) {\n      return {\n        ext: 'ac3',\n        mime: 'audio/vnd.dolby.dd-raw'\n      };\n    }\n\n    if (this.check([0x78, 0x01])) {\n      return {\n        ext: 'dmg',\n        mime: 'application/x-apple-diskimage'\n      };\n    }\n\n    if (this.check([0x4D, 0x5A])) {\n      return {\n        ext: 'exe',\n        mime: 'application/x-msdownload'\n      };\n    }\n\n    if (this.check([0x25, 0x21])) {\n      await tokenizer.peekBuffer(this.buffer, {\n        length: 24,\n        mayBeLess: true\n      });\n\n      if (this.checkString('PS-Adobe-', {\n        offset: 2\n      }) && this.checkString(' EPSF-', {\n        offset: 14\n      })) {\n        return {\n          ext: 'eps',\n          mime: 'application/eps'\n        };\n      }\n\n      return {\n        ext: 'ps',\n        mime: 'application/postscript'\n      };\n    }\n\n    if (this.check([0x1F, 0xA0]) || this.check([0x1F, 0x9D])) {\n      return {\n        ext: 'Z',\n        mime: 'application/x-compress'\n      };\n    } // -- 3-byte signatures --\n\n\n    if (this.check([0xFF, 0xD8, 0xFF])) {\n      return {\n        ext: 'jpg',\n        mime: 'image/jpeg'\n      };\n    }\n\n    if (this.check([0x49, 0x49, 0xBC])) {\n      return {\n        ext: 'jxr',\n        mime: 'image/vnd.ms-photo'\n      };\n    }\n\n    if (this.check([0x1F, 0x8B, 0x8])) {\n      return {\n        ext: 'gz',\n        mime: 'application/gzip'\n      };\n    }\n\n    if (this.check([0x42, 0x5A, 0x68])) {\n      return {\n        ext: 'bz2',\n        mime: 'application/x-bzip2'\n      };\n    }\n\n    if (this.checkString('ID3')) {\n      await tokenizer.ignore(6); // Skip ID3 header until the header size\n\n      const id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);\n\n      if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {\n        // Guess file type based on ID3 header for backward compatibility\n        return {\n          ext: 'mp3',\n          mime: 'audio/mpeg'\n        };\n      }\n\n      await tokenizer.ignore(id3HeaderLength);\n      return fileTypeFromTokenizer(tokenizer); // Skip ID3 header, recursion\n    } // Musepack, SV7\n\n\n    if (this.checkString('MP+')) {\n      return {\n        ext: 'mpc',\n        mime: 'audio/x-musepack'\n      };\n    }\n\n    if ((this.buffer[0] === 0x43 || this.buffer[0] === 0x46) && this.check([0x57, 0x53], {\n      offset: 1\n    })) {\n      return {\n        ext: 'swf',\n        mime: 'application/x-shockwave-flash'\n      };\n    } // -- 4-byte signatures --\n\n\n    if (this.check([0x47, 0x49, 0x46])) {\n      return {\n        ext: 'gif',\n        mime: 'image/gif'\n      };\n    }\n\n    if (this.checkString('FLIF')) {\n      return {\n        ext: 'flif',\n        mime: 'image/flif'\n      };\n    }\n\n    if (this.checkString('8BPS')) {\n      return {\n        ext: 'psd',\n        mime: 'image/vnd.adobe.photoshop'\n      };\n    }\n\n    if (this.checkString('WEBP', {\n      offset: 8\n    })) {\n      return {\n        ext: 'webp',\n        mime: 'image/webp'\n      };\n    } // Musepack, SV8\n\n\n    if (this.checkString('MPCK')) {\n      return {\n        ext: 'mpc',\n        mime: 'audio/x-musepack'\n      };\n    }\n\n    if (this.checkString('FORM')) {\n      return {\n        ext: 'aif',\n        mime: 'audio/aiff'\n      };\n    }\n\n    if (this.checkString('icns', {\n      offset: 0\n    })) {\n      return {\n        ext: 'icns',\n        mime: 'image/icns'\n      };\n    } // Zip-based file formats\n    // Need to be before the `zip` check\n\n\n    if (this.check([0x50, 0x4B, 0x3, 0x4])) {\n      // Local file header signature\n      try {\n        while (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n          await tokenizer.readBuffer(this.buffer, {\n            length: 30\n          }); // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\n          const zipHeader = {\n            compressedSize: this.buffer.readUInt32LE(18),\n            uncompressedSize: this.buffer.readUInt32LE(22),\n            filenameLength: this.buffer.readUInt16LE(26),\n            extraFieldLength: this.buffer.readUInt16LE(28)\n          };\n          zipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n          await tokenizer.ignore(zipHeader.extraFieldLength); // Assumes signed `.xpi` from addons.mozilla.org\n\n          if (zipHeader.filename === 'META-INF/mozilla.rsa') {\n            return {\n              ext: 'xpi',\n              mime: 'application/x-xpinstall'\n            };\n          }\n\n          if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n            const type = zipHeader.filename.split('/')[0];\n\n            switch (type) {\n              case '_rels':\n                break;\n\n              case 'word':\n                return {\n                  ext: 'docx',\n                  mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n                };\n\n              case 'ppt':\n                return {\n                  ext: 'pptx',\n                  mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n                };\n\n              case 'xl':\n                return {\n                  ext: 'xlsx',\n                  mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                };\n\n              default:\n                break;\n            }\n          }\n\n          if (zipHeader.filename.startsWith('xl/')) {\n            return {\n              ext: 'xlsx',\n              mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n            };\n          }\n\n          if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n            return {\n              ext: '3mf',\n              mime: 'model/3mf'\n            };\n          } // The docx, xlsx and pptx file types extend the Office Open XML file format:\n          // https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n          // We look for:\n          // - one entry named '[Content_Types].xml' or '_rels/.rels',\n          // - one entry indicating specific type of file.\n          // MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\n\n          if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n            const mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n            switch (mimeType) {\n              case 'application/epub+zip':\n                return {\n                  ext: 'epub',\n                  mime: 'application/epub+zip'\n                };\n\n              case 'application/vnd.oasis.opendocument.text':\n                return {\n                  ext: 'odt',\n                  mime: 'application/vnd.oasis.opendocument.text'\n                };\n\n              case 'application/vnd.oasis.opendocument.spreadsheet':\n                return {\n                  ext: 'ods',\n                  mime: 'application/vnd.oasis.opendocument.spreadsheet'\n                };\n\n              case 'application/vnd.oasis.opendocument.presentation':\n                return {\n                  ext: 'odp',\n                  mime: 'application/vnd.oasis.opendocument.presentation'\n                };\n\n              default:\n            }\n          } // Try to find next header manually when current one is corrupted\n\n\n          if (zipHeader.compressedSize === 0) {\n            let nextHeaderIndex = -1;\n\n            while (nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size) {\n              await tokenizer.peekBuffer(this.buffer, {\n                mayBeLess: true\n              });\n              nextHeaderIndex = this.buffer.indexOf('504B0304', 0, 'hex'); // Move position to the next header if found, skip the whole buffer otherwise\n\n              await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);\n            }\n          } else {\n            await tokenizer.ignore(zipHeader.compressedSize);\n          }\n        }\n      } catch (error) {\n        if (!(error instanceof strtok3.EndOfStreamError)) {\n          throw error;\n        }\n      }\n\n      return {\n        ext: 'zip',\n        mime: 'application/zip'\n      };\n    }\n\n    if (this.checkString('OggS')) {\n      // This is an OGG container\n      await tokenizer.ignore(28);\n      const type = Buffer.alloc(8);\n      await tokenizer.readBuffer(type); // Needs to be before `ogg` check\n\n      if (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n        return {\n          ext: 'opus',\n          mime: 'audio/opus'\n        };\n      } // If ' theora' in header.\n\n\n      if (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n        return {\n          ext: 'ogv',\n          mime: 'video/ogg'\n        };\n      } // If '\\x01video' in header.\n\n\n      if (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n        return {\n          ext: 'ogm',\n          mime: 'video/ogg'\n        };\n      } // If ' FLAC' in header  https://xiph.org/flac/faq.html\n\n\n      if (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n        return {\n          ext: 'oga',\n          mime: 'audio/ogg'\n        };\n      } // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\n\n      if (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n        return {\n          ext: 'spx',\n          mime: 'audio/ogg'\n        };\n      } // If '\\x01vorbis' in header\n\n\n      if (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n        return {\n          ext: 'ogg',\n          mime: 'audio/ogg'\n        };\n      } // Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\n\n      return {\n        ext: 'ogx',\n        mime: 'application/ogg'\n      };\n    }\n\n    if (this.check([0x50, 0x4B]) && (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7) && (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)) {\n      return {\n        ext: 'zip',\n        mime: 'application/zip'\n      };\n    } //\n    // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n    // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n    // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n    // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\n\n    if (this.checkString('ftyp', {\n      offset: 4\n    }) && (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n    ) {\n      // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n      // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n      const brandMajor = this.buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\n      switch (brandMajor) {\n        case 'avif':\n          return {\n            ext: 'avif',\n            mime: 'image/avif'\n          };\n\n        case 'mif1':\n          return {\n            ext: 'heic',\n            mime: 'image/heif'\n          };\n\n        case 'msf1':\n          return {\n            ext: 'heic',\n            mime: 'image/heif-sequence'\n          };\n\n        case 'heic':\n        case 'heix':\n          return {\n            ext: 'heic',\n            mime: 'image/heic'\n          };\n\n        case 'hevc':\n        case 'hevx':\n          return {\n            ext: 'heic',\n            mime: 'image/heic-sequence'\n          };\n\n        case 'qt':\n          return {\n            ext: 'mov',\n            mime: 'video/quicktime'\n          };\n\n        case 'M4V':\n        case 'M4VH':\n        case 'M4VP':\n          return {\n            ext: 'm4v',\n            mime: 'video/x-m4v'\n          };\n\n        case 'M4P':\n          return {\n            ext: 'm4p',\n            mime: 'video/mp4'\n          };\n\n        case 'M4B':\n          return {\n            ext: 'm4b',\n            mime: 'audio/mp4'\n          };\n\n        case 'M4A':\n          return {\n            ext: 'm4a',\n            mime: 'audio/x-m4a'\n          };\n\n        case 'F4V':\n          return {\n            ext: 'f4v',\n            mime: 'video/mp4'\n          };\n\n        case 'F4P':\n          return {\n            ext: 'f4p',\n            mime: 'video/mp4'\n          };\n\n        case 'F4A':\n          return {\n            ext: 'f4a',\n            mime: 'audio/mp4'\n          };\n\n        case 'F4B':\n          return {\n            ext: 'f4b',\n            mime: 'audio/mp4'\n          };\n\n        case 'crx':\n          return {\n            ext: 'cr3',\n            mime: 'image/x-canon-cr3'\n          };\n\n        default:\n          if (brandMajor.startsWith('3g')) {\n            if (brandMajor.startsWith('3g2')) {\n              return {\n                ext: '3g2',\n                mime: 'video/3gpp2'\n              };\n            }\n\n            return {\n              ext: '3gp',\n              mime: 'video/3gpp'\n            };\n          }\n\n          return {\n            ext: 'mp4',\n            mime: 'video/mp4'\n          };\n      }\n    }\n\n    if (this.checkString('MThd')) {\n      return {\n        ext: 'mid',\n        mime: 'audio/midi'\n      };\n    }\n\n    if (this.checkString('wOFF') && (this.check([0x00, 0x01, 0x00, 0x00], {\n      offset: 4\n    }) || this.checkString('OTTO', {\n      offset: 4\n    }))) {\n      return {\n        ext: 'woff',\n        mime: 'font/woff'\n      };\n    }\n\n    if (this.checkString('wOF2') && (this.check([0x00, 0x01, 0x00, 0x00], {\n      offset: 4\n    }) || this.checkString('OTTO', {\n      offset: 4\n    }))) {\n      return {\n        ext: 'woff2',\n        mime: 'font/woff2'\n      };\n    }\n\n    if (this.check([0xD4, 0xC3, 0xB2, 0xA1]) || this.check([0xA1, 0xB2, 0xC3, 0xD4])) {\n      return {\n        ext: 'pcap',\n        mime: 'application/vnd.tcpdump.pcap'\n      };\n    } // Sony DSD Stream File (DSF)\n\n\n    if (this.checkString('DSD ')) {\n      return {\n        ext: 'dsf',\n        mime: 'audio/x-dsf' // Non-standard\n\n      };\n    }\n\n    if (this.checkString('LZIP')) {\n      return {\n        ext: 'lz',\n        mime: 'application/x-lzip'\n      };\n    }\n\n    if (this.checkString('fLaC')) {\n      return {\n        ext: 'flac',\n        mime: 'audio/x-flac'\n      };\n    }\n\n    if (this.check([0x42, 0x50, 0x47, 0xFB])) {\n      return {\n        ext: 'bpg',\n        mime: 'image/bpg'\n      };\n    }\n\n    if (this.checkString('wvpk')) {\n      return {\n        ext: 'wv',\n        mime: 'audio/wavpack'\n      };\n    }\n\n    if (this.checkString('%PDF')) {\n      await tokenizer.ignore(1350);\n      const maxBufferSize = 10 * 1024 * 1024;\n      const buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n      await tokenizer.readBuffer(buffer, {\n        mayBeLess: true\n      }); // Check if this is an Adobe Illustrator file\n\n      if (buffer.includes(Buffer.from('AIPrivateData'))) {\n        return {\n          ext: 'ai',\n          mime: 'application/postscript'\n        };\n      } // Assume this is just a normal PDF\n\n\n      return {\n        ext: 'pdf',\n        mime: 'application/pdf'\n      };\n    }\n\n    if (this.check([0x00, 0x61, 0x73, 0x6D])) {\n      return {\n        ext: 'wasm',\n        mime: 'application/wasm'\n      };\n    } // TIFF, little-endian type\n\n\n    if (this.check([0x49, 0x49])) {\n      const fileType = await this.readTiffHeader(false);\n\n      if (fileType) {\n        return fileType;\n      }\n    } // TIFF, big-endian type\n\n\n    if (this.check([0x4D, 0x4D])) {\n      const fileType = await this.readTiffHeader(true);\n\n      if (fileType) {\n        return fileType;\n      }\n    }\n\n    if (this.checkString('MAC ')) {\n      return {\n        ext: 'ape',\n        mime: 'audio/ape'\n      };\n    } // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\n\n    if (this.check([0x1A, 0x45, 0xDF, 0xA3])) {\n      // Root element: EBML\n      async function readField() {\n        const msb = await tokenizer.peekNumber(Token.UINT8);\n        let mask = 0x80;\n        let ic = 0; // 0 = A, 1 = B, 2 = C, 3\n        // = D\n\n        while ((msb & mask) === 0) {\n          ++ic;\n          mask >>= 1;\n        }\n\n        const id = Buffer.alloc(ic + 1);\n        await tokenizer.readBuffer(id);\n        return id;\n      }\n\n      async function readElement() {\n        const id = await readField();\n        const lengthField = await readField();\n        lengthField[0] ^= 0x80 >> lengthField.length - 1;\n        const nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer\n\n        return {\n          id: id.readUIntBE(0, id.length),\n          len: lengthField.readUIntBE(lengthField.length - nrLength, nrLength)\n        };\n      }\n\n      async function readChildren(level, children) {\n        while (children > 0) {\n          const element = await readElement();\n\n          if (element.id === 0x42_82) {\n            const rawValue = await tokenizer.readToken(new Token.StringType(element.len, 'utf-8'));\n            return rawValue.replace(/\\00.*$/g, ''); // Return DocType\n          }\n\n          await tokenizer.ignore(element.len); // ignore payload\n\n          --children;\n        }\n      }\n\n      const re = await readElement();\n      const docType = await readChildren(1, re.len);\n\n      switch (docType) {\n        case 'webm':\n          return {\n            ext: 'webm',\n            mime: 'video/webm'\n          };\n\n        case 'matroska':\n          return {\n            ext: 'mkv',\n            mime: 'video/x-matroska'\n          };\n\n        default:\n          return;\n      }\n    } // RIFF file format which might be AVI, WAV, QCP, etc\n\n\n    if (this.check([0x52, 0x49, 0x46, 0x46])) {\n      if (this.check([0x41, 0x56, 0x49], {\n        offset: 8\n      })) {\n        return {\n          ext: 'avi',\n          mime: 'video/vnd.avi'\n        };\n      }\n\n      if (this.check([0x57, 0x41, 0x56, 0x45], {\n        offset: 8\n      })) {\n        return {\n          ext: 'wav',\n          mime: 'audio/vnd.wave'\n        };\n      } // QLCM, QCP file\n\n\n      if (this.check([0x51, 0x4C, 0x43, 0x4D], {\n        offset: 8\n      })) {\n        return {\n          ext: 'qcp',\n          mime: 'audio/qcelp'\n        };\n      }\n    }\n\n    if (this.checkString('SQLi')) {\n      return {\n        ext: 'sqlite',\n        mime: 'application/x-sqlite3'\n      };\n    }\n\n    if (this.check([0x4E, 0x45, 0x53, 0x1A])) {\n      return {\n        ext: 'nes',\n        mime: 'application/x-nintendo-nes-rom'\n      };\n    }\n\n    if (this.checkString('Cr24')) {\n      return {\n        ext: 'crx',\n        mime: 'application/x-google-chrome-extension'\n      };\n    }\n\n    if (this.checkString('MSCF') || this.checkString('ISc(')) {\n      return {\n        ext: 'cab',\n        mime: 'application/vnd.ms-cab-compressed'\n      };\n    }\n\n    if (this.check([0xED, 0xAB, 0xEE, 0xDB])) {\n      return {\n        ext: 'rpm',\n        mime: 'application/x-rpm'\n      };\n    }\n\n    if (this.check([0xC5, 0xD0, 0xD3, 0xC6])) {\n      return {\n        ext: 'eps',\n        mime: 'application/eps'\n      };\n    }\n\n    if (this.check([0x28, 0xB5, 0x2F, 0xFD])) {\n      return {\n        ext: 'zst',\n        mime: 'application/zstd'\n      };\n    } // -- 5-byte signatures --\n\n\n    if (this.check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n      return {\n        ext: 'otf',\n        mime: 'font/otf'\n      };\n    }\n\n    if (this.checkString('#!AMR')) {\n      return {\n        ext: 'amr',\n        mime: 'audio/amr'\n      };\n    }\n\n    if (this.checkString('{\\\\rtf')) {\n      return {\n        ext: 'rtf',\n        mime: 'application/rtf'\n      };\n    }\n\n    if (this.check([0x46, 0x4C, 0x56, 0x01])) {\n      return {\n        ext: 'flv',\n        mime: 'video/x-flv'\n      };\n    }\n\n    if (this.checkString('IMPM')) {\n      return {\n        ext: 'it',\n        mime: 'audio/x-it'\n      };\n    }\n\n    if (this.checkString('-lh0-', {\n      offset: 2\n    }) || this.checkString('-lh1-', {\n      offset: 2\n    }) || this.checkString('-lh2-', {\n      offset: 2\n    }) || this.checkString('-lh3-', {\n      offset: 2\n    }) || this.checkString('-lh4-', {\n      offset: 2\n    }) || this.checkString('-lh5-', {\n      offset: 2\n    }) || this.checkString('-lh6-', {\n      offset: 2\n    }) || this.checkString('-lh7-', {\n      offset: 2\n    }) || this.checkString('-lzs-', {\n      offset: 2\n    }) || this.checkString('-lz4-', {\n      offset: 2\n    }) || this.checkString('-lz5-', {\n      offset: 2\n    }) || this.checkString('-lhd-', {\n      offset: 2\n    })) {\n      return {\n        ext: 'lzh',\n        mime: 'application/x-lzh-compressed'\n      };\n    } // MPEG program stream (PS or MPEG-PS)\n\n\n    if (this.check([0x00, 0x00, 0x01, 0xBA])) {\n      //  MPEG-PS, MPEG-1 Part 1\n      if (this.check([0x21], {\n        offset: 4,\n        mask: [0xF1]\n      })) {\n        return {\n          ext: 'mpg',\n          // May also be .ps, .mpeg\n          mime: 'video/MP1S'\n        };\n      } // MPEG-PS, MPEG-2 Part 1\n\n\n      if (this.check([0x44], {\n        offset: 4,\n        mask: [0xC4]\n      })) {\n        return {\n          ext: 'mpg',\n          // May also be .mpg, .m2p, .vob or .sub\n          mime: 'video/MP2P'\n        };\n      }\n    }\n\n    if (this.checkString('ITSF')) {\n      return {\n        ext: 'chm',\n        mime: 'application/vnd.ms-htmlhelp'\n      };\n    } // -- 6-byte signatures --\n\n\n    if (this.check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n      return {\n        ext: 'xz',\n        mime: 'application/x-xz'\n      };\n    }\n\n    if (this.checkString('<?xml ')) {\n      return {\n        ext: 'xml',\n        mime: 'application/xml'\n      };\n    }\n\n    if (this.check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n      return {\n        ext: '7z',\n        mime: 'application/x-7z-compressed'\n      };\n    }\n\n    if (this.check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) && (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)) {\n      return {\n        ext: 'rar',\n        mime: 'application/x-rar-compressed'\n      };\n    }\n\n    if (this.checkString('solid ')) {\n      return {\n        ext: 'stl',\n        mime: 'model/stl'\n      };\n    } // -- 7-byte signatures --\n\n\n    if (this.checkString('BLENDER')) {\n      return {\n        ext: 'blend',\n        mime: 'application/x-blender'\n      };\n    }\n\n    if (this.checkString('!<arch>')) {\n      await tokenizer.ignore(8);\n      const string = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\n      if (string === 'debian-binary') {\n        return {\n          ext: 'deb',\n          mime: 'application/x-deb'\n        };\n      }\n\n      return {\n        ext: 'ar',\n        mime: 'application/x-unix-archive'\n      };\n    } // -- 8-byte signatures --\n\n\n    if (this.check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n      // APNG format (https://wiki.mozilla.org/APNG_Specification)\n      // 1. Find the first IDAT (image data) chunk (49 44 41 54)\n      // 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n      // Offset calculated as follows:\n      // - 8 bytes: PNG signature\n      // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n      await tokenizer.ignore(8); // ignore PNG signature\n\n      async function readChunkHeader() {\n        return {\n          length: await tokenizer.readToken(Token.INT32_BE),\n          type: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n        };\n      }\n\n      do {\n        const chunk = await readChunkHeader();\n\n        if (chunk.length < 0) {\n          return; // Invalid chunk length\n        }\n\n        switch (chunk.type) {\n          case 'IDAT':\n            return {\n              ext: 'png',\n              mime: 'image/png'\n            };\n\n          case 'acTL':\n            return {\n              ext: 'apng',\n              mime: 'image/apng'\n            };\n\n          default:\n            await tokenizer.ignore(chunk.length + 4);\n          // Ignore chunk-data + CRC\n        }\n      } while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n      return {\n        ext: 'png',\n        mime: 'image/png'\n      };\n    }\n\n    if (this.check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n      return {\n        ext: 'arrow',\n        mime: 'application/x-apache-arrow'\n      };\n    }\n\n    if (this.check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n      return {\n        ext: 'glb',\n        mime: 'model/gltf-binary'\n      };\n    } // `mov` format variants\n\n\n    if (this.check([0x66, 0x72, 0x65, 0x65], {\n      offset: 4\n    }) // `free`\n    || this.check([0x6D, 0x64, 0x61, 0x74], {\n      offset: 4\n    }) // `mdat` MJPEG\n    || this.check([0x6D, 0x6F, 0x6F, 0x76], {\n      offset: 4\n    }) // `moov`\n    || this.check([0x77, 0x69, 0x64, 0x65], {\n      offset: 4\n    }) // `wide`\n    ) {\n      return {\n        ext: 'mov',\n        mime: 'video/quicktime'\n      };\n    }\n\n    if (this.check([0xEF, 0xBB, 0xBF]) && this.checkString('<?xml', {\n      offset: 3\n    })) {\n      // UTF-8-BOM\n      return {\n        ext: 'xml',\n        mime: 'application/xml'\n      };\n    } // -- 9-byte signatures --\n\n\n    if (this.check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n      return {\n        ext: 'orf',\n        mime: 'image/x-olympus-orf'\n      };\n    }\n\n    if (this.checkString('gimp xcf ')) {\n      return {\n        ext: 'xcf',\n        mime: 'image/x-xcf'\n      };\n    } // -- 12-byte signatures --\n\n\n    if (this.check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n      return {\n        ext: 'rw2',\n        mime: 'image/x-panasonic-rw2'\n      };\n    } // ASF_Header_Object first 80 bytes\n\n\n    if (this.check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n      async function readHeader() {\n        const guid = Buffer.alloc(16);\n        await tokenizer.readBuffer(guid);\n        return {\n          id: guid,\n          size: Number(await tokenizer.readToken(Token.UINT64_LE))\n        };\n      }\n\n      await tokenizer.ignore(30); // Search for header should be in first 1KB of file.\n\n      while (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n        const header = await readHeader();\n        let payload = header.size - 24;\n\n        if (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n          // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n          const typeId = Buffer.alloc(16);\n          payload -= await tokenizer.readBuffer(typeId);\n\n          if (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n            // Found audio:\n            return {\n              ext: 'asf',\n              mime: 'audio/x-ms-asf'\n            };\n          }\n\n          if (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n            // Found video:\n            return {\n              ext: 'asf',\n              mime: 'video/x-ms-asf'\n            };\n          }\n\n          break;\n        }\n\n        await tokenizer.ignore(payload);\n      } // Default to ASF generic extension\n\n\n      return {\n        ext: 'asf',\n        mime: 'application/vnd.ms-asf'\n      };\n    }\n\n    if (this.check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n      return {\n        ext: 'ktx',\n        mime: 'image/ktx'\n      };\n    }\n\n    if ((this.check([0x7E, 0x10, 0x04]) || this.check([0x7E, 0x18, 0x04])) && this.check([0x30, 0x4D, 0x49, 0x45], {\n      offset: 4\n    })) {\n      return {\n        ext: 'mie',\n        mime: 'application/x-mie'\n      };\n    }\n\n    if (this.check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {\n      offset: 2\n    })) {\n      return {\n        ext: 'shp',\n        mime: 'application/x-esri-shape'\n      };\n    }\n\n    if (this.check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n      // JPEG-2000 family\n      await tokenizer.ignore(20);\n      const type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\n      switch (type) {\n        case 'jp2 ':\n          return {\n            ext: 'jp2',\n            mime: 'image/jp2'\n          };\n\n        case 'jpx ':\n          return {\n            ext: 'jpx',\n            mime: 'image/jpx'\n          };\n\n        case 'jpm ':\n          return {\n            ext: 'jpm',\n            mime: 'image/jpm'\n          };\n\n        case 'mjp2':\n          return {\n            ext: 'mj2',\n            mime: 'image/mj2'\n          };\n\n        default:\n          return;\n      }\n    }\n\n    if (this.check([0xFF, 0x0A]) || this.check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n      return {\n        ext: 'jxl',\n        mime: 'image/jxl'\n      };\n    }\n\n    if (this.check([0xFE, 0xFF, 0, 60, 0, 63, 0, 120, 0, 109, 0, 108]) // UTF-16-BOM-LE\n    || this.check([0xFF, 0xFE, 60, 0, 63, 0, 120, 0, 109, 0, 108, 0]) // UTF-16-BOM-LE\n    ) {\n      return {\n        ext: 'xml',\n        mime: 'application/xml'\n      };\n    } // -- Unsafe signatures --\n\n\n    if (this.check([0x0, 0x0, 0x1, 0xBA]) || this.check([0x0, 0x0, 0x1, 0xB3])) {\n      return {\n        ext: 'mpg',\n        mime: 'video/mpeg'\n      };\n    }\n\n    if (this.check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n      return {\n        ext: 'ttf',\n        mime: 'font/ttf'\n      };\n    }\n\n    if (this.check([0x00, 0x00, 0x01, 0x00])) {\n      return {\n        ext: 'ico',\n        mime: 'image/x-icon'\n      };\n    }\n\n    if (this.check([0x00, 0x00, 0x02, 0x00])) {\n      return {\n        ext: 'cur',\n        mime: 'image/x-icon'\n      };\n    }\n\n    if (this.check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n      // Detected Microsoft Compound File Binary File (MS-CFB) Format.\n      return {\n        ext: 'cfb',\n        mime: 'application/x-cfb'\n      };\n    } // Increase sample size from 12 to 256.\n\n\n    await tokenizer.peekBuffer(this.buffer, {\n      length: Math.min(256, tokenizer.fileInfo.size),\n      mayBeLess: true\n    }); // -- 15-byte signatures --\n\n    if (this.checkString('BEGIN:')) {\n      if (this.checkString('VCARD', {\n        offset: 6\n      })) {\n        return {\n          ext: 'vcf',\n          mime: 'text/vcard'\n        };\n      }\n\n      if (this.checkString('VCALENDAR', {\n        offset: 6\n      })) {\n        return {\n          ext: 'ics',\n          mime: 'text/calendar'\n        };\n      }\n    } // `raf` is here just to keep all the raw image detectors together.\n\n\n    if (this.checkString('FUJIFILMCCD-RAW')) {\n      return {\n        ext: 'raf',\n        mime: 'image/x-fujifilm-raf'\n      };\n    }\n\n    if (this.checkString('Extended Module:')) {\n      return {\n        ext: 'xm',\n        mime: 'audio/x-xm'\n      };\n    }\n\n    if (this.checkString('Creative Voice File')) {\n      return {\n        ext: 'voc',\n        mime: 'audio/x-voc'\n      };\n    }\n\n    if (this.check([0x04, 0x00, 0x00, 0x00]) && this.buffer.length >= 16) {\n      // Rough & quick check Pickle/ASAR\n      const jsonSize = this.buffer.readUInt32LE(12);\n\n      if (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {\n        try {\n          const header = this.buffer.slice(16, jsonSize + 16).toString();\n          const json = JSON.parse(header); // Check if Pickle is ASAR\n\n          if (json.files) {\n            // Final check, assuring Pickle/ASAR format\n            return {\n              ext: 'asar',\n              mime: 'application/x-asar'\n            };\n          }\n        } catch {}\n      }\n    }\n\n    if (this.check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n      return {\n        ext: 'mxf',\n        mime: 'application/mxf'\n      };\n    }\n\n    if (this.checkString('SCRM', {\n      offset: 44\n    })) {\n      return {\n        ext: 's3m',\n        mime: 'audio/x-s3m'\n      };\n    } // Raw MPEG-2 transport stream (188-byte packets)\n\n\n    if (this.check([0x47]) && this.check([0x47], {\n      offset: 188\n    })) {\n      return {\n        ext: 'mts',\n        mime: 'video/mp2t'\n      };\n    } // Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet\n\n\n    if (this.check([0x47], {\n      offset: 4\n    }) && this.check([0x47], {\n      offset: 196\n    })) {\n      return {\n        ext: 'mts',\n        mime: 'video/mp2t'\n      };\n    }\n\n    if (this.check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {\n      offset: 60\n    })) {\n      return {\n        ext: 'mobi',\n        mime: 'application/x-mobipocket-ebook'\n      };\n    }\n\n    if (this.check([0x44, 0x49, 0x43, 0x4D], {\n      offset: 128\n    })) {\n      return {\n        ext: 'dcm',\n        mime: 'application/dicom'\n      };\n    }\n\n    if (this.check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n      return {\n        ext: 'lnk',\n        mime: 'application/x.ms.shortcut' // Invented by us\n\n      };\n    }\n\n    if (this.check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n      return {\n        ext: 'alias',\n        mime: 'application/x.apple.alias' // Invented by us\n\n      };\n    }\n\n    if (this.check([0x4C, 0x50], {\n      offset: 34\n    }) && (this.check([0x00, 0x00, 0x01], {\n      offset: 8\n    }) || this.check([0x01, 0x00, 0x02], {\n      offset: 8\n    }) || this.check([0x02, 0x00, 0x02], {\n      offset: 8\n    }))) {\n      return {\n        ext: 'eot',\n        mime: 'application/vnd.ms-fontobject'\n      };\n    }\n\n    if (this.check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n      return {\n        ext: 'indd',\n        mime: 'application/x-indesign'\n      };\n    } // Increase sample size from 256 to 512\n\n\n    await tokenizer.peekBuffer(this.buffer, {\n      length: Math.min(512, tokenizer.fileInfo.size),\n      mayBeLess: true\n    }); // Requires a buffer size of 512 bytes\n\n    if (tarHeaderChecksumMatches(this.buffer)) {\n      return {\n        ext: 'tar',\n        mime: 'application/x-tar'\n      };\n    }\n\n    if (this.check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n      return {\n        ext: 'skp',\n        mime: 'application/vnd.sketchup.skp'\n      };\n    }\n\n    if (this.checkString('-----BEGIN PGP MESSAGE-----')) {\n      return {\n        ext: 'pgp',\n        mime: 'application/pgp-encrypted'\n      };\n    } // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\n\n    if (this.buffer.length >= 2 && this.check([0xFF, 0xE0], {\n      offset: 0,\n      mask: [0xFF, 0xE0]\n    })) {\n      if (this.check([0x10], {\n        offset: 1,\n        mask: [0x16]\n      })) {\n        // Check for (ADTS) MPEG-2\n        if (this.check([0x08], {\n          offset: 1,\n          mask: [0x08]\n        })) {\n          return {\n            ext: 'aac',\n            mime: 'audio/aac'\n          };\n        } // Must be (ADTS) MPEG-4\n\n\n        return {\n          ext: 'aac',\n          mime: 'audio/aac'\n        };\n      } // MPEG 1 or 2 Layer 3 header\n      // Check for MPEG layer 3\n\n\n      if (this.check([0x02], {\n        offset: 1,\n        mask: [0x06]\n      })) {\n        return {\n          ext: 'mp3',\n          mime: 'audio/mpeg'\n        };\n      } // Check for MPEG layer 2\n\n\n      if (this.check([0x04], {\n        offset: 1,\n        mask: [0x06]\n      })) {\n        return {\n          ext: 'mp2',\n          mime: 'audio/mpeg'\n        };\n      } // Check for MPEG layer 1\n\n\n      if (this.check([0x06], {\n        offset: 1,\n        mask: [0x06]\n      })) {\n        return {\n          ext: 'mp1',\n          mime: 'audio/mpeg'\n        };\n      }\n    }\n  }\n\n  async readTiffTag(bigEndian) {\n    const tagId = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n    this.tokenizer.ignore(10);\n\n    switch (tagId) {\n      case 50_341:\n        return {\n          ext: 'arw',\n          mime: 'image/x-sony-arw'\n        };\n\n      case 50_706:\n        return {\n          ext: 'dng',\n          mime: 'image/x-adobe-dng'\n        };\n\n      default:\n    }\n  }\n\n  async readTiffIFD(bigEndian) {\n    const numberOfTags = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n\n    for (let n = 0; n < numberOfTags; ++n) {\n      const fileType = await this.readTiffTag(bigEndian);\n\n      if (fileType) {\n        return fileType;\n      }\n    }\n  }\n\n  async readTiffHeader(bigEndian) {\n    const version = (bigEndian ? Token.UINT16_BE : Token.UINT16_LE).get(this.buffer, 2);\n    const ifdOffset = (bigEndian ? Token.UINT32_BE : Token.UINT32_LE).get(this.buffer, 4);\n\n    if (version === 42) {\n      // TIFF file header\n      if (ifdOffset >= 6) {\n        if (this.checkString('CR', {\n          offset: 8\n        })) {\n          return {\n            ext: 'cr2',\n            mime: 'image/x-canon-cr2'\n          };\n        }\n\n        if (ifdOffset >= 8 && (this.check([0x1C, 0x00, 0xFE, 0x00], {\n          offset: 8\n        }) || this.check([0x1F, 0x00, 0x0B, 0x00], {\n          offset: 8\n        }))) {\n          return {\n            ext: 'nef',\n            mime: 'image/x-nikon-nef'\n          };\n        }\n      }\n\n      await this.tokenizer.ignore(ifdOffset);\n      const fileType = await this.readTiffIFD(false);\n      return fileType ? fileType : {\n        ext: 'tif',\n        mime: 'image/tiff'\n      };\n    }\n\n    if (version === 43) {\n      // Big TIFF file header\n      return {\n        ext: 'tif',\n        mime: 'image/tiff'\n      };\n    }\n  }\n\n}\n\nexport async function fileTypeStream(readableStream, {\n  sampleSize = minimumBytes\n} = {}) {\n  // eslint-disable-next-line node/no-unsupported-features/es-syntax\n  const {\n    default: stream\n  } = await import('node:stream');\n  return new Promise((resolve, reject) => {\n    readableStream.on('error', reject);\n    readableStream.once('readable', () => {\n      (async () => {\n        try {\n          // Set up output stream\n          const pass = new stream.PassThrough();\n          const outputStream = stream.pipeline ? stream.pipeline(readableStream, pass, () => {}) : readableStream.pipe(pass); // Read the input stream and detect the filetype\n\n          const chunk = readableStream.read(sampleSize) || readableStream.read() || Buffer.alloc(0);\n\n          try {\n            const fileType = await fileTypeFromBuffer(chunk);\n            pass.fileType = fileType;\n          } catch (error) {\n            if (error instanceof strtok3.EndOfStreamError) {\n              pass.fileType = undefined;\n            } else {\n              reject(error);\n            }\n          }\n\n          resolve(outputStream);\n        } catch (error) {\n          reject(error);\n        }\n      })();\n    });\n  });\n}\nexport const supportedExtensions = new Set(extensions);\nexport const supportedMimeTypes = new Set(mimeTypes);","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/node_modules/file-type/core.js"],"names":["Buffer","Token","strtok3","stringToBytes","tarHeaderChecksumMatches","uint32SyncSafeToken","extensions","mimeTypes","minimumBytes","fileTypeFromStream","stream","tokenizer","fromStream","fileTypeFromTokenizer","close","fileTypeFromBuffer","input","Uint8Array","ArrayBuffer","TypeError","buffer","length","fromBuffer","_check","headers","options","offset","index","header","entries","mask","FileTypeParser","parse","error","EndOfStreamError","check","checkString","alloc","fileInfo","size","undefined","Number","MAX_SAFE_INTEGER","peekBuffer","mayBeLess","ext","mime","ignore","id3HeaderLength","readToken","position","readBuffer","zipHeader","compressedSize","readUInt32LE","uncompressedSize","filenameLength","readUInt16LE","extraFieldLength","filename","StringType","endsWith","type","split","startsWith","mimeType","nextHeaderIndex","indexOf","brandMajor","toString","replace","trim","maxBufferSize","Math","min","includes","from","fileType","readTiffHeader","readField","msb","peekNumber","UINT8","ic","id","readElement","lengthField","nrLength","readUIntBE","len","readChildren","level","children","element","rawValue","re","docType","string","readChunkHeader","INT32_BE","chunk","readHeader","guid","UINT64_LE","payload","typeId","jsonSize","slice","json","JSON","files","readTiffTag","bigEndian","tagId","UINT16_BE","UINT16_LE","readTiffIFD","numberOfTags","n","version","get","ifdOffset","UINT32_BE","UINT32_LE","fileTypeStream","readableStream","sampleSize","default","Promise","resolve","reject","on","once","pass","PassThrough","outputStream","pipeline","pipe","read","supportedExtensions","Set","supportedMimeTypes"],"mappings":"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","sourcesContent":["import {Buffer} from 'node:buffer';\nimport * as Token from 'token-types';\nimport * as strtok3 from 'strtok3/core';\nimport {\n\tstringToBytes,\n\ttarHeaderChecksumMatches,\n\tuint32SyncSafeToken,\n} from './util.js';\nimport {extensions, mimeTypes} from './supported.js';\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range.\n\nexport async function fileTypeFromStream(stream) {\n\tconst tokenizer = await strtok3.fromStream(stream);\n\ttry {\n\t\treturn await fileTypeFromTokenizer(tokenizer);\n\t} finally {\n\t\tawait tokenizer.close();\n\t}\n}\n\nexport async function fileTypeFromBuffer(input) {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buffer = input instanceof Uint8Array ? input : new Uint8Array(input);\n\n\tif (!(buffer && buffer.length > 1)) {\n\t\treturn;\n\t}\n\n\treturn fileTypeFromTokenizer(strtok3.fromBuffer(buffer));\n}\n\nfunction _check(buffer, headers, options) {\n\toptions = {\n\t\toffset: 0,\n\t\t...options,\n\t};\n\n\tfor (const [index, header] of headers.entries()) {\n\t\t// If a bitmask is set\n\t\tif (options.mask) {\n\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (header !== buffer[index + options.offset]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport async function fileTypeFromTokenizer(tokenizer) {\n\ttry {\n\t\treturn new FileTypeParser().parse(tokenizer);\n\t} catch (error) {\n\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nclass FileTypeParser {\n\tcheck(header, options) {\n\t\treturn _check(this.buffer, header, options);\n\t}\n\n\tcheckString(header, options) {\n\t\treturn this.check(stringToBytes(header), options);\n\t}\n\n\tasync parse(tokenizer) {\n\t\tthis.buffer = Buffer.alloc(minimumBytes);\n\n\t\t// Keep reading until EOF if the file size is unknown.\n\t\tif (tokenizer.fileInfo.size === undefined) {\n\t\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t\t}\n\n\t\t// Keep reading until EOF if the file size is unknown.\n\t\tif (tokenizer.fileInfo.size === undefined) {\n\t\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t\t}\n\n\t\tthis.tokenizer = tokenizer;\n\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: 12, mayBeLess: true});\n\n\t\t// -- 2-byte signatures --\n\n\t\tif (this.check([0x42, 0x4D])) {\n\t\t\treturn {\n\t\t\t\text: 'bmp',\n\t\t\t\tmime: 'image/bmp',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x0B, 0x77])) {\n\t\t\treturn {\n\t\t\t\text: 'ac3',\n\t\t\t\tmime: 'audio/vnd.dolby.dd-raw',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x78, 0x01])) {\n\t\t\treturn {\n\t\t\t\text: 'dmg',\n\t\t\t\tmime: 'application/x-apple-diskimage',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4D, 0x5A])) {\n\t\t\treturn {\n\t\t\t\text: 'exe',\n\t\t\t\tmime: 'application/x-msdownload',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x25, 0x21])) {\n\t\t\tawait tokenizer.peekBuffer(this.buffer, {length: 24, mayBeLess: true});\n\n\t\t\tif (\n\t\t\t\tthis.checkString('PS-Adobe-', {offset: 2})\n\t\t\t\t&& this.checkString(' EPSF-', {offset: 14})\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'eps',\n\t\t\t\t\tmime: 'application/eps',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'ps',\n\t\t\t\tmime: 'application/postscript',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x1F, 0xA0])\n\t\t\t|| this.check([0x1F, 0x9D])\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'Z',\n\t\t\t\tmime: 'application/x-compress',\n\t\t\t};\n\t\t}\n\n\t\t// -- 3-byte signatures --\n\n\t\tif (this.check([0xFF, 0xD8, 0xFF])) {\n\t\t\treturn {\n\t\t\t\text: 'jpg',\n\t\t\t\tmime: 'image/jpeg',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x49, 0x49, 0xBC])) {\n\t\t\treturn {\n\t\t\t\text: 'jxr',\n\t\t\t\tmime: 'image/vnd.ms-photo',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x1F, 0x8B, 0x8])) {\n\t\t\treturn {\n\t\t\t\text: 'gz',\n\t\t\t\tmime: 'application/gzip',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x42, 0x5A, 0x68])) {\n\t\t\treturn {\n\t\t\t\text: 'bz2',\n\t\t\t\tmime: 'application/x-bzip2',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('ID3')) {\n\t\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\n\t\t\tconst id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);\n\t\t\tif (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {\n\t\t\t\t// Guess file type based on ID3 header for backward compatibility\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp3',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(id3HeaderLength);\n\t\t\treturn fileTypeFromTokenizer(tokenizer); // Skip ID3 header, recursion\n\t\t}\n\n\t\t// Musepack, SV7\n\t\tif (this.checkString('MP+')) {\n\t\t\treturn {\n\t\t\t\text: 'mpc',\n\t\t\t\tmime: 'audio/x-musepack',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\t(this.buffer[0] === 0x43 || this.buffer[0] === 0x46)\n\t\t\t&& this.check([0x57, 0x53], {offset: 1})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'swf',\n\t\t\t\tmime: 'application/x-shockwave-flash',\n\t\t\t};\n\t\t}\n\n\t\t// -- 4-byte signatures --\n\n\t\tif (this.check([0x47, 0x49, 0x46])) {\n\t\t\treturn {\n\t\t\t\text: 'gif',\n\t\t\t\tmime: 'image/gif',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('FLIF')) {\n\t\t\treturn {\n\t\t\t\text: 'flif',\n\t\t\t\tmime: 'image/flif',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('8BPS')) {\n\t\t\treturn {\n\t\t\t\text: 'psd',\n\t\t\t\tmime: 'image/vnd.adobe.photoshop',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('WEBP', {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'webp',\n\t\t\t\tmime: 'image/webp',\n\t\t\t};\n\t\t}\n\n\t\t// Musepack, SV8\n\t\tif (this.checkString('MPCK')) {\n\t\t\treturn {\n\t\t\t\text: 'mpc',\n\t\t\t\tmime: 'audio/x-musepack',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('FORM')) {\n\t\t\treturn {\n\t\t\t\text: 'aif',\n\t\t\t\tmime: 'audio/aiff',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('icns', {offset: 0})) {\n\t\t\treturn {\n\t\t\t\text: 'icns',\n\t\t\t\tmime: 'image/icns',\n\t\t\t};\n\t\t}\n\n\t\t// Zip-based file formats\n\t\t// Need to be before the `zip` check\n\t\tif (this.check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\n\t\t\ttry {\n\t\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n\t\t\t\t\tawait tokenizer.readBuffer(this.buffer, {length: 30});\n\n\t\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\t\t\t\t\tconst zipHeader = {\n\t\t\t\t\t\tcompressedSize: this.buffer.readUInt32LE(18),\n\t\t\t\t\t\tuncompressedSize: this.buffer.readUInt32LE(22),\n\t\t\t\t\t\tfilenameLength: this.buffer.readUInt16LE(26),\n\t\t\t\t\t\textraFieldLength: this.buffer.readUInt16LE(28),\n\t\t\t\t\t};\n\n\t\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\n\n\t\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'xpi',\n\t\t\t\t\t\t\tmime: 'application/x-xpinstall',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n\t\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase '_rels':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'word':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'ppt':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'xl':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: '3mf',\n\t\t\t\t\t\t\tmime: 'model/3mf',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t\t\t\t// We look for:\n\t\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t\t\t\t// - one entry indicating specific type of file.\n\t\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n\t\t\t\t\t\tconst mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n\t\t\t\t\t\tswitch (mimeType) {\n\t\t\t\t\t\t\tcase 'application/epub+zip':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'epub',\n\t\t\t\t\t\t\t\t\tmime: 'application/epub+zip',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'odt',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'ods',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'odp',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Try to find next header manually when current one is corrupted\n\t\t\t\t\tif (zipHeader.compressedSize === 0) {\n\t\t\t\t\t\tlet nextHeaderIndex = -1;\n\n\t\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\n\t\t\t\t\t\t\tawait tokenizer.peekBuffer(this.buffer, {mayBeLess: true});\n\n\t\t\t\t\t\t\tnextHeaderIndex = this.buffer.indexOf('504B0304', 0, 'hex');\n\t\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\n\t\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'zip',\n\t\t\t\tmime: 'application/zip',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('OggS')) {\n\t\t\t// This is an OGG container\n\t\t\tawait tokenizer.ignore(28);\n\t\t\tconst type = Buffer.alloc(8);\n\t\t\tawait tokenizer.readBuffer(type);\n\n\t\t\t// Needs to be before `ogg` check\n\t\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'opus',\n\t\t\t\t\tmime: 'audio/opus',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If ' theora' in header.\n\t\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ogv',\n\t\t\t\t\tmime: 'video/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If '\\x01video' in header.\n\t\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ogm',\n\t\t\t\t\tmime: 'video/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'oga',\n\t\t\t\t\tmime: 'audio/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'spx',\n\t\t\t\t\tmime: 'audio/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If '\\x01vorbis' in header\n\t\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ogg',\n\t\t\t\t\tmime: 'audio/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\t\treturn {\n\t\t\t\text: 'ogx',\n\t\t\t\tmime: 'application/ogg',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x50, 0x4B])\n\t\t\t&& (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7)\n\t\t\t&& (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'zip',\n\t\t\t\tmime: 'application/zip',\n\t\t\t};\n\t\t}\n\n\t\t//\n\n\t\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\t\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n\t\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n\t\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\t\tif (\n\t\t\tthis.checkString('ftyp', {offset: 4})\n\t\t\t&& (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n\t\t) {\n\t\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n\t\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n\t\t\tconst brandMajor = this.buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\t\t\tswitch (brandMajor) {\n\t\t\t\tcase 'avif':\n\t\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\n\t\t\t\tcase 'mif1':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\n\t\t\t\tcase 'msf1':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\n\t\t\t\tcase 'heic':\n\t\t\t\tcase 'heix':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\n\t\t\t\tcase 'hevc':\n\t\t\t\tcase 'hevx':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\n\t\t\t\tcase 'qt':\n\t\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\n\t\t\t\tcase 'M4V':\n\t\t\t\tcase 'M4VH':\n\t\t\t\tcase 'M4VP':\n\t\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\n\t\t\t\tcase 'M4P':\n\t\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\n\t\t\t\tcase 'M4B':\n\t\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\n\t\t\t\tcase 'M4A':\n\t\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\n\t\t\t\tcase 'F4V':\n\t\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\n\t\t\t\tcase 'F4P':\n\t\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\n\t\t\t\tcase 'F4A':\n\t\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\n\t\t\t\tcase 'F4B':\n\t\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\n\t\t\t\tcase 'crx':\n\t\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\n\t\t\t\tdefault:\n\t\t\t\t\tif (brandMajor.startsWith('3g')) {\n\t\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\n\t\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('MThd')) {\n\t\t\treturn {\n\t\t\t\text: 'mid',\n\t\t\t\tmime: 'audio/midi',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('wOFF')\n\t\t\t&& (\n\t\t\t\tthis.check([0x00, 0x01, 0x00, 0x00], {offset: 4})\n\t\t\t\t|| this.checkString('OTTO', {offset: 4})\n\t\t\t)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'woff',\n\t\t\t\tmime: 'font/woff',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('wOF2')\n\t\t\t&& (\n\t\t\t\tthis.check([0x00, 0x01, 0x00, 0x00], {offset: 4})\n\t\t\t\t|| this.checkString('OTTO', {offset: 4})\n\t\t\t)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'woff2',\n\t\t\t\tmime: 'font/woff2',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xD4, 0xC3, 0xB2, 0xA1]) || this.check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\t\treturn {\n\t\t\t\text: 'pcap',\n\t\t\t\tmime: 'application/vnd.tcpdump.pcap',\n\t\t\t};\n\t\t}\n\n\t\t// Sony DSD Stream File (DSF)\n\t\tif (this.checkString('DSD ')) {\n\t\t\treturn {\n\t\t\t\text: 'dsf',\n\t\t\t\tmime: 'audio/x-dsf', // Non-standard\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('LZIP')) {\n\t\t\treturn {\n\t\t\t\text: 'lz',\n\t\t\t\tmime: 'application/x-lzip',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('fLaC')) {\n\t\t\treturn {\n\t\t\t\text: 'flac',\n\t\t\t\tmime: 'audio/x-flac',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x42, 0x50, 0x47, 0xFB])) {\n\t\t\treturn {\n\t\t\t\text: 'bpg',\n\t\t\t\tmime: 'image/bpg',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('wvpk')) {\n\t\t\treturn {\n\t\t\t\text: 'wv',\n\t\t\t\tmime: 'audio/wavpack',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('%PDF')) {\n\t\t\tawait tokenizer.ignore(1350);\n\t\t\tconst maxBufferSize = 10 * 1024 * 1024;\n\t\t\tconst buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n\t\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\n\n\t\t\t// Check if this is an Adobe Illustrator file\n\t\t\tif (buffer.includes(Buffer.from('AIPrivateData'))) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ai',\n\t\t\t\t\tmime: 'application/postscript',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Assume this is just a normal PDF\n\t\t\treturn {\n\t\t\t\text: 'pdf',\n\t\t\t\tmime: 'application/pdf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x61, 0x73, 0x6D])) {\n\t\t\treturn {\n\t\t\t\text: 'wasm',\n\t\t\t\tmime: 'application/wasm',\n\t\t\t};\n\t\t}\n\n\t\t// TIFF, little-endian type\n\t\tif (this.check([0x49, 0x49])) {\n\t\t\tconst fileType = await this.readTiffHeader(false);\n\t\t\tif (fileType) {\n\t\t\t\treturn fileType;\n\t\t\t}\n\t\t}\n\n\t\t// TIFF, big-endian type\n\t\tif (this.check([0x4D, 0x4D])) {\n\t\t\tconst fileType = await this.readTiffHeader(true);\n\t\t\tif (fileType) {\n\t\t\t\treturn fileType;\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('MAC ')) {\n\t\t\treturn {\n\t\t\t\text: 'ape',\n\t\t\t\tmime: 'audio/ape',\n\t\t\t};\n\t\t}\n\n\t\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\t\tif (this.check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\n\t\t\tasync function readField() {\n\t\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\n\t\t\t\tlet mask = 0x80;\n\t\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3\n\t\t\t\t// = D\n\n\t\t\t\twhile ((msb & mask) === 0) {\n\t\t\t\t\t++ic;\n\t\t\t\t\tmask >>= 1;\n\t\t\t\t}\n\n\t\t\t\tconst id = Buffer.alloc(ic + 1);\n\t\t\t\tawait tokenizer.readBuffer(id);\n\t\t\t\treturn id;\n\t\t\t}\n\n\t\t\tasync function readElement() {\n\t\t\t\tconst id = await readField();\n\t\t\t\tconst lengthField = await readField();\n\t\t\t\tlengthField[0] ^= 0x80 >> (lengthField.length - 1);\n\t\t\t\tconst nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer\n\t\t\t\treturn {\n\t\t\t\t\tid: id.readUIntBE(0, id.length),\n\t\t\t\t\tlen: lengthField.readUIntBE(lengthField.length - nrLength, nrLength),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tasync function readChildren(level, children) {\n\t\t\t\twhile (children > 0) {\n\t\t\t\t\tconst element = await readElement();\n\t\t\t\t\tif (element.id === 0x42_82) {\n\t\t\t\t\t\tconst rawValue = await tokenizer.readToken(new Token.StringType(element.len, 'utf-8'));\n\t\t\t\t\t\treturn rawValue.replace(/\\00.*$/g, ''); // Return DocType\n\t\t\t\t\t}\n\n\t\t\t\t\tawait tokenizer.ignore(element.len); // ignore payload\n\t\t\t\t\t--children;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst re = await readElement();\n\t\t\tconst docType = await readChildren(1, re.len);\n\n\t\t\tswitch (docType) {\n\t\t\t\tcase 'webm':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'webm',\n\t\t\t\t\t\tmime: 'video/webm',\n\t\t\t\t\t};\n\n\t\t\t\tcase 'matroska':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'mkv',\n\t\t\t\t\t\tmime: 'video/x-matroska',\n\t\t\t\t\t};\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// RIFF file format which might be AVI, WAV, QCP, etc\n\t\tif (this.check([0x52, 0x49, 0x46, 0x46])) {\n\t\t\tif (this.check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'avi',\n\t\t\t\t\tmime: 'video/vnd.avi',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (this.check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'wav',\n\t\t\t\t\tmime: 'audio/vnd.wave',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// QLCM, QCP file\n\t\t\tif (this.check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'qcp',\n\t\t\t\t\tmime: 'audio/qcelp',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('SQLi')) {\n\t\t\treturn {\n\t\t\t\text: 'sqlite',\n\t\t\t\tmime: 'application/x-sqlite3',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\t\treturn {\n\t\t\t\text: 'nes',\n\t\t\t\tmime: 'application/x-nintendo-nes-rom',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('Cr24')) {\n\t\t\treturn {\n\t\t\t\text: 'crx',\n\t\t\t\tmime: 'application/x-google-chrome-extension',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('MSCF')\n\t\t\t|| this.checkString('ISc(')\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'cab',\n\t\t\t\tmime: 'application/vnd.ms-cab-compressed',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\t\treturn {\n\t\t\t\text: 'rpm',\n\t\t\t\tmime: 'application/x-rpm',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xC5, 0xD0, 0xD3, 0xC6])) {\n\t\t\treturn {\n\t\t\t\text: 'eps',\n\t\t\t\tmime: 'application/eps',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x28, 0xB5, 0x2F, 0xFD])) {\n\t\t\treturn {\n\t\t\t\text: 'zst',\n\t\t\t\tmime: 'application/zstd',\n\t\t\t};\n\t\t}\n\n\t\t// -- 5-byte signatures --\n\n\t\tif (this.check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'otf',\n\t\t\t\tmime: 'font/otf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('#!AMR')) {\n\t\t\treturn {\n\t\t\t\text: 'amr',\n\t\t\t\tmime: 'audio/amr',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('{\\\\rtf')) {\n\t\t\treturn {\n\t\t\t\text: 'rtf',\n\t\t\t\tmime: 'application/rtf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x46, 0x4C, 0x56, 0x01])) {\n\t\t\treturn {\n\t\t\t\text: 'flv',\n\t\t\t\tmime: 'video/x-flv',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('IMPM')) {\n\t\t\treturn {\n\t\t\t\text: 'it',\n\t\t\t\tmime: 'audio/x-it',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('-lh0-', {offset: 2})\n\t\t\t|| this.checkString('-lh1-', {offset: 2})\n\t\t\t|| this.checkString('-lh2-', {offset: 2})\n\t\t\t|| this.checkString('-lh3-', {offset: 2})\n\t\t\t|| this.checkString('-lh4-', {offset: 2})\n\t\t\t|| this.checkString('-lh5-', {offset: 2})\n\t\t\t|| this.checkString('-lh6-', {offset: 2})\n\t\t\t|| this.checkString('-lh7-', {offset: 2})\n\t\t\t|| this.checkString('-lzs-', {offset: 2})\n\t\t\t|| this.checkString('-lz4-', {offset: 2})\n\t\t\t|| this.checkString('-lz5-', {offset: 2})\n\t\t\t|| this.checkString('-lhd-', {offset: 2})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'lzh',\n\t\t\t\tmime: 'application/x-lzh-compressed',\n\t\t\t};\n\t\t}\n\n\t\t// MPEG program stream (PS or MPEG-PS)\n\t\tif (this.check([0x00, 0x00, 0x01, 0xBA])) {\n\t\t\t//  MPEG-PS, MPEG-1 Part 1\n\t\t\tif (this.check([0x21], {offset: 4, mask: [0xF1]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mpg', // May also be .ps, .mpeg\n\t\t\t\t\tmime: 'video/MP1S',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// MPEG-PS, MPEG-2 Part 1\n\t\t\tif (this.check([0x44], {offset: 4, mask: [0xC4]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\n\t\t\t\t\tmime: 'video/MP2P',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('ITSF')) {\n\t\t\treturn {\n\t\t\t\text: 'chm',\n\t\t\t\tmime: 'application/vnd.ms-htmlhelp',\n\t\t\t};\n\t\t}\n\n\t\t// -- 6-byte signatures --\n\n\t\tif (this.check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'xz',\n\t\t\t\tmime: 'application/x-xz',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('<?xml ')) {\n\t\t\treturn {\n\t\t\t\text: 'xml',\n\t\t\t\tmime: 'application/xml',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\t\treturn {\n\t\t\t\text: '7z',\n\t\t\t\tmime: 'application/x-7z-compressed',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7])\n\t\t\t&& (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'rar',\n\t\t\t\tmime: 'application/x-rar-compressed',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('solid ')) {\n\t\t\treturn {\n\t\t\t\text: 'stl',\n\t\t\t\tmime: 'model/stl',\n\t\t\t};\n\t\t}\n\n\t\t// -- 7-byte signatures --\n\n\t\tif (this.checkString('BLENDER')) {\n\t\t\treturn {\n\t\t\t\text: 'blend',\n\t\t\t\tmime: 'application/x-blender',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('!<arch>')) {\n\t\t\tawait tokenizer.ignore(8);\n\t\t\tconst string = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\t\t\tif (string === 'debian-binary') {\n\t\t\t\treturn {\n\t\t\t\t\text: 'deb',\n\t\t\t\t\tmime: 'application/x-deb',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'ar',\n\t\t\t\tmime: 'application/x-unix-archive',\n\t\t\t};\n\t\t}\n\n\t\t// -- 8-byte signatures --\n\n\t\tif (this.check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\n\t\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\n\t\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n\t\t\t// Offset calculated as follows:\n\t\t\t// - 8 bytes: PNG signature\n\t\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n\t\t\tawait tokenizer.ignore(8); // ignore PNG signature\n\n\t\t\tasync function readChunkHeader() {\n\t\t\t\treturn {\n\t\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\n\t\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'binary')),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tdo {\n\t\t\t\tconst chunk = await readChunkHeader();\n\t\t\t\tif (chunk.length < 0) {\n\t\t\t\t\treturn; // Invalid chunk length\n\t\t\t\t}\n\n\t\t\t\tswitch (chunk.type) {\n\t\t\t\t\tcase 'IDAT':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'png',\n\t\t\t\t\t\t\tmime: 'image/png',\n\t\t\t\t\t\t};\n\t\t\t\t\tcase 'acTL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'apng',\n\t\t\t\t\t\t\tmime: 'image/apng',\n\t\t\t\t\t\t};\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n\t\t\t\t}\n\t\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n\t\t\treturn {\n\t\t\t\text: 'png',\n\t\t\t\tmime: 'image/png',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'arrow',\n\t\t\t\tmime: 'application/x-apache-arrow',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'glb',\n\t\t\t\tmime: 'model/gltf-binary',\n\t\t\t};\n\t\t}\n\n\t\t// `mov` format variants\n\t\tif (\n\t\t\tthis.check([0x66, 0x72, 0x65, 0x65], {offset: 4}) // `free`\n\t\t\t|| this.check([0x6D, 0x64, 0x61, 0x74], {offset: 4}) // `mdat` MJPEG\n\t\t\t|| this.check([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) // `moov`\n\t\t\t|| this.check([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mov',\n\t\t\t\tmime: 'video/quicktime',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xEF, 0xBB, 0xBF]) && this.checkString('<?xml', {offset: 3})) { // UTF-8-BOM\n\t\t\treturn {\n\t\t\t\text: 'xml',\n\t\t\t\tmime: 'application/xml',\n\t\t\t};\n\t\t}\n\n\t\t// -- 9-byte signatures --\n\n\t\tif (this.check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n\t\t\treturn {\n\t\t\t\text: 'orf',\n\t\t\t\tmime: 'image/x-olympus-orf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('gimp xcf ')) {\n\t\t\treturn {\n\t\t\t\text: 'xcf',\n\t\t\t\tmime: 'image/x-xcf',\n\t\t\t};\n\t\t}\n\n\t\t// -- 12-byte signatures --\n\n\t\tif (this.check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n\t\t\treturn {\n\t\t\t\text: 'rw2',\n\t\t\t\tmime: 'image/x-panasonic-rw2',\n\t\t\t};\n\t\t}\n\n\t\t// ASF_Header_Object first 80 bytes\n\t\tif (this.check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\t\tasync function readHeader() {\n\t\t\t\tconst guid = Buffer.alloc(16);\n\t\t\t\tawait tokenizer.readBuffer(guid);\n\t\t\t\treturn {\n\t\t\t\t\tid: guid,\n\t\t\t\t\tsize: Number(await tokenizer.readToken(Token.UINT64_LE)),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(30);\n\t\t\t// Search for header should be in first 1KB of file.\n\t\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n\t\t\t\tconst header = await readHeader();\n\t\t\t\tlet payload = header.size - 24;\n\t\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n\t\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\t\tconst typeId = Buffer.alloc(16);\n\t\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\n\n\t\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t\t// Found audio:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\t\tmime: 'audio/x-ms-asf',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t\t// Found video:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\t\tmime: 'video/x-ms-asf',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tawait tokenizer.ignore(payload);\n\t\t\t}\n\n\t\t\t// Default to ASF generic extension\n\t\t\treturn {\n\t\t\t\text: 'asf',\n\t\t\t\tmime: 'application/vnd.ms-asf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t\treturn {\n\t\t\t\text: 'ktx',\n\t\t\t\tmime: 'image/ktx',\n\t\t\t};\n\t\t}\n\n\t\tif ((this.check([0x7E, 0x10, 0x04]) || this.check([0x7E, 0x18, 0x04])) && this.check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\n\t\t\treturn {\n\t\t\t\text: 'mie',\n\t\t\t\tmime: 'application/x-mie',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\n\t\t\treturn {\n\t\t\t\text: 'shp',\n\t\t\t\tmime: 'application/x-esri-shape',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t\t// JPEG-2000 family\n\n\t\t\tawait tokenizer.ignore(20);\n\t\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\t\t\tswitch (type) {\n\t\t\t\tcase 'jp2 ':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'jp2',\n\t\t\t\t\t\tmime: 'image/jp2',\n\t\t\t\t\t};\n\t\t\t\tcase 'jpx ':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'jpx',\n\t\t\t\t\t\tmime: 'image/jpx',\n\t\t\t\t\t};\n\t\t\t\tcase 'jpm ':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'jpm',\n\t\t\t\t\t\tmime: 'image/jpm',\n\t\t\t\t\t};\n\t\t\t\tcase 'mjp2':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'mj2',\n\t\t\t\t\t\tmime: 'image/mj2',\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0xFF, 0x0A])\n\t\t\t|| this.check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'jxl',\n\t\t\t\tmime: 'image/jxl',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0xFE, 0xFF, 0, 60, 0, 63, 0, 120, 0, 109, 0, 108]) // UTF-16-BOM-LE\n\t\t\t|| this.check([0xFF, 0xFE, 60, 0, 63, 0, 120, 0, 109, 0, 108, 0]) // UTF-16-BOM-LE\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'xml',\n\t\t\t\tmime: 'application/xml',\n\t\t\t};\n\t\t}\n\n\t\t// -- Unsafe signatures --\n\n\t\tif (\n\t\t\tthis.check([0x0, 0x0, 0x1, 0xBA])\n\t\t\t|| this.check([0x0, 0x0, 0x1, 0xB3])\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mpg',\n\t\t\t\tmime: 'video/mpeg',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ttf',\n\t\t\t\tmime: 'font/ttf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x00, 0x01, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ico',\n\t\t\t\tmime: 'image/x-icon',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x00, 0x02, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'cur',\n\t\t\t\tmime: 'image/x-icon',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\n\t\t\treturn {\n\t\t\t\text: 'cfb',\n\t\t\t\tmime: 'application/x-cfb',\n\t\t\t};\n\t\t}\n\n\t\t// Increase sample size from 12 to 256.\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t\t// -- 15-byte signatures --\n\n\t\tif (this.checkString('BEGIN:')) {\n\t\t\tif (this.checkString('VCARD', {offset: 6})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'vcf',\n\t\t\t\t\tmime: 'text/vcard',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (this.checkString('VCALENDAR', {offset: 6})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ics',\n\t\t\t\t\tmime: 'text/calendar',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// `raf` is here just to keep all the raw image detectors together.\n\t\tif (this.checkString('FUJIFILMCCD-RAW')) {\n\t\t\treturn {\n\t\t\t\text: 'raf',\n\t\t\t\tmime: 'image/x-fujifilm-raf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('Extended Module:')) {\n\t\t\treturn {\n\t\t\t\text: 'xm',\n\t\t\t\tmime: 'audio/x-xm',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('Creative Voice File')) {\n\t\t\treturn {\n\t\t\t\text: 'voc',\n\t\t\t\tmime: 'audio/x-voc',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x04, 0x00, 0x00, 0x00]) && this.buffer.length >= 16) { // Rough & quick check Pickle/ASAR\n\t\t\tconst jsonSize = this.buffer.readUInt32LE(12);\n\t\t\tif (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {\n\t\t\t\ttry {\n\t\t\t\t\tconst header = this.buffer.slice(16, jsonSize + 16).toString();\n\t\t\t\t\tconst json = JSON.parse(header);\n\t\t\t\t\t// Check if Pickle is ASAR\n\t\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'asar',\n\t\t\t\t\t\t\tmime: 'application/x-asar',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} catch {}\n\t\t\t}\n\t\t}\n\n\t\tif (this.check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\t\treturn {\n\t\t\t\text: 'mxf',\n\t\t\t\tmime: 'application/mxf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('SCRM', {offset: 44})) {\n\t\t\treturn {\n\t\t\t\text: 's3m',\n\t\t\t\tmime: 'audio/x-s3m',\n\t\t\t};\n\t\t}\n\n\t\t// Raw MPEG-2 transport stream (188-byte packets)\n\t\tif (this.check([0x47]) && this.check([0x47], {offset: 188})) {\n\t\t\treturn {\n\t\t\t\text: 'mts',\n\t\t\t\tmime: 'video/mp2t',\n\t\t\t};\n\t\t}\n\n\t\t// Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet\n\t\tif (this.check([0x47], {offset: 4}) && this.check([0x47], {offset: 196})) {\n\t\t\treturn {\n\t\t\t\text: 'mts',\n\t\t\t\tmime: 'video/mp2t',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\t\treturn {\n\t\t\t\text: 'mobi',\n\t\t\t\tmime: 'application/x-mobipocket-ebook',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\t\treturn {\n\t\t\t\text: 'dcm',\n\t\t\t\tmime: 'application/dicom',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n\t\t\treturn {\n\t\t\t\text: 'lnk',\n\t\t\t\tmime: 'application/x.ms.shortcut', // Invented by us\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'alias',\n\t\t\t\tmime: 'application/x.apple.alias', // Invented by us\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x4C, 0x50], {offset: 34})\n\t\t\t&& (\n\t\t\t\tthis.check([0x00, 0x00, 0x01], {offset: 8})\n\t\t\t\t|| this.check([0x01, 0x00, 0x02], {offset: 8})\n\t\t\t\t|| this.check([0x02, 0x00, 0x02], {offset: 8})\n\t\t\t)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'eot',\n\t\t\t\tmime: 'application/vnd.ms-fontobject',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n\t\t\treturn {\n\t\t\t\text: 'indd',\n\t\t\t\tmime: 'application/x-indesign',\n\t\t\t};\n\t\t}\n\n\t\t// Increase sample size from 256 to 512\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t\t// Requires a buffer size of 512 bytes\n\t\tif (tarHeaderChecksumMatches(this.buffer)) {\n\t\t\treturn {\n\t\t\t\text: 'tar',\n\t\t\t\tmime: 'application/x-tar',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'skp',\n\t\t\t\tmime: 'application/vnd.sketchup.skp',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('-----BEGIN PGP MESSAGE-----')) {\n\t\t\treturn {\n\t\t\t\text: 'pgp',\n\t\t\t\tmime: 'application/pgp-encrypted',\n\t\t\t};\n\t\t}\n\n\t\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\t\tif (this.buffer.length >= 2 && this.check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\n\t\t\tif (this.check([0x10], {offset: 1, mask: [0x16]})) {\n\t\t\t\t// Check for (ADTS) MPEG-2\n\t\t\t\tif (this.check([0x08], {offset: 1, mask: [0x08]})) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'aac',\n\t\t\t\t\t\tmime: 'audio/aac',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Must be (ADTS) MPEG-4\n\t\t\t\treturn {\n\t\t\t\t\text: 'aac',\n\t\t\t\t\tmime: 'audio/aac',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// MPEG 1 or 2 Layer 3 header\n\t\t\t// Check for MPEG layer 3\n\t\t\tif (this.check([0x02], {offset: 1, mask: [0x06]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp3',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Check for MPEG layer 2\n\t\t\tif (this.check([0x04], {offset: 1, mask: [0x06]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp2',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Check for MPEG layer 1\n\t\t\tif (this.check([0x06], {offset: 1, mask: [0x06]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp1',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tasync readTiffTag(bigEndian) {\n\t\tconst tagId = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n\t\tthis.tokenizer.ignore(10);\n\t\tswitch (tagId) {\n\t\t\tcase 50_341:\n\t\t\t\treturn {\n\t\t\t\t\text: 'arw',\n\t\t\t\t\tmime: 'image/x-sony-arw',\n\t\t\t\t};\n\t\t\tcase 50_706:\n\t\t\t\treturn {\n\t\t\t\t\text: 'dng',\n\t\t\t\t\tmime: 'image/x-adobe-dng',\n\t\t\t\t};\n\t\t\tdefault:\n\t\t}\n\t}\n\n\tasync readTiffIFD(bigEndian) {\n\t\tconst numberOfTags = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n\t\tfor (let n = 0; n < numberOfTags; ++n) {\n\t\t\tconst fileType = await this.readTiffTag(bigEndian);\n\t\t\tif (fileType) {\n\t\t\t\treturn fileType;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync readTiffHeader(bigEndian) {\n\t\tconst version = (bigEndian ? Token.UINT16_BE : Token.UINT16_LE).get(this.buffer, 2);\n\t\tconst ifdOffset = (bigEndian ? Token.UINT32_BE : Token.UINT32_LE).get(this.buffer, 4);\n\n\t\tif (version === 42) {\n\t\t\t// TIFF file header\n\t\t\tif (ifdOffset >= 6) {\n\t\t\t\tif (this.checkString('CR', {offset: 8})) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'cr2',\n\t\t\t\t\t\tmime: 'image/x-canon-cr2',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (ifdOffset >= 8 && (this.check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || this.check([0x1F, 0x00, 0x0B, 0x00], {offset: 8}))) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'nef',\n\t\t\t\t\t\tmime: 'image/x-nikon-nef',\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.tokenizer.ignore(ifdOffset);\n\t\t\tconst fileType = await this.readTiffIFD(false);\n\t\t\treturn fileType ? fileType : {\n\t\t\t\text: 'tif',\n\t\t\t\tmime: 'image/tiff',\n\t\t\t};\n\t\t}\n\n\t\tif (version === 43) {\t// Big TIFF file header\n\t\t\treturn {\n\t\t\t\text: 'tif',\n\t\t\t\tmime: 'image/tiff',\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport async function fileTypeStream(readableStream, {sampleSize = minimumBytes} = {}) {\n\t// eslint-disable-next-line node/no-unsupported-features/es-syntax\n\tconst {default: stream} = await import('node:stream');\n\n\treturn new Promise((resolve, reject) => {\n\t\treadableStream.on('error', reject);\n\n\t\treadableStream.once('readable', () => {\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// Set up output stream\n\t\t\t\t\tconst pass = new stream.PassThrough();\n\t\t\t\t\tconst outputStream = stream.pipeline ? stream.pipeline(readableStream, pass, () => {}) : readableStream.pipe(pass);\n\n\t\t\t\t\t// Read the input stream and detect the filetype\n\t\t\t\t\tconst chunk = readableStream.read(sampleSize) || readableStream.read() || Buffer.alloc(0);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fileType = await fileTypeFromBuffer(chunk);\n\t\t\t\t\t\tpass.fileType = fileType;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (error instanceof strtok3.EndOfStreamError) {\n\t\t\t\t\t\t\tpass.fileType = undefined;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(outputStream);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})();\n\t\t});\n\t});\n}\n\nexport const supportedExtensions = new Set(extensions);\nexport const supportedMimeTypes = new Set(mimeTypes);\n"]},"metadata":{},"sourceType":"module"}