{"ast":null,"code":"import { findChild, findChildren, forEach, map, getTagName } from './dom';\nexport function getCells(document) {\n  var worksheet = document.documentElement;\n  var sheetData = findChild(worksheet, 'sheetData');\n  var cells = [];\n  forEach(sheetData, 'row', function (row) {\n    forEach(row, 'c', function (cell) {\n      cells.push(cell);\n    });\n  });\n  return cells;\n}\nexport function getMergedCells(document) {\n  var worksheet = document.documentElement;\n  var mergedCells = findChild(worksheet, 'mergeCells');\n  var mergedCellsInfo = [];\n\n  if (mergedCells) {\n    forEach(mergedCells, 'mergeCell', function (mergedCell) {\n      mergedCellsInfo.push(mergedCell.getAttribute('ref'));\n    });\n  }\n\n  return mergedCellsInfo;\n}\nexport function getCellValue(document, node) {\n  return findChild(node, 'v');\n}\nexport function getCellInlineStringValue(document, node) {\n  if (node.firstChild && getTagName(node.firstChild) === 'is' && node.firstChild.firstChild && getTagName(node.firstChild.firstChild) === 't') {\n    return node.firstChild.firstChild.textContent;\n  }\n}\nexport function getDimensions(document) {\n  var worksheet = document.documentElement;\n  var dimensions = findChild(worksheet, 'dimension');\n\n  if (dimensions) {\n    return dimensions.getAttribute('ref');\n  }\n}\nexport function getBaseStyles(document) {\n  var styleSheet = document.documentElement;\n  var cellStyleXfs = findChild(styleSheet, 'cellStyleXfs');\n\n  if (cellStyleXfs) {\n    return findChildren(cellStyleXfs, 'xf');\n  }\n\n  return [];\n}\nexport function getCellStyles(document) {\n  var styleSheet = document.documentElement;\n  var cellXfs = findChild(styleSheet, 'cellXfs');\n\n  if (!cellXfs) {\n    return [];\n  }\n\n  return findChildren(cellXfs, 'xf');\n}\nexport function getNumberFormats(document) {\n  var styleSheet = document.documentElement;\n  var numberFormats = [];\n  var numFmts = findChild(styleSheet, 'numFmts');\n\n  if (numFmts) {\n    return findChildren(numFmts, 'numFmt');\n  }\n\n  return [];\n}\nexport function getSharedStrings(document) {\n  // An `<si/>` element can contain a `<t/>` (simplest case) or a set of `<r/>` (\"rich formatting\") elements having `<t/>`.\n  // https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.sharedstringitem?redirectedfrom=MSDN&view=openxml-2.8.1\n  // http://www.datypic.com/sc/ooxml/e-ssml_si-1.html\n  var sst = document.documentElement;\n  return map(sst, 'si', function (string) {\n    var t = findChild(string, 't');\n\n    if (t) {\n      return t.textContent;\n    }\n\n    var value = '';\n    forEach(string, 'r', function (r) {\n      value += findChild(r, 't').textContent;\n    });\n    return value;\n  });\n}\nexport function getWorkbookProperties(document) {\n  var workbook = document.documentElement;\n  return findChild(workbook, 'workbookPr');\n}\nexport function getRelationships(document) {\n  var relationships = document.documentElement;\n  return findChildren(relationships, 'Relationship');\n}\nexport function getSheets(document) {\n  var workbook = document.documentElement;\n  var sheets = findChild(workbook, 'sheets');\n  return findChildren(sheets, 'sheet');\n}","map":{"version":3,"sources":["../../source/xml/xlsx.js"],"names":["worksheet","document","sheetData","findChild","cells","forEach","mergedCells","mergedCellsInfo","mergedCell","node","getTagName","dimensions","styleSheet","cellStyleXfs","findChildren","cellXfs","numberFormats","numFmts","sst","map","t","value","workbook","relationships","sheets"],"mappings":"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","sourcesContent":["import { findChild, findChildren, forEach, map, getTagName } from './dom'\r\n\r\nexport function getCells(document) {\r\n  const worksheet = document.documentElement\r\n  const sheetData = findChild(worksheet, 'sheetData')\r\n  const cells = []\r\n  forEach(sheetData, 'row', (row) => {\r\n    forEach(row, 'c', (cell) => {\r\n      cells.push(cell)\r\n    })\r\n  })\r\n  return cells\r\n}\r\n\r\nexport function getMergedCells(document) {\r\n  const worksheet = document.documentElement\r\n  const mergedCells = findChild(worksheet, 'mergeCells')\r\n  const mergedCellsInfo = []\r\n  if (mergedCells) {\r\n    forEach(mergedCells, 'mergeCell', (mergedCell) => {\r\n      mergedCellsInfo.push(mergedCell.getAttribute('ref'))\r\n    })\r\n  }\r\n  return mergedCellsInfo\r\n}\r\n\r\nexport function getCellValue(document, node) {\r\n  return findChild(node, 'v')\r\n}\r\n\r\nexport function getCellInlineStringValue(document, node) {\r\n  if (node.firstChild &&\r\n    getTagName(node.firstChild) === 'is' &&\r\n    node.firstChild.firstChild &&\r\n    getTagName(node.firstChild.firstChild) === 't') {\r\n    return node.firstChild.firstChild.textContent\r\n  }\r\n}\r\n\r\nexport function getDimensions(document) {\r\n  const worksheet = document.documentElement\r\n  const dimensions = findChild(worksheet, 'dimension')\r\n  if (dimensions) {\r\n    return dimensions.getAttribute('ref')\r\n  }\r\n}\r\n\r\nexport function getBaseStyles(document) {\r\n  const styleSheet = document.documentElement\r\n  const cellStyleXfs = findChild(styleSheet, 'cellStyleXfs')\r\n  if (cellStyleXfs) {\r\n    return findChildren(cellStyleXfs, 'xf')\r\n  }\r\n  return []\r\n}\r\n\r\nexport function getCellStyles(document) {\r\n  const styleSheet = document.documentElement\r\n  const cellXfs = findChild(styleSheet, 'cellXfs')\r\n  if (!cellXfs) {\r\n    return []\r\n  }\r\n  return findChildren(cellXfs, 'xf')\r\n}\r\n\r\nexport function getNumberFormats(document) {\r\n  const styleSheet = document.documentElement\r\n  let numberFormats = []\r\n  const numFmts = findChild(styleSheet, 'numFmts')\r\n  if (numFmts) {\r\n    return findChildren(numFmts, 'numFmt')\r\n  }\r\n  return []\r\n}\r\n\r\nexport function getSharedStrings(document) {\r\n\t// An `<si/>` element can contain a `<t/>` (simplest case) or a set of `<r/>` (\"rich formatting\") elements having `<t/>`.\r\n\t// https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.sharedstringitem?redirectedfrom=MSDN&view=openxml-2.8.1\r\n\t// http://www.datypic.com/sc/ooxml/e-ssml_si-1.html\r\n\r\n  const sst = document.documentElement\r\n  return map(sst, 'si', string => {\r\n    const t = findChild(string, 't')\r\n    if (t) {\r\n      return t.textContent\r\n    }\r\n    let value = ''\r\n    forEach(string, 'r', (r) => {\r\n      value += findChild(r, 't').textContent\r\n    })\r\n    return value\r\n  })\r\n}\r\n\r\nexport function getWorkbookProperties(document) {\r\n  const workbook = document.documentElement\r\n  return findChild(workbook, 'workbookPr')\r\n}\r\n\r\nexport function getRelationships(document) {\r\n  const relationships = document.documentElement\r\n  return findChildren(relationships, 'Relationship')\r\n}\r\n\r\nexport function getSheets(document) {\r\n  const workbook = document.documentElement\r\n  const sheets = findChild(workbook, 'sheets')\r\n  return findChildren(sheets, 'sheet')\r\n}"]},"metadata":{},"sourceType":"module"}