{"ast":null,"code":"import _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { withStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport _extends from '@babel/runtime/helpers/extends';\nimport Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction isImage(file) {\n  if (file.type.split('/')[0] === 'image') {\n    return true;\n  }\n}\n\nfunction convertBytesToMbsOrKbs(filesize) {\n  var size = ''; // I know, not technically correct...\n\n  if (filesize >= 1000000) {\n    size = filesize / 1000000 + ' megabytes';\n  } else if (filesize >= 1000) {\n    size = filesize / 1000 + ' kilobytes';\n  } else {\n    size = filesize + ' bytes';\n  }\n\n  return size;\n}\n\nfunction createFileFromUrl(_x) {\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction _createFileFromUrl() {\n  _createFileFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var response, data, metadata, filename, ext;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.blob();\n\n          case 5:\n            data = _context.sent;\n            metadata = {\n              type: data.type\n            };\n            filename = url.replace(/\\?.+/, '').split('/').pop();\n            ext = data.type.split('/').pop();\n            return _context.abrupt(\"return\", new File([data], \"\".concat(filename, \".\").concat(ext), metadata));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nvar styles = {\n  removeBtn: {\n    transition: '.5s ease',\n    position: 'absolute',\n    opacity: 0,\n    top: -5,\n    right: -5,\n    width: 40,\n    height: 40\n  },\n  smallPreviewImg: {\n    height: 100,\n    width: 'initial',\n    maxWidth: '100%',\n    marginTop: 5,\n    marginRight: 10,\n    color: 'rgba(0, 0, 0, 0.87)',\n    transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n    boxSizing: 'border-box',\n    boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n    borderRadius: 2,\n    zIndex: 5,\n    opacity: 1\n  },\n  imageContainer: {\n    position: 'relative',\n    zIndex: 10,\n    textAlign: 'center',\n    '&:hover $smallPreviewImg': {\n      opacity: 0.3\n    },\n    '&:hover $removeBtn': {\n      opacity: 1\n    }\n  }\n};\n\nvar _ref = /*#__PURE__*/React.createElement(DeleteIcon, null);\n\nfunction PreviewList(props) {\n  var fileObjects = props.fileObjects,\n      handleRemove = props.handleRemove,\n      showFileNames = props.showFileNames,\n      useChipsForPreview = props.useChipsForPreview,\n      previewChipProps = props.previewChipProps,\n      previewGridClasses = props.previewGridClasses,\n      previewGridProps = props.previewGridProps,\n      classes = props.classes;\n\n  if (useChipsForPreview) {\n    return fileObjects.map(function (fileObject, i) {\n      return React.createElement(\"div\", {\n        key: i\n      }, React.createElement(Chip, _extends({\n        label: fileObject.file.name,\n        onDelete: handleRemove(i),\n        variant: \"outlined\"\n      }, previewChipProps)));\n    });\n  }\n\n  return React.createElement(Grid, _extends({\n    container: true,\n    spacing: 8,\n    className: previewGridClasses.container\n  }, previewGridProps.container), fileObjects.map(function (fileObject, i) {\n    var img = isImage(fileObject.file) ? React.createElement(\"img\", {\n      className: clsx(previewGridClasses.image, classes.smallPreviewImg),\n      role: \"presentation\",\n      src: fileObject.data\n    }) : React.createElement(AttachFileIcon, {\n      className: clsx(previewGridClasses.image, classes.smallPreviewImg)\n    });\n    return React.createElement(Grid, _extends({\n      item: true,\n      xs: 4,\n      key: i\n    }, previewGridProps.item, {\n      className: clsx(previewGridClasses.item, classes.imageContainer)\n    }), img, showFileNames && React.createElement(\"p\", null, fileObject.file.name), React.createElement(Fab, {\n      onClick: handleRemove(i),\n      \"aria-label\": \"Delete\",\n      className: classes.removeBtn\n    }, _ref));\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? PreviewList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  showFileNames: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object\n} : void 0;\nvar PreviewList$1 = withStyles(styles)(PreviewList);\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles$1 = function styles(theme) {\n  return {\n    success: {\n      backgroundColor: green[600]\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    info: {\n      backgroundColor: theme.palette.primary.dark\n    },\n    warning: {\n      backgroundColor: amber[700]\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n};\n\nfunction SnackbarContentWrapper(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, _extends({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message\n    }, React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant)\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: onClose\n    }, React.createElement(CloseIcon, {\n      className: classes.icon\n    }))]\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContentWrapper.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n} : void 0;\nvar SnackbarContentWrapper$1 = withStyles(styles$1)(SnackbarContentWrapper);\nvar styles$2 = {\n  '@keyframes progress': {\n    '0%': {\n      backgroundPosition: '0 0'\n    },\n    '100%': {\n      backgroundPosition: '-70px 0'\n    }\n  },\n  dropZone: {\n    position: 'relative',\n    width: '100%',\n    minHeight: '250px',\n    backgroundColor: '#F0F0F0',\n    border: 'dashed',\n    borderColor: '#C8C8C8',\n    cursor: 'pointer',\n    boxSizing: 'border-box'\n  },\n  stripes: {\n    border: 'solid',\n    backgroundImage: 'repeating-linear-gradient(-45deg, #F0F0F0, #F0F0F0 25px, #C8C8C8 25px, #C8C8C8 50px)',\n    animation: 'progress 2s linear infinite !important',\n    backgroundSize: '150% 100%'\n  },\n  rejectStripes: {\n    border: 'solid',\n    backgroundImage: 'repeating-linear-gradient(-45deg, #fc8785, #fc8785 25px, #f4231f 25px, #f4231f 50px)',\n    animation: 'progress 2s linear infinite !important',\n    backgroundSize: '150% 100%'\n  },\n  dropzoneTextStyle: {\n    textAlign: 'center'\n  },\n  uploadIconSize: {\n    width: 51,\n    height: 51,\n    color: '#909090'\n  },\n  dropzoneParagraph: {\n    fontSize: 24\n  }\n};\n\nvar _ref$1 = /*#__PURE__*/React.createElement(Grid, {\n  container: true\n}, React.createElement(\"span\", null, \"Preview:\"));\n\nvar DropzoneArea = /*#__PURE__*/function (_Component) {\n  _inherits(DropzoneArea, _Component);\n\n  function DropzoneArea(props) {\n    var _this;\n\n    _classCallCheck(this, DropzoneArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropzoneArea).call(this, props));\n\n    _this.handleRemove = function (fileIndex) {\n      return function (event) {\n        event.stopPropagation();\n        var fileObjects = _this.state.fileObjects;\n        var file = fileObjects.filter(function (fileObject, i) {\n          return i === fileIndex;\n        })[0].file;\n        fileObjects.splice(fileIndex, 1);\n\n        _this.setState(fileObjects, function () {\n          if (_this.props.onDelete) {\n            _this.props.onDelete(file);\n          }\n\n          if (_this.props.onChange) {\n            _this.props.onChange(_this.state.fileObjects.map(function (fileObject) {\n              return fileObject.file;\n            }));\n          }\n\n          _this.setState({\n            openSnackBar: true,\n            snackbarMessage: _this.props.getFileRemovedMessage(file.name),\n            snackbarVariant: 'info'\n          });\n        });\n      };\n    };\n\n    _this.handleCloseSnackbar = function () {\n      _this.setState({\n        openSnackBar: false\n      });\n    };\n\n    _this.state = {\n      fileObjects: [],\n      openSnackBar: false,\n      snackbarMessage: '',\n      snackbarVariant: 'success',\n      dropzoneText: props.dropzoneText\n    };\n    return _this;\n  }\n\n  _createClass(DropzoneArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.filesArray(this.props.initialFiles);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.dropzoneText !== prevProps.dropzoneText) {\n        this.setState({\n          dropzoneText: this.props.dropzoneText\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        });\n      }\n    }\n  }, {\n    key: \"filesArray\",\n    value: function () {\n      var _filesArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(urls) {\n        var _this2 = this;\n\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context2.prev = 4;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var url, file, reader;\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          url = _step.value;\n                          _context.next = 3;\n                          return createFileFromUrl(url);\n\n                        case 3:\n                          file = _context.sent;\n                          reader = new FileReader();\n\n                          reader.onload = function (event) {\n                            _this2.setState({\n                              fileObjects: _this2.state.fileObjects.concat({\n                                file: file,\n                                data: event.target.result\n                              })\n                            });\n                          };\n\n                          reader.readAsDataURL(file);\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _iterator = urls[Symbol.iterator]();\n\n              case 7:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 9);\n\n              case 9:\n                _iteratorNormalCompletion = true;\n                _context2.next = 7;\n                break;\n\n              case 12:\n                _context2.next = 18;\n                break;\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t1 = _context2[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context2.t1;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.prev = 19;\n\n                if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                  _iterator[\"return\"]();\n                }\n\n              case 21:\n                _context2.prev = 21;\n\n                if (!_didIteratorError) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 24:\n                return _context2.finish(21);\n\n              case 25:\n                return _context2.finish(18);\n\n              case 26:\n                _context2.next = 31;\n                break;\n\n              case 28:\n                _context2.prev = 28;\n                _context2.t2 = _context2[\"catch\"](0);\n                console.log(_context2.t2);\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, null, [[0, 28], [4, 14, 18, 26], [19,, 21, 25]]);\n      }));\n\n      function filesArray(_x) {\n        return _filesArray.apply(this, arguments);\n      }\n\n      return filesArray;\n    }()\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(files) {\n      var _this3 = this;\n\n      var _this = this;\n\n      if (this.props.filesLimit > 1 && this.state.fileObjects.length + files.length > this.props.filesLimit) {\n        this.setState({\n          openSnackBar: true,\n          snackbarMessage: this.props.getFileLimitExceedMessage(this.props.filesLimit),\n          snackbarVariant: 'error'\n        });\n      } else {\n        var count = 0;\n        var message = '';\n        if (!Array.isArray(files)) files = [files];\n        files.forEach(function (file) {\n          var reader = new FileReader();\n\n          reader.onload = function (event) {\n            _this.setState({\n              fileObjects: _this3.props.filesLimit <= 1 ? [{\n                file: file,\n                data: event.target.result\n              }] : _this.state.fileObjects.concat({\n                file: file,\n                data: event.target.result\n              })\n            }, function () {\n              if (_this3.props.onChange) {\n                _this3.props.onChange(_this.state.fileObjects.map(function (fileObject) {\n                  return fileObject.file;\n                }));\n              }\n\n              if (_this3.props.onDrop) {\n                _this3.props.onDrop(file);\n              }\n\n              message += _this3.props.getFileAddedMessage(file.name);\n              count++; // we cannot rely on the index because this is asynchronous\n\n              if (count === files.length) {\n                // display message when the last one fires\n                _this3.setState({\n                  openSnackBar: true,\n                  snackbarMessage: message,\n                  snackbarVariant: 'success'\n                });\n              }\n            });\n          };\n\n          reader.readAsDataURL(file);\n        });\n      }\n    }\n  }, {\n    key: \"handleDropRejected\",\n    value: function handleDropRejected(rejectedFiles, evt) {\n      var _this4 = this;\n\n      var message = '';\n      rejectedFiles.forEach(function (rejectedFile) {\n        message = _this4.props.getDropRejectMessage(rejectedFile, _this4.props.acceptedFiles, _this4.props.maxFileSize);\n      });\n\n      if (this.props.onDropRejected) {\n        this.props.onDropRejected(rejectedFiles, evt);\n      }\n\n      this.setState({\n        openSnackBar: true,\n        snackbarMessage: message,\n        snackbarVariant: 'error'\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      var showPreviews = this.props.showPreviews && this.state.fileObjects.length > 0;\n      var showPreviewsInDropzone = this.props.showPreviewsInDropzone && this.state.fileObjects.length > 0;\n      return React.createElement(Fragment, null, React.createElement(Dropzone, {\n        accept: this.props.acceptedFiles.join(','),\n        onDrop: this.onDrop.bind(this),\n        onDropRejected: this.handleDropRejected.bind(this),\n        className: clsx(this.props.dropzoneClass, classes.dropZone),\n        acceptClassName: classes.stripes,\n        rejectClassName: classes.rejectStripes,\n        maxSize: this.props.maxFileSize,\n        multiple: this.props.filesLimit > 1\n      }, React.createElement(\"div\", {\n        className: classes.dropzoneTextStyle\n      }, React.createElement(\"p\", {\n        className: clsx(classes.dropzoneParagraph, this.props.dropzoneParagraphClass)\n      }, this.state.dropzoneText), React.createElement(CloudUploadIcon, {\n        className: classes.uploadIconSize\n      })), showPreviewsInDropzone && React.createElement(PreviewList$1, {\n        fileObjects: this.state.fileObjects,\n        handleRemove: this.handleRemove.bind(this),\n        showFileNames: this.props.showFileNames,\n        useChipsForPreview: this.props.useChipsForPreview,\n        previewChipProps: this.props.previewChipProps,\n        previewGridClasses: this.props.previewGridClasses,\n        previewGridProps: this.props.previewGridProps\n      })), showPreviews && React.createElement(Fragment, null, _ref$1, React.createElement(PreviewList$1, {\n        fileObjects: this.state.fileObjects,\n        handleRemove: this.handleRemove.bind(this),\n        showFileNames: this.props.showFileNamesInPreview,\n        useChipsForPreview: this.props.useChipsForPreview,\n        previewChipProps: this.props.previewChipProps,\n        previewGridClasses: this.props.previewGridClasses,\n        previewGridProps: this.props.previewGridProps\n      })), this.props.showAlerts && React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        open: this.state.openSnackBar,\n        autoHideDuration: 6000,\n        onClose: this.handleCloseSnackbar\n      }, React.createElement(SnackbarContentWrapper$1, {\n        onClose: this.handleCloseSnackbar,\n        variant: this.state.snackbarVariant,\n        message: this.state.snackbarMessage\n      })));\n    }\n  }]);\n\n  return DropzoneArea;\n}(Component);\n\nDropzoneArea.defaultProps = {\n  acceptedFiles: ['image/*', 'video/*', 'application/*'],\n  filesLimit: 3,\n  maxFileSize: 3000000,\n  dropzoneText: 'Drag and drop an image file here or click',\n  showPreviews: false,\n  // By default previews show up under in the dialog and inside in the standalone\n  showPreviewsInDropzone: true,\n  showFileNames: false,\n  showFileNamesInPreview: false,\n  previewChipProps: {},\n  previewGridClasses: {},\n  previewGridProps: {},\n  showAlerts: true,\n  clearOnUnmount: true,\n  initialFiles: [],\n  getFileLimitExceedMessage: function getFileLimitExceedMessage(filesLimit) {\n    return \"Maximum allowed number of files exceeded. Only \".concat(filesLimit, \" allowed\");\n  },\n  getFileAddedMessage: function getFileAddedMessage(fileName) {\n    return \"File \".concat(fileName, \" successfully added.\");\n  },\n  getFileRemovedMessage: function getFileRemovedMessage(fileName) {\n    return \"File \".concat(fileName, \" removed.\");\n  },\n  getDropRejectMessage: function getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize) {\n    var message = \"File \".concat(rejectedFile.name, \" was rejected. \");\n\n    if (!acceptedFiles.includes(rejectedFile.type)) {\n      message += 'File type not supported. ';\n    }\n\n    if (rejectedFile.size > maxFileSize) {\n      message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n    }\n\n    return message;\n  },\n  onChange: function onChange() {},\n  onDrop: function onDrop() {},\n  onDropRejected: function onDropRejected() {},\n  onDelete: function onDelete() {}\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneArea.propTypes = {\n  classes: PropTypes.object.isRequired,\n  acceptedFiles: PropTypes.array,\n  filesLimit: PropTypes.number,\n  maxFileSize: PropTypes.number,\n  dropzoneText: PropTypes.string,\n  dropzoneClass: PropTypes.string,\n  dropzoneParagraphClass: PropTypes.string,\n  showPreviews: PropTypes.bool,\n  showPreviewsInDropzone: PropTypes.bool,\n  showFileNames: PropTypes.bool,\n  showFileNamesInPreview: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object,\n  showAlerts: PropTypes.bool,\n  clearOnUnmount: PropTypes.bool,\n  initialFiles: PropTypes.arrayOf(PropTypes.string),\n  getFileLimitExceedMessage: PropTypes.func,\n  getFileAddedMessage: PropTypes.func,\n  getFileRemovedMessage: PropTypes.func,\n  getDropRejectMessage: PropTypes.func,\n  onChange: PropTypes.func,\n  onDrop: PropTypes.func,\n  onDropRejected: PropTypes.func,\n  onDelete: PropTypes.func\n} : void 0;\nvar DropzoneArea$1 = withStyles(styles$2)(DropzoneArea);\n\nvar DropzoneDialog = /*#__PURE__*/function (_React$Component) {\n  _inherits(DropzoneDialog, _React$Component);\n\n  function DropzoneDialog(props) {\n    var _this;\n\n    _classCallCheck(this, DropzoneDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropzoneDialog).call(this, props));\n    _this.state = {\n      open: false,\n      files: [],\n      disabled: true\n    };\n    return _this;\n  }\n\n  _createClass(DropzoneDialog, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.open !== prevProps.open) {\n        this.setState({\n          open: this.props.open\n        });\n\n        if (this.props.onClose && !this.props.open) {\n          this.props.onClose();\n        }\n      }\n\n      if (this.state.files.length !== prevState.files.length) {\n        this.setState({\n          disabled: this.state.files.length === 0\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.clearOnUnmount) {\n        this.setState({\n          files: []\n        });\n      }\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose(event) {\n      if (this.props.onClose) {\n        this.props.onClose(event);\n      }\n\n      this.setState({\n        open: false\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(files) {\n      var _this2 = this;\n\n      if (this.props.logEvents) {\n        console.log('Files changed', files);\n      }\n\n      this.setState({\n        files: files\n      }, function () {\n        if (_this2.props.onChange) {\n          _this2.props.onChange(files);\n        }\n      });\n    }\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(file) {\n      // this passes it on to the parent component to do with it what they will\n      if (this.props.logEvents) {\n        console.log('File removed', file);\n      }\n\n      if (this.props.onDelete) {\n        this.props.onDelete(file);\n      }\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(files) {\n      // this passes it on to the parent component to do with it what they will\n      if (this.props.logEvents) {\n        console.log('Files dropped', files);\n      }\n\n      if (this.props.onDrop) {\n        this.props.onDrop(files);\n      }\n    }\n  }, {\n    key: \"onDropRejected\",\n    value: function onDropRejected(files, evt) {\n      // this passes it on to the parent component to do with it what they will\n      if (this.props.logEvents) {\n        console.log('Files rejected', files);\n      }\n\n      if (this.props.onDropRejected) {\n        this.props.onDropRejected(files, evt);\n      }\n    }\n  }, {\n    key: \"handleSaveClick\",\n    value: function handleSaveClick() {\n      if (this.props.onSave) {\n        this.props.onSave(this.state.files);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, null, React.createElement(Dialog, _extends({}, this.props.dialogProps, {\n        open: this.state.open,\n        onClose: this.handleClose.bind(this),\n        maxWidth: this.props.maxWidth,\n        fullWidth: this.props.fullWidth\n      }), React.createElement(DialogTitle, null, this.props.dialogTitle), React.createElement(DialogContent, null, React.createElement(DropzoneArea$1, {\n        dropzoneText: this.props.dropzoneText,\n        acceptedFiles: this.props.acceptedFiles,\n        filesLimit: this.props.filesLimit,\n        maxFileSize: this.props.maxFileSize,\n        showPreviews: this.props.showPreviews,\n        showPreviewsInDropzone: this.props.showPreviewsInDropzone,\n        showFileNames: this.props.showFileNames,\n        showAlerts: this.props.showAlerts,\n        onChange: this.onChange.bind(this),\n        onDrop: this.onDrop.bind(this),\n        onDropRejected: this.onDropRejected.bind(this),\n        onDelete: this.onDelete.bind(this),\n        clearOnUnmount: this.props.clearOnUnmount,\n        showFileNamesInPreview: this.props.showFileNamesInPreview,\n        useChipsForPreview: this.props.useChipsForPreview,\n        previewChipProps: this.props.previewChipProps,\n        previewGridClasses: this.props.previewGridClasses,\n        previewGridProps: this.props.previewGridProps\n      })), React.createElement(DialogActions, null, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleClose.bind(this)\n      }, this.props.cancelButtonText), React.createElement(Button, {\n        color: \"primary\",\n        disabled: this.state.disabled,\n        onClick: this.handleSaveClick.bind(this)\n      }, this.props.submitButtonText))));\n    }\n  }]);\n\n  return DropzoneDialog;\n}(React.Component);\n\nDropzoneDialog.defaultProps = {\n  open: false,\n  acceptedFiles: ['image/*', 'video/*', 'application/*'],\n  filesLimit: 3,\n  maxFileSize: 3000000,\n  showPreviews: true,\n  showPreviewsInDropzone: false,\n  showFileNamesInPreview: true,\n  previewChipProps: {},\n  previewGridClasses: {},\n  previewGridProps: {},\n  showAlerts: true,\n  clearOnUnmount: true,\n  dialogTitle: 'Upload file',\n  dialogProps: {},\n  submitButtonText: 'Submit',\n  cancelButtonText: 'Cancel',\n  maxWidth: 'sm',\n  fullWidth: true,\n  onSave: function onSave() {},\n  onDelete: function onDelete() {},\n  onClose: function onClose() {},\n  onChange: function onChange() {},\n  onDrop: function onDrop() {},\n  onDropRejected: function onDropRejected() {},\n  logEvents: false\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onSave: PropTypes.func,\n  onDelete: PropTypes.func,\n  onClose: PropTypes.func,\n  onChange: PropTypes.func,\n  onDrop: PropTypes.func,\n  onDropRejected: PropTypes.func,\n  acceptedFiles: PropTypes.array,\n  filesLimit: PropTypes.number,\n  maxFileSize: PropTypes.number,\n  dropzoneText: PropTypes.string,\n  showPreviews: PropTypes.bool,\n  showPreviewsInDropzone: PropTypes.bool,\n  showFileNames: PropTypes.bool,\n  showFileNamesInPreview: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object,\n  showAlerts: PropTypes.bool,\n  clearOnUnmount: PropTypes.bool,\n  dialogTitle: PropTypes.string,\n  dialogProps: PropTypes.object,\n  submitButtonText: PropTypes.string,\n  cancelButtonText: PropTypes.string,\n  maxWidth: PropTypes.string,\n  fullWidth: PropTypes.bool,\n  logEvents: PropTypes.bool\n} : void 0;\nexport { DropzoneArea$1 as DropzoneArea, DropzoneDialog };","map":{"version":3,"sources":["../src/helpers/helpers.js","../src/PreviewList.js","../src/SnackbarContentWrapper.js","../src/DropzoneArea.js","../src/DropzoneDialog.js"],"names":["file","size","filesize","response","fetch","data","metadata","type","filename","url","ext","styles","removeBtn","transition","position","opacity","top","right","width","height","smallPreviewImg","maxWidth","marginTop","marginRight","color","boxSizing","boxShadow","borderRadius","zIndex","imageContainer","textAlign","fileObjects","handleRemove","showFileNames","useChipsForPreview","previewChipProps","previewGridClasses","previewGridProps","classes","props","i","fileObject","container","img","clsx","PropTypes","object","withStyles","variantIcon","success","warning","error","info","InfoIcon","backgroundColor","green","theme","dark","amber","icon","fontSize","iconVariant","message","display","alignItems","className","onClose","variant","other","Icon","isRequired","backgroundPosition","dropZone","minHeight","border","borderColor","cursor","stripes","backgroundImage","animation","backgroundSize","rejectStripes","dropzoneTextStyle","uploadIconSize","dropzoneParagraph","DropzoneArea","Component","openSnackBar","snackbarMessage","snackbarVariant","dropzoneText","prevProps","urls","createFileFromUrl","reader","event","result","console","files","_this","count","Array","rejectedFiles","evt","showPreviews","showPreviewsInDropzone","vertical","horizontal","handleCloseSnackbar","acceptedFiles","filesLimit","maxFileSize","showFileNamesInPreview","showAlerts","clearOnUnmount","initialFiles","getFileLimitExceedMessage","getFileAddedMessage","getFileRemovedMessage","getDropRejectMessage","rejectedFile","convertBytesToMbsOrKbs","onChange","onDrop","onDropRejected","onDelete","dropzoneClass","dropzoneParagraphClass","func","DropzoneDialog","React","open","disabled","prevState","fullWidth","dialogTitle","dialogProps","submitButtonText","cancelButtonText","onSave","logEvents","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAAA,OAAA,CAAA,IAAA,EAAuB;AAC1B,MAAIA,IAAI,CAAJA,IAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,CAAAA,MAAJ,OAAA,EAAyC;AACrC,WAAA,IAAA;AACH;AACJ;;AACM,SAAA,sBAAA,CAAA,QAAA,EAA0C;AAC7C,MAAIC,IAAI,GADqC,EAC7C,CAD6C,CAAA;;AAG7C,MAAIC,QAAQ,IAAZ,OAAA,EAAyB;AACrBD,IAAAA,IAAI,GAAIC,QAAQ,GAAT,OAACA,GAARD,YAAAA;AADJ,GAAA,MAEO,IAAIC,QAAQ,IAAZ,IAAA,EAAsB;AACzBD,IAAAA,IAAI,GAAIC,QAAQ,GAAT,IAACA,GAARD,YAAAA;AADG,GAAA,MAEA;AACHA,IAAAA,IAAI,GAAGC,QAAQ,GAAfD,QAAAA;AACH;;AACD,SAAA,IAAA;AACH;;SAED,iB,CAAA,E,EAAA;AAAA,SAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;;gFAAO,SAAA,OAAA,CAAA,GAAA,EAAA;AAAA,QAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,GAAA;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACoBG,KAAK,CADzB,GACyB,CADzB;;AAAA,eAAA,CAAA;AACGD,YAAAA,QADH,GAAA,QAAA,CAAA,IACGA;AADH,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAEgBA,QAAQ,CAFxB,IAEgBA,EAFhB;;AAAA,eAAA,CAAA;AAEGE,YAAAA,IAFH,GAAA,QAAA,CAAA,IAEGA;AACAC,YAAAA,QAHH,GAGc;AAACC,cAAAA,IAAI,EAAEF,IAAI,CAACE;AAAZ,aAAXD;AACAE,YAAAA,QAJH,GAIcC,GAAG,CAAHA,OAAAA,CAAAA,MAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAJd,GAIcA,EAAXD;AACAE,YAAAA,GALH,GAKSL,IAAI,CAAJA,IAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EALT,GAKSA,EAANK;AALH,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAMI,IAAA,IAAA,CAAS,CAAT,IAAS,CAAT,EAAA,GAAA,MAAA,CAAA,QAAA,EAAA,GAAA,EAAA,MAAA,CAAA,GAAA,CAAA,EANJ,QAMI,CANJ,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;AAAA,G;;;;ACPP,IAAMC,MAAM,GAAG;AACXC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EADH,UAAA;AAEPC,IAAAA,QAAQ,EAFD,UAAA;AAGPC,IAAAA,OAAO,EAHA,CAAA;AAIPC,IAAAA,GAAG,EAAE,CAJE,CAAA;AAKPC,IAAAA,KAAK,EAAE,CALA,CAAA;AAMPC,IAAAA,KAAK,EANE,EAAA;AAOPC,IAAAA,MAAM,EAAE;AAPD,GADA;AAUXC,EAAAA,eAAe,EAAE;AACbD,IAAAA,MAAM,EADO,GAAA;AAEbD,IAAAA,KAAK,EAFQ,SAAA;AAGbG,IAAAA,QAAQ,EAHK,MAAA;AAIbC,IAAAA,SAAS,EAJI,CAAA;AAKbC,IAAAA,WAAW,EALE,EAAA;AAMbC,IAAAA,KAAK,EANQ,qBAAA;AAObX,IAAAA,UAAU,EAPG,8CAAA;AAQbY,IAAAA,SAAS,EARI,YAAA;AASbC,IAAAA,SAAS,EATI,8DAAA;AAUbC,IAAAA,YAAY,EAVC,CAAA;AAWbC,IAAAA,MAAM,EAXO,CAAA;AAYbb,IAAAA,OAAO,EAAE;AAZI,GAVN;AAwBXc,EAAAA,cAAc,EAAE;AACZf,IAAAA,QAAQ,EADI,UAAA;AAEZc,IAAAA,MAAM,EAFM,EAAA;AAGZE,IAAAA,SAAS,EAHG,QAAA;AAIZ,gCAA4B;AACxBf,MAAAA,OAAO,EAAE;AADe,KAJhB;AAOZ,0BAAsB;AAClBA,MAAAA,OAAO,EAAE;AADS;AAPV;AAxBL,CAAf;;wBAuFgC,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,C;;AAlDhC,SAAA,WAAA,CAAA,KAAA,EAA4B;AAAA,MAEpBgB,WAFoB,GAUpBQ,KAVoB,CAAA,WAAA;AAAA,MAGpBP,YAHoB,GAUpBO,KAVoB,CAAA,YAAA;AAAA,MAIpBN,aAJoB,GAUpBM,KAVoB,CAAA,aAAA;AAAA,MAKpBL,kBALoB,GAUpBK,KAVoB,CAAA,kBAAA;AAAA,MAMpBJ,gBANoB,GAUpBI,KAVoB,CAAA,gBAAA;AAAA,MAOpBH,kBAPoB,GAUpBG,KAVoB,CAAA,kBAAA;AAAA,MAQpBF,gBARoB,GAUpBE,KAVoB,CAAA,gBAAA;AAAA,MASpBD,OAToB,GAUpBC,KAVoB,CAAA,OAAA;;AAWxB,MAAA,kBAAA,EAAwB;AACpB,WACI,WAAW,CAAX,GAAA,CAAgB,UAAA,UAAA,EAAA,CAAA,EAAmB;AAC/B,aAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,GAAG,EAAEC;AAAV,OAAA,EACJ,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACI,QAAA,KAAK,EAAEC,UAAU,CAAVA,IAAAA,CADX,IAAA;AAEI,QAAA,QAAQ,EAAET,YAAY,CAF1B,CAE0B,CAF1B;AAGI,QAAA,OAAO,EAAC;AAHZ,OAAA,EADJ,gBACI,CAAA,CADI,CAAR;AAFR,KACI,CADJ;AAYH;;AACD,SACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,SAAS,EAAf,IAAA;AAAuB,IAAA,OAAO,EAA9B,CAAA;AAAmC,IAAA,SAAS,EAAEI,kBAAkB,CAACM;AAAjE,GAAA,EAAgFL,gBAAgB,CAAhG,SAAA,CAAA,EAEQ,WAAW,CAAX,GAAA,CAAgB,UAAA,UAAA,EAAA,CAAA,EAAmB;AAC/B,QAAMM,GAAG,GAAI,OAAO,CAACF,UAAU,CAAlB,IAAO,CAAP,GACT,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAEG,IAAI,CAACR,kBAAkB,CAAnB,KAAA,EAA2BE,OAAO,CAAtD,eAAoB,CAApB;AACI,MAAA,IAAI,EADR,cAAA;AACwB,MAAA,GAAG,EAAEG,UAAU,CAACpC;AADxC,KAAA,CADS,GAGT,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AAAgB,MAAA,SAAS,EAAEuC,IAAI,CAACR,kBAAkB,CAAnB,KAAA,EAA2BE,OAAO,CAAlC,eAAA;AAA/B,KAAA,CAHJ;AAKA,WACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACI,MAAA,IAAI,EADR,IAAA;AACgB,MAAA,EAAE,EADlB,CAAA;AACuB,MAAA,GAAG,EAAEE;AAD5B,KAAA,EACmCH,gBAAgB,CADnD,IAAA,EAAA;AAEI,MAAA,SAAS,EAAEO,IAAI,CAACR,kBAAkB,CAAnB,IAAA,EAA0BE,OAAO,CAAjC,cAAA;AAFnB,KAAA,CAAA,EAAA,GAAA,EAMKL,aAAa,IACV,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EAAIQ,UAAU,CAAVA,IAAAA,CAPZ,IAOQ,CAPR,EAUI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACI,MAAA,OAAO,EAAET,YAAY,CADzB,CACyB,CADzB;AAEI,oBAFJ,QAAA;AAGI,MAAA,SAAS,EAAEM,OAAO,CAAC1B;AAHvB,KAAA,EAXR,IAWQ,CAVJ,CADJ;AAThB,GAGY,CAFR,CADJ;AAiCH;;AAED,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,WAAW,CAAX,SAAA,GAAwB;AACpB0B,EAAAA,OAAO,EAAEO,SAAS,CAATA,MAAAA,CADW,UAAA;AAEpBd,EAAAA,WAAW,EAAEc,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAA3BA,MAAAA,EAFO,UAAA;AAGpBb,EAAAA,YAAY,EAAEa,SAAS,CAATA,IAAAA,CAHM,UAAA;AAIpBZ,EAAAA,aAAa,EAAEY,SAAS,CAJJ,IAAA;AAKpBX,EAAAA,kBAAkB,EAAEW,SAAS,CALT,IAAA;AAMpBV,EAAAA,gBAAgB,EAAEU,SAAS,CANP,MAAA;AAOpBT,EAAAA,kBAAkB,EAAES,SAAS,CAPT,MAAA;AAQpBR,EAAAA,gBAAgB,EAAEQ,SAAS,CAACC;AARR,CAAxB,GAAA,KAAA,CAAA;AAWA,IAAA,aAAA,GAAeC,UAAU,CAAVA,MAAU,CAAVA,CAAf,WAAeA,CAAf;ACzGA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EADS,eAAA;AAEhBC,EAAAA,OAAO,EAFS,WAAA;AAGhBC,EAAAA,KAAK,EAHW,SAAA;AAIhBC,EAAAA,IAAI,EAAEC;AAJU,CAApB;;AAOA,IAAM1C,QAAM,GAAG,SAATA,MAAS,CAAA,KAAA,EAAA;AAAA,SAAY;AACvBsC,IAAAA,OAAO,EAAE;AACLK,MAAAA,eAAe,EAAEC,KAAK,CAAA,GAAA;AADjB,KADc;AAIvBJ,IAAAA,KAAK,EAAE;AACHG,MAAAA,eAAe,EAAEE,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAoBC;AADlC,KAJgB;AAOvBL,IAAAA,IAAI,EAAE;AACFE,MAAAA,eAAe,EAAEE,KAAK,CAALA,OAAAA,CAAAA,OAAAA,CAAsBC;AADrC,KAPiB;AAUvBP,IAAAA,OAAO,EAAE;AACLI,MAAAA,eAAe,EAAEI,KAAK,CAAA,GAAA;AADjB,KAVc;AAavBC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR,KAbiB;AAgBvBC,IAAAA,WAAW,EAAE;AACT9C,MAAAA,OAAO,EADE,GAAA;AAETQ,MAAAA,WAAW,EAAEiC,KAAK,CAALA,OAAAA,CAAAA,CAAAA;AAFJ,KAhBU;AAoBvBM,IAAAA,OAAO,EAAE;AACLC,MAAAA,OAAO,EADF,MAAA;AAELC,MAAAA,UAAU,EAAE;AAFP;AApBc,GAAZ;AAAf,CAAA;;AA0BA,SAAA,sBAAA,CAAA,KAAA,EAAuC;AAAA,MAC5B1B,OAD4B,GAC+BC,KAD/B,CAAA,OAAA;AAAA,MACnB0B,SADmB,GAC+B1B,KAD/B,CAAA,SAAA;AAAA,MACRuB,OADQ,GAC+BvB,KAD/B,CAAA,OAAA;AAAA,MACC2B,OADD,GAC+B3B,KAD/B,CAAA,OAAA;AAAA,MACU4B,OADV,GAC+B5B,KAD/B,CAAA,OAAA;AAAA,MACsB6B,KADtB,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,SAAA,EAAA,WAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,CAAA,CAAA;;AAEnC,MAAMC,IAAI,GAAGrB,WAAW,CAAxB,OAAwB,CAAxB;AAEA,SACI,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA;AACI,IAAA,SAAS,EAAEJ,IAAI,CAACN,OAAO,CAAR,OAAQ,CAAR,EADnB,SACmB,CADnB;AAEI,wBAFJ,iBAAA;AAGI,IAAA,OAAO,EACH,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,EAAE,EAAR,iBAAA;AAA2B,MAAA,SAAS,EAAEA,OAAO,CAACwB;AAA9C,KAAA,EACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,SAAS,EAAElB,IAAI,CAACN,OAAO,CAAR,IAAA,EAAeA,OAAO,CAAtB,WAAA;AAArB,KAAA,CADJ,EAJR,OAIQ,CAJR;AASI,IAAA,MAAM,EAAE,CACJ,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACI,MAAA,GAAG,EADP,OAAA;AAEI,oBAFJ,OAAA;AAGI,MAAA,KAAK,EAHT,SAAA;AAII,MAAA,SAAS,EAAEA,OAAO,CAJtB,KAAA;AAKI,MAAA,OAAO,EAAE4B;AALb,KAAA,EAOI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,MAAA,SAAS,EAAE5B,OAAO,CAACqB;AAA9B,KAAA,CAPJ,CADI;AATZ,GAAA,EADJ,KACI,CAAA,CADJ;AAwBH;;AAED,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,sBAAsB,CAAtB,SAAA,GAAmC;AAC/BrB,EAAAA,OAAO,EAAEO,SAAS,CAATA,MAAAA,CADsB,UAAA;AAE/BoB,EAAAA,SAAS,EAAEpB,SAAS,CAFW,MAAA;AAG/BiB,EAAAA,OAAO,EAAEjB,SAAS,CAHa,IAAA;AAI/BqB,EAAAA,OAAO,EAAErB,SAAS,CAJa,IAAA;AAK/BsB,EAAAA,OAAO,EAAEtB,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAhBA,MAAgB,CAAhBA,EAAyDyB;AALnC,CAAnC,GAAA,KAAA,CAAA;AAQA,IAAA,wBAAA,GAAevB,UAAU,CAAVA,QAAU,CAAVA,CAAf,sBAAeA,CAAf;AC1EA,IAAMpC,QAAM,GAAG;AACX,yBAAuB;AACnB,UAAM;AACF4D,MAAAA,kBAAkB,EAAE;AADlB,KADa;AAInB,YAAQ;AACJA,MAAAA,kBAAkB,EAAE;AADhB;AAJW,GADZ;AASXC,EAAAA,QAAQ,EAAE;AACN1D,IAAAA,QAAQ,EADF,UAAA;AAENI,IAAAA,KAAK,EAFC,MAAA;AAGNuD,IAAAA,SAAS,EAHH,OAAA;AAINnB,IAAAA,eAAe,EAJT,SAAA;AAKNoB,IAAAA,MAAM,EALA,QAAA;AAMNC,IAAAA,WAAW,EANL,SAAA;AAONC,IAAAA,MAAM,EAPA,SAAA;AAQNnD,IAAAA,SAAS,EAAE;AARL,GATC;AAmBXoD,EAAAA,OAAO,EAAE;AACLH,IAAAA,MAAM,EADD,OAAA;AAELI,IAAAA,eAAe,EAFV,sFAAA;AAGLC,IAAAA,SAAS,EAHJ,wCAAA;AAILC,IAAAA,cAAc,EAAE;AAJX,GAnBE;AAyBXC,EAAAA,aAAa,EAAE;AACXP,IAAAA,MAAM,EADK,OAAA;AAEXI,IAAAA,eAAe,EAFJ,sFAAA;AAGXC,IAAAA,SAAS,EAHE,wCAAA;AAIXC,IAAAA,cAAc,EAAE;AAJL,GAzBJ;AA+BXE,EAAAA,iBAAiB,EAAE;AACfpD,IAAAA,SAAS,EAAE;AADI,GA/BR;AAkCXqD,EAAAA,cAAc,EAAE;AACZjE,IAAAA,KAAK,EADO,EAAA;AAEZC,IAAAA,MAAM,EAFM,EAAA;AAGZK,IAAAA,KAAK,EAAE;AAHK,GAlCL;AAuCX4D,EAAAA,iBAAiB,EAAE;AACfxB,IAAAA,QAAQ,EAAE;AADK;AAvCR,CAAf;;0BA4OwB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,EAAA,SAAS,EAAE;AAAjB,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EADJ,UACI,CADJ,C;;IA/LlByB,YAAAA,GAAAA,aAAAA,UAAAA,UAAAA,EAAAA;;;AACF,WAAA,YAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AACf,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,YAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AADe,IAAA,KAAA,CAAA,YAAA,GA0GJ,UAAA,SAAA,EAAA;AAAA,aAAe,UAAA,KAAA,EAAW;AACrCU,QAAAA,KAAK,CAALA,eAAAA;AADqC,YAE9BhE,WAF8B,GAEf,KAAA,CAFe,KAEf,CAFe,WAAA;AAGrC,YAAM/B,IAAI,GAAG,WAAW,CAAX,MAAA,CAAmB,UAAA,UAAA,EAAA,CAAA,EAAmB;AAC/C,iBAAOwC,CAAC,KAAR,SAAA;AADS,SAAA,EAAA,CAAA,EAAb,IAAA;AAGAT,QAAAA,WAAW,CAAXA,MAAAA,CAAAA,SAAAA,EAAAA,CAAAA;;AACA,QAAA,KAAA,CAAA,QAAA,CAAA,WAAA,EAA2B,YAAM;AAC7B,cAAI,KAAA,CAAA,KAAA,CAAJ,QAAA,EAAyB;AACrB,YAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA;AACH;;AACD,cAAI,KAAA,CAAA,KAAA,CAAJ,QAAA,EAAyB;AACrB,YAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAoB,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,CAA2B,UAAA,UAAA,EAAA;AAAA,qBAAgBU,UAAU,CAA1B,IAAA;AAA/C,aAAoB,CAApB;AACH;;AACD,UAAA,KAAA,CAAA,QAAA,CAAc;AACV8C,YAAAA,YAAY,EADF,IAAA;AAEVC,YAAAA,eAAe,EAAE,KAAA,CAAA,KAAA,CAAA,qBAAA,CAAiCxF,IAAI,CAF5C,IAEO,CAFP;AAGVyF,YAAAA,eAAe,EAAE;AAHP,WAAd;AAPJ,SAAA;AAPW,OAAA;AA1GI,KAAA;;AAAA,IAAA,KAAA,CAAA,mBAAA,GAmJG,YAAM;AACxB,MAAA,KAAA,CAAA,QAAA,CAAc;AACVF,QAAAA,YAAY,EAAE;AADJ,OAAd;AApJe,KAAA;;AAEf,IAAA,KAAA,CAAA,KAAA,GAAa;AACTxD,MAAAA,WAAW,EADF,EAAA;AAETwD,MAAAA,YAAY,EAFH,KAAA;AAGTC,MAAAA,eAAe,EAHN,EAAA;AAITC,MAAAA,eAAe,EAJN,SAAA;AAKTC,MAAAA,YAAY,EAAEnD,KAAK,CAACmD;AALX,KAAb;AAFe,WAAA,KAAA;AASlB;;;;wCAEmB;AAChB,WAAA,UAAA,CAAgB,KAAA,KAAA,CAAhB,YAAA;AACH;;;uCAEkBC,S,EAAW;AAC1B,UAAI,KAAA,KAAA,CAAA,YAAA,KAA4BA,SAAS,CAAzC,YAAA,EAAwD;AACpD,aAAA,QAAA,CAAc;AACVD,UAAAA,YAAY,EAAE,KAAA,KAAA,CAAWA;AADf,SAAd;AAGH;AACJ;;;2CAEsB;AACnB,UAAI,KAAA,KAAA,CAAJ,cAAA,EAA+B;AAC3B,aAAA,QAAA,CAAc;AACV3D,UAAAA,WAAW,EAAE;AADH,SAAd;AAGH;AACJ;;;;kGAEgB6D,I,EAAAA;;;;;;;;;;;;;;;;;;;;AAEEnF,0BAAAA,GAAAA,GAAAA,KAAAA,CAAAA,KAAAA;;iCACYoF,iBAAiB,CAAA,GAAA,C;;;AAA9B7F,0BAAAA,IAAAA,GAAAA,QAAAA,CAAAA,IAAAA;AACA8F,0BAAAA,MAAAA,GAAS,IAAA,UAAA,EAATA;;AACNA,0BAAAA,MAAM,CAANA,MAAAA,GAAgB,UAAA,KAAA,EAAW;AACvB,4BAAA,MAAI,CAAJ,QAAA,CAAc;AACV/D,8BAAAA,WAAW,EAAE,MAAI,CAAJ,KAAA,CAAA,WAAA,CAAA,MAAA,CAA8B;AACvC/B,gCAAAA,IAAI,EADmC,IAAA;AAEvCK,gCAAAA,IAAI,EAAE0F,KAAK,CAALA,MAAAA,CAAaC;AAFoB,+BAA9B;AADH,6BAAd;AADJF,2BAAAA;;AAQAA,0BAAAA,MAAM,CAANA,aAAAA,CAAAA,IAAAA;;;;;;;;;4BAXcF,IAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAclBK,gBAAAA,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,CAAAA,EAAAA;;;;;;;;;;;;;;;;;;2BAIDC,K,EAAO;AAAA,UAAA,MAAA,GAAA,IAAA;;AACV,UAAMC,KAAK,GAAX,IAAA;;AACA,UAAI,KAAA,KAAA,CAAA,UAAA,GAAA,CAAA,IAA6B,KAAA,KAAA,CAAA,WAAA,CAAA,MAAA,GAAgCD,KAAK,CAArC,MAAA,GAA+C,KAAA,KAAA,CAAhF,UAAA,EAAuG;AACnG,aAAA,QAAA,CAAc;AACVX,UAAAA,YAAY,EADF,IAAA;AAEVC,UAAAA,eAAe,EAAE,KAAA,KAAA,CAAA,yBAAA,CAAqC,KAAA,KAAA,CAF5C,UAEO,CAFP;AAGVC,UAAAA,eAAe,EAAE;AAHP,SAAd;AADJ,OAAA,MAMO;AACH,YAAIW,KAAK,GAAT,CAAA;AACA,YAAItC,OAAO,GAAX,EAAA;AACA,YAAI,CAACuC,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2BH,KAAK,GAAG,CAARA,KAAQ,CAARA;AAE3BA,QAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAU;AACpB,cAAMJ,MAAM,GAAG,IAAf,UAAe,EAAf;;AACAA,UAAAA,MAAM,CAANA,MAAAA,GAAgB,UAAA,KAAA,EAAW;AACvBK,YAAAA,KAAK,CAALA,QAAAA,CAAe;AACXpE,cAAAA,WAAW,EAAE,MAAI,CAAJ,KAAA,CAAA,UAAA,IAAA,CAAA,GACT,CACI;AACI/B,gBAAAA,IAAI,EADR,IAAA;AAEIK,gBAAAA,IAAI,EAAE0F,KAAK,CAALA,MAAAA,CAAaC;AAFvB,eADJ,CADS,GAOT,KAAK,CAAL,KAAA,CAAA,WAAA,CAAA,MAAA,CACI;AACIhG,gBAAAA,IAAI,EADR,IAAA;AAEIK,gBAAAA,IAAI,EAAE0F,KAAK,CAALA,MAAAA,CAAaC;AAFvB,eADJ;AARO,aAAfG,EAeA,YAAM;AACF,kBAAI,MAAI,CAAJ,KAAA,CAAJ,QAAA,EAAyB;AACrB,gBAAA,MAAI,CAAJ,KAAA,CAAA,QAAA,CAAoB,KAAK,CAAL,KAAA,CAAA,WAAA,CAAA,GAAA,CAA4B,UAAA,UAAA,EAAA;AAAA,yBAAgB1D,UAAU,CAA1B,IAAA;AAAhD,iBAAoB,CAApB;AACH;;AACD,kBAAI,MAAI,CAAJ,KAAA,CAAJ,MAAA,EAAuB;AACnB,gBAAA,MAAI,CAAJ,KAAA,CAAA,MAAA,CAAA,IAAA;AACH;;AACDqB,cAAAA,OAAO,IAAI,MAAI,CAAJ,KAAA,CAAA,mBAAA,CAA+B9D,IAAI,CAA9C8D,IAAW,CAAXA;AACAsC,cAAAA,KARE,GAAA,CAAA;;AASF,kBAAIA,KAAK,KAAKF,KAAK,CAAnB,MAAA,EAA4B;AACxB;AACA,gBAAA,MAAI,CAAJ,QAAA,CAAc;AACVX,kBAAAA,YAAY,EADF,IAAA;AAEVC,kBAAAA,eAAe,EAFL,OAAA;AAGVC,kBAAAA,eAAe,EAAE;AAHP,iBAAd;AAKH;AA/BLU,aAAAA;AADJL,WAAAA;;AAmCAA,UAAAA,MAAM,CAANA,aAAAA,CAAAA,IAAAA;AArCJI,SAAAA;AAuCH;AACJ;;;uCAwBkBI,a,EAAeC,G,EAAK;AAAA,UAAA,MAAA,GAAA,IAAA;;AACnC,UAAIzC,OAAO,GAAX,EAAA;AACAwC,MAAAA,aAAa,CAAbA,OAAAA,CAAsB,UAAA,YAAA,EAAkB;AACpCxC,QAAAA,OAAO,GAAG,MAAI,CAAJ,KAAA,CAAA,oBAAA,CAAA,YAAA,EAEN,MAAI,CAAJ,KAAA,CAFM,aAAA,EAGN,MAAI,CAAJ,KAAA,CAHJA,WAAU,CAAVA;AADJwC,OAAAA;;AAOA,UAAI,KAAA,KAAA,CAAJ,cAAA,EAA+B;AAC3B,aAAA,KAAA,CAAA,cAAA,CAAA,aAAA,EAAA,GAAA;AACH;;AACD,WAAA,QAAA,CAAc;AACVf,QAAAA,YAAY,EADF,IAAA;AAEVC,QAAAA,eAAe,EAFL,OAAA;AAGVC,QAAAA,eAAe,EAAE;AAHP,OAAd;AAKH;;;6BAQQ;AAAA,UACEnD,OADF,GACa,KADb,KACa,CADb,OAAA;AAEL,UAAMkE,YAAY,GAAG,KAAA,KAAA,CAAA,YAAA,IAA2B,KAAA,KAAA,CAAA,WAAA,CAAA,MAAA,GAAhD,CAAA;AACA,UAAMC,sBAAsB,GAAG,KAAA,KAAA,CAAA,sBAAA,IAAqC,KAAA,KAAA,CAAA,WAAA,CAAA,MAAA,GAApE,CAAA;AAEA,aACI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACI,QAAA,MAAM,EAAE,KAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CADZ,GACY,CADZ;AAEI,QAAA,MAAM,EAAE,KAAA,MAAA,CAAA,IAAA,CAFZ,IAEY,CAFZ;AAGI,QAAA,cAAc,EAAE,KAAA,kBAAA,CAAA,IAAA,CAHpB,IAGoB,CAHpB;AAII,QAAA,SAAS,EAAE7D,IAAI,CAAC,KAAA,KAAA,CAAD,aAAA,EAA2BN,OAAO,CAJrD,QAImB,CAJnB;AAKI,QAAA,eAAe,EAAEA,OAAO,CAL5B,OAAA;AAMI,QAAA,eAAe,EAAEA,OAAO,CAN5B,aAAA;AAOI,QAAA,OAAO,EAAE,KAAA,KAAA,CAPb,WAAA;AAQI,QAAA,QAAQ,EAAE,KAAA,KAAA,CAAA,UAAA,GAAwB;AARtC,OAAA,EAUI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAEA,OAAO,CAAC4C;AAAxB,OAAA,EACI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,QAAA,SAAS,EAAEtC,IAAI,CAACN,OAAO,CAAR,iBAAA,EAA4B,KAAA,KAAA,CAA5B,sBAAA;AAAlB,OAAA,EACK,KAAA,KAAA,CAFT,YACI,CADJ,EAII,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,QAAA,SAAS,EAAEA,OAAO,CAAC6C;AAApC,OAAA,CAJJ,CAVJ,EAgBKsB,sBAAsB,IACnB,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACI,QAAA,WAAW,EAAE,KAAA,KAAA,CADjB,WAAA;AAEI,QAAA,YAAY,EAAE,KAAA,YAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;AAGI,QAAA,aAAa,EAAE,KAAA,KAAA,CAHnB,aAAA;AAII,QAAA,kBAAkB,EAAE,KAAA,KAAA,CAJxB,kBAAA;AAKI,QAAA,gBAAgB,EAAE,KAAA,KAAA,CALtB,gBAAA;AAMI,QAAA,kBAAkB,EAAE,KAAA,KAAA,CANxB,kBAAA;AAOI,QAAA,gBAAgB,EAAE,KAAA,KAAA,CAAWpE;AAPjC,OAAA,CAjBR,CADJ,EA6BKmE,YAAY,IACT,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAII,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACI,QAAA,WAAW,EAAE,KAAA,KAAA,CADjB,WAAA;AAEI,QAAA,YAAY,EAAE,KAAA,YAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;AAGI,QAAA,aAAa,EAAE,KAAA,KAAA,CAHnB,sBAAA;AAII,QAAA,kBAAkB,EAAE,KAAA,KAAA,CAJxB,kBAAA;AAKI,QAAA,gBAAgB,EAAE,KAAA,KAAA,CALtB,gBAAA;AAMI,QAAA,kBAAkB,EAAE,KAAA,KAAA,CANxB,kBAAA;AAOI,QAAA,gBAAgB,EAAE,KAAA,KAAA,CAAWnE;AAPjC,OAAA,CAJJ,CA9BR,EA6CK,KAAA,KAAA,CAAA,UAAA,IACG,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACI,QAAA,YAAY,EAAE;AACVqE,UAAAA,QAAQ,EADE,QAAA;AAEVC,UAAAA,UAAU,EAAE;AAFF,SADlB;AAKI,QAAA,IAAI,EAAE,KAAA,KAAA,CALV,YAAA;AAMI,QAAA,gBAAgB,EANpB,IAAA;AAOI,QAAA,OAAO,EAAE,KAAKC;AAPlB,OAAA,EASI,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AACI,QAAA,OAAO,EAAE,KADb,mBAAA;AAEI,QAAA,OAAO,EAAE,KAAA,KAAA,CAFb,eAAA;AAGI,QAAA,OAAO,EAAE,KAAA,KAAA,CAAWpB;AAHxB,OAAA,CATJ,CA9CR,CADJ;AAiEH;;;;CAhOCH,CAAqBC,SAArBD,C;;AAmONA,YAAY,CAAZA,YAAAA,GAA4B;AACxBwB,EAAAA,aAAa,EAAE,CAAA,SAAA,EAAA,SAAA,EADS,eACT,CADS;AAExBC,EAAAA,UAAU,EAFc,CAAA;AAGxBC,EAAAA,WAAW,EAHa,OAAA;AAIxBrB,EAAAA,YAAY,EAJY,2CAAA;AAKxBc,EAAAA,YAAY,EALY,KAAA;AAKH;AACrBC,EAAAA,sBAAsB,EANE,IAAA;AAOxBxE,EAAAA,aAAa,EAPW,KAAA;AAQxB+E,EAAAA,sBAAsB,EARE,KAAA;AASxB7E,EAAAA,gBAAgB,EATQ,EAAA;AAUxBC,EAAAA,kBAAkB,EAVM,EAAA;AAWxBC,EAAAA,gBAAgB,EAXQ,EAAA;AAYxB4E,EAAAA,UAAU,EAZc,IAAA;AAaxBC,EAAAA,cAAc,EAbU,IAAA;AAcxBC,EAAAA,YAAY,EAdY,EAAA;AAexBC,EAAAA,yBAAyB,EAAE,SAAA,yBAAA,CAAA,UAAA,EAAA;AAAA,WAAA,kDAAA,MAAA,CAAA,UAAA,EAAA,UAAA,CAAA;AAfH,GAAA;AAgBxBC,EAAAA,mBAAmB,EAAE,SAAA,mBAAA,CAAA,QAAA,EAAA;AAAA,WAAA,QAAA,MAAA,CAAA,QAAA,EAAA,sBAAA,CAAA;AAhBG,GAAA;AAiBxBC,EAAAA,qBAAqB,EAAE,SAAA,qBAAA,CAAA,QAAA,EAAA;AAAA,WAAA,QAAA,MAAA,CAAA,QAAA,EAAA,WAAA,CAAA;AAjBC,GAAA;AAkBxBC,EAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,YAAA,EAAA,aAAA,EAAA,WAAA,EAA8C;AAChE,QAAIzD,OAAO,GAAA,QAAA,MAAA,CAAW0D,YAAY,CAAvB,IAAA,EAAX,iBAAW,CAAX;;AACA,QAAI,CAACX,aAAa,CAAbA,QAAAA,CAAuBW,YAAY,CAAxC,IAAKX,CAAL,EAAgD;AAC5C/C,MAAAA,OAAO,IAAPA,2BAAAA;AACH;;AACD,QAAI0D,YAAY,CAAZA,IAAAA,GAAJ,WAAA,EAAqC;AACjC1D,MAAAA,OAAO,IAAI,oCAAoC2D,sBAAsB,CAA1D,WAA0D,CAA1D,GAAX3D,IAAAA;AACH;;AACD,WAAA,OAAA;AA1BoB,GAAA;AA4BxB4D,EAAAA,QAAQ,EAAE,SAAA,QAAA,GAAM,CA5BQ,CAAA;AA6BxBC,EAAAA,MAAM,EAAE,SAAA,MAAA,GAAM,CA7BU,CAAA;AA8BxBC,EAAAA,cAAc,EAAE,SAAA,cAAA,GAAM,CA9BE,CAAA;AA+BxBC,EAAAA,QAAQ,EAAE,SAAA,QAAA,GAAM,CAAA;AA/BQ,CAA5BxC;AAiCA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,YAAY,CAAZ,SAAA,GAAyB;AACrB/C,EAAAA,OAAO,EAAEO,SAAS,CAATA,MAAAA,CADY,UAAA;AAErBgE,EAAAA,aAAa,EAAEhE,SAAS,CAFH,KAAA;AAGrBiE,EAAAA,UAAU,EAAEjE,SAAS,CAHA,MAAA;AAIrBkE,EAAAA,WAAW,EAAElE,SAAS,CAJD,MAAA;AAKrB6C,EAAAA,YAAY,EAAE7C,SAAS,CALF,MAAA;AAMrBiF,EAAAA,aAAa,EAAEjF,SAAS,CANH,MAAA;AAOrBkF,EAAAA,sBAAsB,EAAElF,SAAS,CAPZ,MAAA;AAQrB2D,EAAAA,YAAY,EAAE3D,SAAS,CARF,IAAA;AASrB4D,EAAAA,sBAAsB,EAAE5D,SAAS,CATZ,IAAA;AAUrBZ,EAAAA,aAAa,EAAEY,SAAS,CAVH,IAAA;AAWrBmE,EAAAA,sBAAsB,EAAEnE,SAAS,CAXZ,IAAA;AAYrBX,EAAAA,kBAAkB,EAAEW,SAAS,CAZR,IAAA;AAarBV,EAAAA,gBAAgB,EAAEU,SAAS,CAbN,MAAA;AAcrBT,EAAAA,kBAAkB,EAAES,SAAS,CAdR,MAAA;AAerBR,EAAAA,gBAAgB,EAAEQ,SAAS,CAfN,MAAA;AAgBrBoE,EAAAA,UAAU,EAAEpE,SAAS,CAhBA,IAAA;AAiBrBqE,EAAAA,cAAc,EAAErE,SAAS,CAjBJ,IAAA;AAkBrBsE,EAAAA,YAAY,EAAEtE,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAlBpB,MAkBPA,CAlBO;AAmBrBuE,EAAAA,yBAAyB,EAAEvE,SAAS,CAnBf,IAAA;AAoBrBwE,EAAAA,mBAAmB,EAAExE,SAAS,CApBT,IAAA;AAqBrByE,EAAAA,qBAAqB,EAAEzE,SAAS,CArBX,IAAA;AAsBrB0E,EAAAA,oBAAoB,EAAE1E,SAAS,CAtBV,IAAA;AAuBrB6E,EAAAA,QAAQ,EAAE7E,SAAS,CAvBE,IAAA;AAwBrB8E,EAAAA,MAAM,EAAE9E,SAAS,CAxBI,IAAA;AAyBrB+E,EAAAA,cAAc,EAAE/E,SAAS,CAzBJ,IAAA;AA0BrBgF,EAAAA,QAAQ,EAAEhF,SAAS,CAACmF;AA1BC,CAAzB,GAAA,KAAA,CAAA;AA6BA,IAAA,cAAA,GAAejF,UAAU,CAAVA,QAAU,CAAVA,CAAf,YAAeA,CAAf;;IC/UMkF,cAAAA,GAAAA,aAAAA,UAAAA,gBAAAA,EAAAA;;;AACF,WAAA,cAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AACf,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,cAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACTE,MAAAA,IAAI,EADK,KAAA;AAETjC,MAAAA,KAAK,EAFI,EAAA;AAGTkC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAFe,WAAA,KAAA;AAOlB;;;;uCAEkBzC,S,EAAW0C,S,EAAW;AACrC,UAAI,KAAA,KAAA,CAAA,IAAA,KAAoB1C,SAAS,CAAjC,IAAA,EAAwC;AACpC,aAAA,QAAA,CAAc;AACVwC,UAAAA,IAAI,EAAE,KAAA,KAAA,CAAWA;AADP,SAAd;;AAGA,YAAI,KAAA,KAAA,CAAA,OAAA,IAAsB,CAAC,KAAA,KAAA,CAA3B,IAAA,EAA4C;AACxC,eAAA,KAAA,CAAA,OAAA;AACH;AACJ;;AAED,UAAI,KAAA,KAAA,CAAA,KAAA,CAAA,MAAA,KAA4BE,SAAS,CAATA,KAAAA,CAAhC,MAAA,EAAwD;AACpD,aAAA,QAAA,CAAc;AACVD,UAAAA,QAAQ,EAAE,KAAA,KAAA,CAAA,KAAA,CAAA,MAAA,KAA4B;AAD5B,SAAd;AAGH;AACJ;;;2CAEsB;AACnB,UAAI,KAAA,KAAA,CAAJ,cAAA,EAA+B;AAC3B,aAAA,QAAA,CAAc;AACVlC,UAAAA,KAAK,EAAE;AADG,SAAd;AAGH;AACJ;;;gCAEWH,K,EAAO;AACf,UAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACpB,aAAA,KAAA,CAAA,OAAA,CAAA,KAAA;AACH;;AACD,WAAA,QAAA,CAAc;AAACoC,QAAAA,IAAI,EAAE;AAAP,OAAd;AACH;;;6BAEQjC,K,EAAO;AAAA,UAAA,MAAA,GAAA,IAAA;;AACZ,UAAI,KAAA,KAAA,CAAJ,SAAA,EAA0B;AACtBD,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,eAAAA,EAAAA,KAAAA;AACH;;AACD,WAAA,QAAA,CAAc;AACVC,QAAAA,KAAK,EAAEA;AADG,OAAd,EAEG,YAAM;AACL,YAAI,MAAI,CAAJ,KAAA,CAAJ,QAAA,EAAyB;AACrB,UAAA,MAAI,CAAJ,KAAA,CAAA,QAAA,CAAA,KAAA;AACH;AALL,OAAA;AAOH;;;6BAEQlG,I,EAAM;AAAE;AACb,UAAI,KAAA,KAAA,CAAJ,SAAA,EAA0B;AACtBiG,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,cAAAA,EAAAA,IAAAA;AACH;;AACD,UAAI,KAAA,KAAA,CAAJ,QAAA,EAAyB;AACrB,aAAA,KAAA,CAAA,QAAA,CAAA,IAAA;AACH;AACJ;;;2BAEMC,K,EAAO;AAAE;AACZ,UAAI,KAAA,KAAA,CAAJ,SAAA,EAA0B;AACtBD,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,eAAAA,EAAAA,KAAAA;AACH;;AACD,UAAI,KAAA,KAAA,CAAJ,MAAA,EAAuB;AACnB,aAAA,KAAA,CAAA,MAAA,CAAA,KAAA;AACH;AACJ;;;mCAEcC,K,EAAOK,G,EAAK;AAAE;AACzB,UAAI,KAAA,KAAA,CAAJ,SAAA,EAA0B;AACtBN,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,gBAAAA,EAAAA,KAAAA;AACH;;AACD,UAAI,KAAA,KAAA,CAAJ,cAAA,EAA+B;AAC3B,aAAA,KAAA,CAAA,cAAA,CAAA,KAAA,EAAA,GAAA;AACH;AACJ;;;sCACiB;AACd,UAAI,KAAA,KAAA,CAAJ,MAAA,EAAuB;AACnB,aAAA,KAAA,CAAA,MAAA,CAAkB,KAAA,KAAA,CAAlB,KAAA;AACH;AACJ;;;6BACQ;AACL,aACI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EACQ,KAAA,KAAA,CADR,WAAA,EAAA;AAEI,QAAA,IAAI,EAAE,KAAA,KAAA,CAFV,IAAA;AAGI,QAAA,OAAO,EAAE,KAAA,WAAA,CAAA,IAAA,CAHb,IAGa,CAHb;AAII,QAAA,QAAQ,EAAE,KAAA,KAAA,CAJd,QAAA;AAKI,QAAA,SAAS,EAAE,KAAA,KAAA,CAAWqC;AAL1B,OAAA,CAAA,EAOI,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,IAAA,EAAc,KAAA,KAAA,CAPlB,WAOI,CAPJ,EAQI,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AACI,QAAA,YAAY,EAAE,KAAA,KAAA,CADlB,YAAA;AAEI,QAAA,aAAa,EAAE,KAAA,KAAA,CAFnB,aAAA;AAGI,QAAA,UAAU,EAAE,KAAA,KAAA,CAHhB,UAAA;AAII,QAAA,WAAW,EAAE,KAAA,KAAA,CAJjB,WAAA;AAKI,QAAA,YAAY,EAAE,KAAA,KAAA,CALlB,YAAA;AAMI,QAAA,sBAAsB,EAAE,KAAA,KAAA,CAN5B,sBAAA;AAOI,QAAA,aAAa,EAAE,KAAA,KAAA,CAPnB,aAAA;AAQI,QAAA,UAAU,EAAE,KAAA,KAAA,CARhB,UAAA;AASI,QAAA,QAAQ,EAAE,KAAA,QAAA,CAAA,IAAA,CATd,IASc,CATd;AAUI,QAAA,MAAM,EAAE,KAAA,MAAA,CAAA,IAAA,CAVZ,IAUY,CAVZ;AAWI,QAAA,cAAc,EAAE,KAAA,cAAA,CAAA,IAAA,CAXpB,IAWoB,CAXpB;AAYI,QAAA,QAAQ,EAAE,KAAA,QAAA,CAAA,IAAA,CAZd,IAYc,CAZd;AAaI,QAAA,cAAc,EAAE,KAAA,KAAA,CAbpB,cAAA;AAcI,QAAA,sBAAsB,EAAE,KAAA,KAAA,CAd5B,sBAAA;AAeI,QAAA,kBAAkB,EAAE,KAAA,KAAA,CAfxB,kBAAA;AAgBI,QAAA,gBAAgB,EAAE,KAAA,KAAA,CAhBtB,gBAAA;AAiBI,QAAA,kBAAkB,EAAE,KAAA,KAAA,CAjBxB,kBAAA;AAkBI,QAAA,gBAAgB,EAAE,KAAA,KAAA,CAAWjG;AAlBjC,OAAA,CADJ,CARJ,EA8BI,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACI,QAAA,KAAK,EADT,SAAA;AAEI,QAAA,OAAO,EAAE,KAAA,WAAA,CAAA,IAAA,CAAA,IAAA;AAFb,OAAA,EAIK,KAAA,KAAA,CALT,gBACI,CADJ,EAOI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACI,QAAA,KAAK,EADT,SAAA;AAEI,QAAA,QAAQ,EAAE,KAAA,KAAA,CAFd,QAAA;AAGI,QAAA,OAAO,EAAE,KAAA,eAAA,CAAA,IAAA,CAAA,IAAA;AAHb,OAAA,EAKK,KAAA,KAAA,CA5CrB,gBAuCgB,CAPJ,CA9BJ,CADJ,CADJ;AAkDH;;;;CAzIC4F,CAAuBC,KAAK,CAAC5C,SAA7B2C,C;;AA2INA,cAAc,CAAdA,YAAAA,GAA8B;AAC1BE,EAAAA,IAAI,EADsB,KAAA;AAE1BtB,EAAAA,aAAa,EAAE,CAAA,SAAA,EAAA,SAAA,EAFW,eAEX,CAFW;AAG1BC,EAAAA,UAAU,EAHgB,CAAA;AAI1BC,EAAAA,WAAW,EAJe,OAAA;AAK1BP,EAAAA,YAAY,EALc,IAAA;AAM1BC,EAAAA,sBAAsB,EANI,KAAA;AAO1BO,EAAAA,sBAAsB,EAPI,IAAA;AAQ1B7E,EAAAA,gBAAgB,EARU,EAAA;AAS1BC,EAAAA,kBAAkB,EATQ,EAAA;AAU1BC,EAAAA,gBAAgB,EAVU,EAAA;AAW1B4E,EAAAA,UAAU,EAXgB,IAAA;AAY1BC,EAAAA,cAAc,EAZY,IAAA;AAa1BqB,EAAAA,WAAW,EAbe,aAAA;AAc1BC,EAAAA,WAAW,EAde,EAAA;AAe1BC,EAAAA,gBAAgB,EAfU,QAAA;AAgB1BC,EAAAA,gBAAgB,EAhBU,QAAA;AAiB1BrH,EAAAA,QAAQ,EAjBkB,IAAA;AAkB1BiH,EAAAA,SAAS,EAlBiB,IAAA;AAmB1BK,EAAAA,MAAM,EAAE,SAAA,MAAA,GAAM,CAnBY,CAAA;AAoB1Bd,EAAAA,QAAQ,EAAE,SAAA,QAAA,GAAM,CApBU,CAAA;AAqB1B3D,EAAAA,OAAO,EAAE,SAAA,OAAA,GAAM,CArBW,CAAA;AAsB1BwD,EAAAA,QAAQ,EAAE,SAAA,QAAA,GAAM,CAtBU,CAAA;AAuB1BC,EAAAA,MAAM,EAAE,SAAA,MAAA,GAAM,CAvBY,CAAA;AAwB1BC,EAAAA,cAAc,EAAE,SAAA,cAAA,GAAM,CAxBI,CAAA;AAyB1BgB,EAAAA,SAAS,EAAE;AAzBe,CAA9BX;AA4BA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,cAAc,CAAd,SAAA,GAA2B;AACvBE,EAAAA,IAAI,EAAEtF,SAAS,CAATA,IAAAA,CADiB,UAAA;AAEvB8F,EAAAA,MAAM,EAAE9F,SAAS,CAFM,IAAA;AAGvBgF,EAAAA,QAAQ,EAAEhF,SAAS,CAHI,IAAA;AAIvBqB,EAAAA,OAAO,EAAErB,SAAS,CAJK,IAAA;AAKvB6E,EAAAA,QAAQ,EAAE7E,SAAS,CALI,IAAA;AAMvB8E,EAAAA,MAAM,EAAE9E,SAAS,CANM,IAAA;AAOvB+E,EAAAA,cAAc,EAAE/E,SAAS,CAPF,IAAA;AAQvBgE,EAAAA,aAAa,EAAEhE,SAAS,CARD,KAAA;AASvBiE,EAAAA,UAAU,EAAEjE,SAAS,CATE,MAAA;AAUvBkE,EAAAA,WAAW,EAAElE,SAAS,CAVC,MAAA;AAWvB6C,EAAAA,YAAY,EAAE7C,SAAS,CAXA,MAAA;AAYvB2D,EAAAA,YAAY,EAAE3D,SAAS,CAZA,IAAA;AAavB4D,EAAAA,sBAAsB,EAAE5D,SAAS,CAbV,IAAA;AAcvBZ,EAAAA,aAAa,EAAEY,SAAS,CAdD,IAAA;AAevBmE,EAAAA,sBAAsB,EAAEnE,SAAS,CAfV,IAAA;AAgBvBX,EAAAA,kBAAkB,EAAEW,SAAS,CAhBN,IAAA;AAiBvBV,EAAAA,gBAAgB,EAAEU,SAAS,CAjBJ,MAAA;AAkBvBT,EAAAA,kBAAkB,EAAES,SAAS,CAlBN,MAAA;AAmBvBR,EAAAA,gBAAgB,EAAEQ,SAAS,CAnBJ,MAAA;AAoBvBoE,EAAAA,UAAU,EAAEpE,SAAS,CApBE,IAAA;AAqBvBqE,EAAAA,cAAc,EAAErE,SAAS,CArBF,IAAA;AAsBvB0F,EAAAA,WAAW,EAAE1F,SAAS,CAtBC,MAAA;AAuBvB2F,EAAAA,WAAW,EAAE3F,SAAS,CAvBC,MAAA;AAwBvB4F,EAAAA,gBAAgB,EAAE5F,SAAS,CAxBJ,MAAA;AAyBvB6F,EAAAA,gBAAgB,EAAE7F,SAAS,CAzBJ,MAAA;AA0BvBxB,EAAAA,QAAQ,EAAEwB,SAAS,CA1BI,MAAA;AA2BvByF,EAAAA,SAAS,EAAEzF,SAAS,CA3BG,IAAA;AA4BvB+F,EAAAA,SAAS,EAAE/F,SAAS,CAACgG;AA5BE,CAA3B,GAAA,KAAA,CAAA","sourcesContent":["export function isImage(file) {\n    if (file.type.split('/')[0] === 'image') {\n        return true;\n    }\n}\nexport function convertBytesToMbsOrKbs(filesize) {\n    let size = '';\n    // I know, not technically correct...\n    if (filesize >= 1000000) {\n        size = (filesize / 1000000) + ' megabytes';\n    } else if (filesize >= 1000) {\n        size = (filesize / 1000) + ' kilobytes';\n    } else {\n        size = filesize + ' bytes';\n    }\n    return size;\n}\n\nexport async function createFileFromUrl(url) {\n    const response = await fetch(url);\n    const data = await response.blob();\n    const metadata = {type: data.type};\n    const filename = url.replace(/\\?.+/, '').split('/').pop();\n    const ext = data.type.split('/').pop();\n    return new File([data], `${filename}.${ext}`, metadata);\n}\n","import Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport {withStyles} from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {isImage} from './helpers/helpers.js';\nimport clsx from 'clsx';\n\nconst styles = {\n    removeBtn: {\n        transition: '.5s ease',\n        position: 'absolute',\n        opacity: 0,\n        top: -5,\n        right: -5,\n        width: 40,\n        height: 40,\n    },\n    smallPreviewImg: {\n        height: 100,\n        width: 'initial',\n        maxWidth: '100%',\n        marginTop: 5,\n        marginRight: 10,\n        color: 'rgba(0, 0, 0, 0.87)',\n        transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        boxSizing: 'border-box',\n        boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n        borderRadius: 2,\n        zIndex: 5,\n        opacity: 1,\n    },\n    imageContainer: {\n        position: 'relative',\n        zIndex: 10,\n        textAlign: 'center',\n        '&:hover $smallPreviewImg': {\n            opacity: 0.3,\n        },\n        '&:hover $removeBtn': {\n            opacity: 1,\n        },\n    },\n};\n\nfunction PreviewList(props) {\n    const {\n        fileObjects,\n        handleRemove,\n        showFileNames,\n        useChipsForPreview,\n        previewChipProps,\n        previewGridClasses,\n        previewGridProps,\n        classes,\n    } = props;\n    if (useChipsForPreview) {\n        return (\n            fileObjects.map((fileObject, i) => {\n                return (<div key={i}>\n                    <Chip\n                        label={fileObject.file.name}\n                        onDelete={handleRemove(i)}\n                        variant=\"outlined\"\n                        {...previewChipProps}\n                    />\n                </div>);\n            })\n        );\n    }\n    return (\n        <Grid container={true} spacing={8} className={previewGridClasses.container} {...previewGridProps.container}>\n            {\n                fileObjects.map((fileObject, i) => {\n                    const img = (isImage(fileObject.file) ?\n                        <img className={clsx(previewGridClasses.image, classes.smallPreviewImg)}\n                            role=\"presentation\" src={fileObject.data} /> :\n                        <AttachFileIcon className={clsx(previewGridClasses.image, classes.smallPreviewImg)} />\n                    );\n                    return (\n                        <Grid\n                            item={true} xs={4} key={i} {...previewGridProps.item}\n                            className={clsx(previewGridClasses.item, classes.imageContainer)}\n                        >\n                            {img}\n\n                            {showFileNames &&\n                                <p>{fileObject.file.name}</p>\n                            }\n\n                            <Fab\n                                onClick={handleRemove(i)}\n                                aria-label=\"Delete\"\n                                className={classes.removeBtn}\n                            >\n                                <DeleteIcon />\n                            </Fab>\n                        </Grid>\n                    );\n                })\n            }\n        </Grid>\n    );\n}\n\nPreviewList.propTypes = {\n    classes: PropTypes.object.isRequired,\n    fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    showFileNames: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n    previewChipProps: PropTypes.object,\n    previewGridClasses: PropTypes.object,\n    previewGridProps: PropTypes.object,\n};\n\nexport default withStyles(styles)(PreviewList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport {withStyles} from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles)(SnackbarContentWrapper);\n","import Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {withStyles} from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, {Component, Fragment} from 'react';\nimport Dropzone from 'react-dropzone';\nimport {convertBytesToMbsOrKbs, createFileFromUrl} from './helpers/helpers';\nimport PreviewList from './PreviewList';\nimport SnackbarContentWrapper from './SnackbarContentWrapper';\nconst styles = {\n    '@keyframes progress': {\n        '0%': {\n            backgroundPosition: '0 0',\n        },\n        '100%': {\n            backgroundPosition: '-70px 0',\n        },\n    },\n    dropZone: {\n        position: 'relative',\n        width: '100%',\n        minHeight: '250px',\n        backgroundColor: '#F0F0F0',\n        border: 'dashed',\n        borderColor: '#C8C8C8',\n        cursor: 'pointer',\n        boxSizing: 'border-box',\n    },\n    stripes: {\n        border: 'solid',\n        backgroundImage: 'repeating-linear-gradient(-45deg, #F0F0F0, #F0F0F0 25px, #C8C8C8 25px, #C8C8C8 50px)',\n        animation: 'progress 2s linear infinite !important',\n        backgroundSize: '150% 100%',\n    },\n    rejectStripes: {\n        border: 'solid',\n        backgroundImage: 'repeating-linear-gradient(-45deg, #fc8785, #fc8785 25px, #f4231f 25px, #f4231f 50px)',\n        animation: 'progress 2s linear infinite !important',\n        backgroundSize: '150% 100%',\n    },\n    dropzoneTextStyle: {\n        textAlign: 'center',\n    },\n    uploadIconSize: {\n        width: 51,\n        height: 51,\n        color: '#909090',\n    },\n    dropzoneParagraph: {\n        fontSize: 24,\n    },\n};\n\n\nclass DropzoneArea extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fileObjects: [],\n            openSnackBar: false,\n            snackbarMessage: '',\n            snackbarVariant: 'success',\n            dropzoneText: props.dropzoneText,\n        };\n    }\n\n    componentDidMount() {\n        this.filesArray(this.props.initialFiles);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dropzoneText !== prevProps.dropzoneText) {\n            this.setState({\n                dropzoneText: this.props.dropzoneText,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            });\n        }\n    }\n\n    async filesArray(urls) {\n        try {\n            for (const url of urls) {\n                const file = await createFileFromUrl(url);\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    this.setState({\n                        fileObjects: this.state.fileObjects.concat({\n                            file: file,\n                            data: event.target.result,\n                        }),\n                    });\n                };\n                reader.readAsDataURL(file);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    onDrop(files) {\n        const _this = this;\n        if (this.props.filesLimit > 1 && this.state.fileObjects.length + files.length > this.props.filesLimit) {\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: this.props.getFileLimitExceedMessage(this.props.filesLimit),\n                snackbarVariant: 'error',\n            });\n        } else {\n            let count = 0;\n            let message = '';\n            if (!Array.isArray(files)) files = [files];\n\n            files.forEach((file) => {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    _this.setState({\n                        fileObjects: this.props.filesLimit <= 1 ?\n                            [\n                                {\n                                    file: file,\n                                    data: event.target.result,\n                                },\n                            ] :\n                            _this.state.fileObjects.concat(\n                                {\n                                    file: file,\n                                    data: event.target.result,\n                                }\n                            ),\n                    },\n                    () => {\n                        if (this.props.onChange) {\n                            this.props.onChange(_this.state.fileObjects.map((fileObject) => fileObject.file));\n                        }\n                        if (this.props.onDrop) {\n                            this.props.onDrop(file);\n                        }\n                        message += this.props.getFileAddedMessage(file.name);\n                        count++; // we cannot rely on the index because this is asynchronous\n                        if (count === files.length) {\n                            // display message when the last one fires\n                            this.setState({\n                                openSnackBar: true,\n                                snackbarMessage: message,\n                                snackbarVariant: 'success',\n                            });\n                        }\n                    });\n                };\n                reader.readAsDataURL(file);\n            });\n        }\n    }\n\n    handleRemove = (fileIndex) => (event) => {\n        event.stopPropagation();\n        const {fileObjects} = this.state;\n        const file = fileObjects.filter((fileObject, i) => {\n            return i === fileIndex;\n        })[0].file;\n        fileObjects.splice(fileIndex, 1);\n        this.setState(fileObjects, () => {\n            if (this.props.onDelete) {\n                this.props.onDelete(file);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(this.state.fileObjects.map((fileObject) => fileObject.file));\n            }\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: this.props.getFileRemovedMessage(file.name),\n                snackbarVariant: 'info',\n            });\n        });\n    };\n\n    handleDropRejected(rejectedFiles, evt) {\n        let message = '';\n        rejectedFiles.forEach((rejectedFile) => {\n            message = this.props.getDropRejectMessage(\n                rejectedFile,\n                this.props.acceptedFiles,\n                this.props.maxFileSize\n            );\n        });\n        if (this.props.onDropRejected) {\n            this.props.onDropRejected(rejectedFiles, evt);\n        }\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'error',\n        });\n    }\n\n    handleCloseSnackbar = () => {\n        this.setState({\n            openSnackBar: false,\n        });\n    };\n\n    render() {\n        const {classes} = this.props;\n        const showPreviews = this.props.showPreviews && this.state.fileObjects.length > 0;\n        const showPreviewsInDropzone = this.props.showPreviewsInDropzone && this.state.fileObjects.length > 0;\n\n        return (\n            <Fragment>\n                <Dropzone\n                    accept={this.props.acceptedFiles.join(',')}\n                    onDrop={this.onDrop.bind(this)}\n                    onDropRejected={this.handleDropRejected.bind(this)}\n                    className={clsx(this.props.dropzoneClass, classes.dropZone)}\n                    acceptClassName={classes.stripes}\n                    rejectClassName={classes.rejectStripes}\n                    maxSize={this.props.maxFileSize}\n                    multiple={this.props.filesLimit > 1}\n                >\n                    <div className={classes.dropzoneTextStyle}>\n                        <p className={clsx(classes.dropzoneParagraph, this.props.dropzoneParagraphClass)}>\n                            {this.state.dropzoneText}\n                        </p>\n                        <CloudUploadIcon className={classes.uploadIconSize} />\n                    </div>\n                    {showPreviewsInDropzone &&\n                        <PreviewList\n                            fileObjects={this.state.fileObjects}\n                            handleRemove={this.handleRemove.bind(this)}\n                            showFileNames={this.props.showFileNames}\n                            useChipsForPreview={this.props.useChipsForPreview}\n                            previewChipProps={this.props.previewChipProps}\n                            previewGridClasses={this.props.previewGridClasses}\n                            previewGridProps={this.props.previewGridProps}\n                        />\n                    }\n                </Dropzone>\n                {showPreviews &&\n                    <Fragment>\n                        <Grid container={true}>\n                            <span>Preview:</span>\n                        </Grid>\n                        <PreviewList\n                            fileObjects={this.state.fileObjects}\n                            handleRemove={this.handleRemove.bind(this)}\n                            showFileNames={this.props.showFileNamesInPreview}\n                            useChipsForPreview={this.props.useChipsForPreview}\n                            previewChipProps={this.props.previewChipProps}\n                            previewGridClasses={this.props.previewGridClasses}\n                            previewGridProps={this.props.previewGridProps}\n                        />\n                    </Fragment>\n                }\n                {this.props.showAlerts &&\n                    <Snackbar\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                        open={this.state.openSnackBar}\n                        autoHideDuration={6000}\n                        onClose={this.handleCloseSnackbar}\n                    >\n                        <SnackbarContentWrapper\n                            onClose={this.handleCloseSnackbar}\n                            variant={this.state.snackbarVariant}\n                            message={this.state.snackbarMessage}\n                        />\n                    </Snackbar>\n                }\n            </Fragment>\n        );\n    }\n}\n\nDropzoneArea.defaultProps = {\n    acceptedFiles: ['image/*', 'video/*', 'application/*'],\n    filesLimit: 3,\n    maxFileSize: 3000000,\n    dropzoneText: 'Drag and drop an image file here or click',\n    showPreviews: false, // By default previews show up under in the dialog and inside in the standalone\n    showPreviewsInDropzone: true,\n    showFileNames: false,\n    showFileNamesInPreview: false,\n    previewChipProps: {},\n    previewGridClasses: {},\n    previewGridProps: {},\n    showAlerts: true,\n    clearOnUnmount: true,\n    initialFiles: [],\n    getFileLimitExceedMessage: (filesLimit) => (`Maximum allowed number of files exceeded. Only ${filesLimit} allowed`),\n    getFileAddedMessage: (fileName) => (`File ${fileName} successfully added.`),\n    getFileRemovedMessage: (fileName) => (`File ${fileName} removed.`),\n    getDropRejectMessage: (rejectedFile, acceptedFiles, maxFileSize) => {\n        let message = `File ${rejectedFile.name} was rejected. `;\n        if (!acceptedFiles.includes(rejectedFile.type)) {\n            message += 'File type not supported. ';\n        }\n        if (rejectedFile.size > maxFileSize) {\n            message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n        }\n        return message;\n    },\n    onChange: () => { },\n    onDrop: () => { },\n    onDropRejected: () => { },\n    onDelete: () => { },\n};\nDropzoneArea.propTypes = {\n    classes: PropTypes.object.isRequired,\n    acceptedFiles: PropTypes.array,\n    filesLimit: PropTypes.number,\n    maxFileSize: PropTypes.number,\n    dropzoneText: PropTypes.string,\n    dropzoneClass: PropTypes.string,\n    dropzoneParagraphClass: PropTypes.string,\n    showPreviews: PropTypes.bool,\n    showPreviewsInDropzone: PropTypes.bool,\n    showFileNames: PropTypes.bool,\n    showFileNamesInPreview: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n    previewChipProps: PropTypes.object,\n    previewGridClasses: PropTypes.object,\n    previewGridProps: PropTypes.object,\n    showAlerts: PropTypes.bool,\n    clearOnUnmount: PropTypes.bool,\n    initialFiles: PropTypes.arrayOf(PropTypes.string),\n    getFileLimitExceedMessage: PropTypes.func,\n    getFileAddedMessage: PropTypes.func,\n    getFileRemovedMessage: PropTypes.func,\n    getDropRejectMessage: PropTypes.func,\n    onChange: PropTypes.func,\n    onDrop: PropTypes.func,\n    onDropRejected: PropTypes.func,\n    onDelete: PropTypes.func,\n};\n\nexport default withStyles(styles)(DropzoneArea);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport React, {Fragment} from 'react';\nimport DropzoneArea from './DropzoneArea';\n\n\nclass DropzoneDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            files: [],\n            disabled: true,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.open !== prevProps.open) {\n            this.setState({\n                open: this.props.open,\n            });\n            if (this.props.onClose && !this.props.open) {\n                this.props.onClose();\n            }\n        }\n\n        if (this.state.files.length !== prevState.files.length) {\n            this.setState({\n                disabled: this.state.files.length === 0,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.clearOnUnmount) {\n            this.setState({\n                files: [],\n            });\n        }\n    }\n\n    handleClose(event) {\n        if (this.props.onClose) {\n            this.props.onClose(event);\n        }\n        this.setState({open: false});\n    }\n\n    onChange(files) {\n        if (this.props.logEvents) {\n            console.log('Files changed', files);\n        }\n        this.setState({\n            files: files,\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange(files);\n            }\n        });\n    }\n\n    onDelete(file) { // this passes it on to the parent component to do with it what they will\n        if (this.props.logEvents) {\n            console.log('File removed', file);\n        }\n        if (this.props.onDelete) {\n            this.props.onDelete(file);\n        }\n    }\n\n    onDrop(files) { // this passes it on to the parent component to do with it what they will\n        if (this.props.logEvents) {\n            console.log('Files dropped', files);\n        }\n        if (this.props.onDrop) {\n            this.props.onDrop(files);\n        }\n    }\n\n    onDropRejected(files, evt) { // this passes it on to the parent component to do with it what they will\n        if (this.props.logEvents) {\n            console.log('Files rejected', files);\n        }\n        if (this.props.onDropRejected) {\n            this.props.onDropRejected(files, evt);\n        }\n    }\n    handleSaveClick() {\n        if (this.props.onSave) {\n            this.props.onSave(this.state.files);\n        }\n    }\n    render() {\n        return (\n            <Fragment>\n                <Dialog\n                    {...this.props.dialogProps}\n                    open={this.state.open}\n                    onClose={this.handleClose.bind(this)}\n                    maxWidth={this.props.maxWidth}\n                    fullWidth={this.props.fullWidth}\n                >\n                    <DialogTitle>{this.props.dialogTitle}</DialogTitle>\n                    <DialogContent>\n                        <DropzoneArea\n                            dropzoneText={this.props.dropzoneText}\n                            acceptedFiles={this.props.acceptedFiles}\n                            filesLimit={this.props.filesLimit}\n                            maxFileSize={this.props.maxFileSize}\n                            showPreviews={this.props.showPreviews}\n                            showPreviewsInDropzone={this.props.showPreviewsInDropzone}\n                            showFileNames={this.props.showFileNames}\n                            showAlerts={this.props.showAlerts}\n                            onChange={this.onChange.bind(this)}\n                            onDrop={this.onDrop.bind(this)}\n                            onDropRejected={this.onDropRejected.bind(this)}\n                            onDelete={this.onDelete.bind(this)}\n                            clearOnUnmount={this.props.clearOnUnmount}\n                            showFileNamesInPreview={this.props.showFileNamesInPreview}\n                            useChipsForPreview={this.props.useChipsForPreview}\n                            previewChipProps={this.props.previewChipProps}\n                            previewGridClasses={this.props.previewGridClasses}\n                            previewGridProps={this.props.previewGridProps}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            color=\"primary\"\n                            onClick={this.handleClose.bind(this)}\n                        >\n                            {this.props.cancelButtonText}\n                        </Button>\n                        <Button\n                            color=\"primary\"\n                            disabled={this.state.disabled}\n                            onClick={this.handleSaveClick.bind(this)}\n                        >\n                            {this.props.submitButtonText}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\nDropzoneDialog.defaultProps = {\n    open: false,\n    acceptedFiles: ['image/*', 'video/*', 'application/*'],\n    filesLimit: 3,\n    maxFileSize: 3000000,\n    showPreviews: true,\n    showPreviewsInDropzone: false,\n    showFileNamesInPreview: true,\n    previewChipProps: {},\n    previewGridClasses: {},\n    previewGridProps: {},\n    showAlerts: true,\n    clearOnUnmount: true,\n    dialogTitle: 'Upload file',\n    dialogProps: {},\n    submitButtonText: 'Submit',\n    cancelButtonText: 'Cancel',\n    maxWidth: 'sm',\n    fullWidth: true,\n    onSave: () => { },\n    onDelete: () => { },\n    onClose: () => { },\n    onChange: () => { },\n    onDrop: () => { },\n    onDropRejected: () => { },\n    logEvents: false,\n};\n\nDropzoneDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onSave: PropTypes.func,\n    onDelete: PropTypes.func,\n    onClose: PropTypes.func,\n    onChange: PropTypes.func,\n    onDrop: PropTypes.func,\n    onDropRejected: PropTypes.func,\n    acceptedFiles: PropTypes.array,\n    filesLimit: PropTypes.number,\n    maxFileSize: PropTypes.number,\n    dropzoneText: PropTypes.string,\n    showPreviews: PropTypes.bool,\n    showPreviewsInDropzone: PropTypes.bool,\n    showFileNames: PropTypes.bool,\n    showFileNamesInPreview: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n    previewChipProps: PropTypes.object,\n    previewGridClasses: PropTypes.object,\n    previewGridProps: PropTypes.object,\n    showAlerts: PropTypes.bool,\n    clearOnUnmount: PropTypes.bool,\n    dialogTitle: PropTypes.string,\n    dialogProps: PropTypes.object,\n    submitButtonText: PropTypes.string,\n    cancelButtonText: PropTypes.string,\n    maxWidth: PropTypes.string,\n    fullWidth: PropTypes.bool,\n    logEvents: PropTypes.bool,\n};\n\nexport default DropzoneDialog;\n"]},"metadata":{},"sourceType":"module"}