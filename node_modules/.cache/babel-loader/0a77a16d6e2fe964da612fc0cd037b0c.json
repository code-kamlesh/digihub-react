{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\BulkUpload.js\";\nimport React from 'react';\nimport * as XLSX from \"xlsx\";\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport label from 'material-ui/svg-icons/action/label';\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport UserContext from '../components/GolbalContext';\nimport { fetchNotCompletedBatchDetails, saveBulkMetaData, saveBulkStudentData } from '../util/api';\nimport excel from 'xlsx';\nlet today = new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\nlet yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd;\nexport default function (props) {\n  let student_data_count;\n  let selectedOption;\n  let batchId;\n  let batchName;\n  const [option] = useState([{\n    value: \"Mobilization\",\n    label: \"Mobilization\"\n  }, {\n    value: \"Enrollment\",\n    label: \"Enrollment\"\n  }]);\n  const [disabled, setDisabled] = useState(true);\n  const [batchelist, setBatchelist] = useState([]); // const [batches, setbatches]= useState(\"\");\n\n  const [selectedBatches, setselectedBatches] = useState([]);\n  const [items, setItems] = useState(\"\");\n  const [error, setserros] = useState(\"\"); // // Reading excel file\n  // Calling the above function to read the file\n\n  const readExcel = file => {\n    // \n    const file_name = file.name;\n    const fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(file);\n\n    fileReader.onload = e => {\n      console.log(e);\n      const bufferArray = e.target.result;\n      const wb = XLSX.read(bufferArray, {\n        type: \"buffer\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname]; // console.log(\"file name : \",file.name)\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      console.log(\"Header file \", data);\n      const student_data = XLSX.utils.sheet_to_json(ws); //  console.log(\" Studeny data : \",student_data)\n      //  console.log(\" Student aadhar : \",student_data[0].Aadhar_Number)\n\n      student_data_count = data.length - 1;\n      console.log(\"DataCount : \", student_data_count);\n      const requiredHeader = ['Reg_No', 'Aadhar_Number', 'First_Name', 'Middle_Name', 'Last_Name', 'DOB', 'Gender', 'Highest_Qualification', 'Religion', 'Passing_Year', 'Address_Line_1', 'Village', 'District', 'State', 'PINCODE', 'Category', 'Primary_Contact_Number', 'Primary_Mail_ID', 'Created_date', 'Created_by', 'Updated_date', 'Updated_by', 'Student_ID', 'Eng_ID', 'Status', 'Reason'];\n      let flag = true; // var x= requiredHeader.findIndex(element =>{\n      //   element == \"Created_by\"\n      // })\n      // console.log(x)\n\n      console.log(data[0]);\n      requiredHeader.map((element, id) => {\n        // console.log(\"header comparison \",element, \"data : \",data[0][id])\n        if (flag) {\n          if (element == data[0][id]) {\n            if (id + 1 == requiredHeader.length) {\n              // alert(\"Data in proper format\");\n              setDisabled(false);\n              uploadDocuments(file_name, student_data, student_data_count);\n            }\n          } else {\n            flag = false;\n            alert(\"please fill the all column as per sample template\");\n            return;\n          }\n        } else {// console.log(\"please fill the all column should not be repwted twice\") \n        }\n      });\n    };\n  }; // For handling the dropdown\n\n\n  const handleChange = e => {\n    selectedOption = e; //  console.log(selectedOption,\"  selectedOption\")\n\n    if (e === \"Enrollment\") {\n      setDisabled(false);\n      fetchNotCompletedBatchDetails(UserContext.centerId).then(jsondata => {\n        let result = JSON.parse(jsondata.data);\n        console.log(\"senter : \", result); // console.log(result[0].freezeDate)\n        // setbatches([])\n\n        result.forEach(element => {\n          console.log(\"Condition for date \", element.freezeDate > today);\n\n          if (element.freezeDate > today) {\n            batchelist.push({\n              \"value\": element.batchId,\n              \"label\": element.batchName\n            });\n          }\n        });\n        console.log(batchelist);\n      });\n    } else {\n      setDisabled(true);\n    }\n  }; // for handling batches changes\n\n\n  const batchesChanges = e => {\n    console.log(\"BatchecId : \", e);\n    batchId = e;\n    let index = batchelist.findIndex(object => object.value == batchId);\n    batchName = batchelist[index].label; // setBatchelist([])\n    // setselectedBatches(\"\"\n  }; // handlingError((e)=>{\n  //   if(setSelectedOption===\"\"){\n  //     setserros=\"Plase select Some option\"\n  //   }\n  // })\n  // \n  // Upload document\n\n\n  const uploadDocuments = (file_name, student_data, student_data_count) => {\n    console.log(student_data_count);\n    console.log(student_data);\n    console.log(file_name);\n    saveBulkMetaData(file_name, today, \"mobilized\", \"reatils sails\", \"400057\", student_data_count, \"P\", \"Hyderabad\", \"20\", \"under tset\").then(jsondata => {\n      let result = JSON.parse(jsondata.data);\n      console.log(result[0].regId);\n      const user_unique_id = result[0].regId;\n\n      for (var i = 0; i < student_data_count; i++) {\n        saveBulkStudentData(user_unique_id, student_data[i].First_Name, student_data[i].Last_Name, student_data[i].Middle_Name, student_data[i].DOB, student_data[i].Aadhar_Number, student_data[i].Highest_Qualification, student_data[i].Passing_Year, student_data[i].Gender, student_data[i].Religion, student_data[i].Category, student_data[i].Primary_Contact_Number, student_data[i].Primary_Mail_ID, student_data[i].Address_Line_1, student_data[i].Village, student_data[i].District, student_data[i].State, student_data[i].PINCODE, today, selectedOption, UserContext.userid, \"P\", \"Sample creation by us\").then(jsondata => {\n          let result = JSON.parse(jsondata.data);\n          console.log(result);\n        });\n      }\n    });\n  }; // Uploading the file in s3 buckket\n\n\n  const uploadDocument = setItems => {\n    //   e.preventDefault();\n    // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\n    var levelOfDocument = \"G\"; // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\n\n    let localThis = this;\n    let reader = new FileReader();\n    reader.readAsDataURL(setItems);\n\n    reader.onload = function () {\n      let document = reader.result;\n      console.log(document); //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\n      //  .then((jsondata) => {\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\n      //        localThis.setState({alertDialogFlag:true});\n      //        localThis.getDocuments();\n      //     })\n    };\n  }; // Routes handling for history\n\n\n  const routeChange = () => {//  <Route>\n    //  </Route>\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, \"Options\"), /*#__PURE__*/React.createElement(SingleSelect, {\n    name: \"\",\n    id: \"\",\n    options: option,\n    value: selectedOption,\n    onChange: handleChange //  }\n    // error={handlingError}\n    // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    shrink: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, \"Batches\"), /*#__PURE__*/React.createElement(SingleSelect, {\n    name: \"batchname\",\n    id: \"batchId\",\n    options: batchelist,\n    value: selectedBatches,\n    onChange: batchesChanges //  key={ setselectedBatches([])|| ''}\n    // kamlesh is the best software in the \n    ,\n    disabled: disabled // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\n    // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\n    // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"upload-photo\",\n    type: \"file\",\n    accept: \".xlsx/*, .xls/*\",\n    onClick: e => {\n      e.target.value = null;\n      setDisabled(true);\n    },\n    onChange: e => {\n      const file = e.target.files[0];\n      var substr1 = file.name.substring(file.name.length - 4, file.name.length);\n      var substr2 = file.name.substring(file.name.length - 3, file.name.length);\n\n      if (substr1 == \"xlsx\" || substr2 == \"xls\") {\n        readExcel(file);\n      } else {\n        alert(\"Please Upload Excel file\");\n        return;\n      }\n    },\n    maxFileSize: 2000000,\n    filesLimit: 1,\n    showFileNames: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }, \"Note-:Please upload Excel file .\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 15\n    }\n  }, \"and size should not be greater than 2mb.\"))))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 20\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"small\",\n    disabled: disabled,\n    onSubmit: uploadDocuments // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 15\n    }\n  }, \"Upload Document\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 14\n    }\n  }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 22\n    }\n  }), \"  \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 30\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: routeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 14\n    }\n  }, \"Go to History\")));\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/BulkUpload.js"],"names":["React","XLSX","Checkbox","InputLabel","Input","Grid","Button","SingleSelect","label","useState","useHistory","Table","TableBody","TableCell","TableHead","TableRow","DropzoneArea","UserContext","fetchNotCompletedBatchDetails","saveBulkMetaData","saveBulkStudentData","excel","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","props","student_data_count","selectedOption","batchId","batchName","option","value","disabled","setDisabled","batchelist","setBatchelist","selectedBatches","setselectedBatches","items","setItems","error","setserros","readExcel","file","file_name","name","fileReader","FileReader","readAsArrayBuffer","onload","e","console","log","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","student_data","length","requiredHeader","flag","map","element","id","uploadDocuments","alert","handleChange","centerId","then","jsondata","JSON","parse","forEach","freezeDate","push","batchesChanges","index","findIndex","object","regId","user_unique_id","i","First_Name","Last_Name","Middle_Name","DOB","Aadhar_Number","Highest_Qualification","Passing_Year","Gender","Religion","Category","Primary_Contact_Number","Primary_Mail_ID","Address_Line_1","Village","District","State","PINCODE","userid","uploadDocument","levelOfDocument","localThis","reader","readAsDataURL","document","routeChange","width","files","substr1","substring","substr2","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport { Checkbox, InputLabel, Input, Grid, Button } from '@material-ui/core';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport label from 'material-ui/svg-icons/action/label';\r\nimport { useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {DropzoneArea} from 'material-ui-dropzone';\r\nimport UserContext from '../components/GolbalContext'\r\nimport {fetchNotCompletedBatchDetails,saveBulkMetaData,saveBulkStudentData} from '../util/api';\r\nimport excel from 'xlsx';\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + '-' + mm + '-' + dd;\r\n\r\nexport default function(props){\r\n  let student_data_count;\r\n  let selectedOption;\r\n  let batchId\r\n  let batchName;\r\n    const [option]= useState([{value:\"Mobilization\", label:\"Mobilization\"},\r\n                                {value:\"Enrollment\" ,label:\"Enrollment\"}])\r\n\r\n    const [disabled,setDisabled]= useState(true); \r\n    const [batchelist,setBatchelist] = useState([])\r\n    // const [batches, setbatches]= useState(\"\");\r\n    const [selectedBatches, setselectedBatches] = useState([])\r\n    const [items, setItems] = useState(\"\");\r\n    const[error,setserros]= useState(\"\")\r\n    // // Reading excel file\r\n\r\n    // Calling the above function to read the file\r\n\r\n    const readExcel = (file) => {\r\n        // \r\n        const file_name = file.name\r\n       const fileReader = new FileReader();\r\n       fileReader.readAsArrayBuffer(file);\r\n \r\n       fileReader.onload = (e) => {\r\n         console.log(e)\r\n         const bufferArray = e.target.result;\r\n \r\n         const wb = XLSX.read(bufferArray, { type: \"buffer\" });\r\n \r\n         const wsname = wb.SheetNames[0];\r\n \r\n         const ws = wb.Sheets[wsname];\r\n        \r\n        // console.log(\"file name : \",file.name)\r\n         const data = XLSX.utils.sheet_to_json(ws,{header:1});\r\n\r\n         console.log(\"Header file \",data)\r\n         const student_data = XLSX.utils.sheet_to_json(ws);\r\n        //  console.log(\" Studeny data : \",student_data)\r\n        //  console.log(\" Student aadhar : \",student_data[0].Aadhar_Number)\r\n        \r\n        student_data_count = data.length-1\r\n         console.log(\"DataCount : \",student_data_count )\r\n\r\n          const requiredHeader =['Reg_No', 'Aadhar_Number', 'First_Name', 'Middle_Name', 'Last_Name', 'DOB', 'Gender', 'Highest_Qualification', 'Religion', 'Passing_Year', 'Address_Line_1', 'Village', 'District', 'State', 'PINCODE', 'Category', 'Primary_Contact_Number', 'Primary_Mail_ID', 'Created_date', 'Created_by', 'Updated_date', 'Updated_by', 'Student_ID', 'Eng_ID', 'Status', 'Reason']\r\n        let flag = true\r\n\r\n        // var x= requiredHeader.findIndex(element =>{\r\n        //   element == \"Created_by\"\r\n        // })\r\n        // console.log(x)\r\n        console.log(data[0] )\r\n        requiredHeader.map((element,id) =>{\r\n          // console.log(\"header comparison \",element, \"data : \",data[0][id])\r\n        \r\n          if(flag){\r\n            if(element==data[0][id]){\r\n                if(id+1 == requiredHeader.length)\r\n                {\r\n                // alert(\"Data in proper format\");\r\n                setDisabled(false)\r\n                uploadDocuments(file_name,student_data,student_data_count)                \r\n            }\r\n          }\r\n            else{\r\n              flag = false\r\n              alert(\"please fill the all column as per sample template\")\r\n              return;\r\n            }\r\n          }\r\n          else{\r\n            // console.log(\"please fill the all column should not be repwted twice\") \r\n          }\r\n         \r\n        })\r\n       }\r\n     \r\n   }\r\n\r\n\r\n    \r\n    // For handling the dropdown\r\n    const handleChange=((e)=>{\r\n      \r\n     selectedOption =e;\r\n    //  console.log(selectedOption,\"  selectedOption\")\r\n      if(e === \"Enrollment\"){\r\n        setDisabled(false)\r\n        fetchNotCompletedBatchDetails(UserContext.centerId).then((jsondata) => {\r\n          let result = JSON.parse(jsondata.data);\r\n          console.log(\"senter : \",result)\r\n          // console.log(result[0].freezeDate)\r\n          // setbatches([])\r\n         result.forEach(element => {\r\n\r\n           console.log(\"Condition for date \" , element.freezeDate > today)\r\n            \r\n            if(element.freezeDate > today ){\r\n              batchelist.push({\r\n                \"value\" : element.batchId,\r\n                \"label\": element.batchName\r\n                \r\n              })\r\n\r\n          }\r\n         });\r\n         console.log(batchelist)\r\n        })\r\n      }\r\n      else{\r\n        setDisabled(true)\r\n      }\r\n    })\r\n\r\n    // for handling batches changes\r\n   const  batchesChanges= ((e)=>{\r\n      console.log(\"BatchecId : \",e)\r\n     batchId = e;\r\n     let index = batchelist.findIndex((object) => object.value ==batchId )\r\n      batchName = batchelist[index].label\r\n      // setBatchelist([])\r\n      // setselectedBatches(\"\"\r\n    })\r\n\r\n    \r\n    // handlingError((e)=>{\r\n    //   if(setSelectedOption===\"\"){\r\n    //     setserros=\"Plase select Some option\"\r\n    //   }\r\n    // })\r\n\r\n    // \r\n    // Upload document\r\n    const uploadDocuments = ((file_name,student_data,student_data_count)=>{\r\n      console.log(student_data_count)\r\n      console.log(student_data)\r\n      console.log(file_name)\r\n        saveBulkMetaData(file_name,today,\"mobilized\",\"reatils sails\",\"400057\",student_data_count,\"P\",\"Hyderabad\",\"20\",\"under tset\").then((jsondata)=>{\r\n          let result = JSON.parse(jsondata.data)\r\n          console.log(result[0].regId)\r\n          const user_unique_id = result[0].regId\r\n\r\n          for(var i=0;i<student_data_count;i++){\r\n            saveBulkStudentData(user_unique_id,student_data[i].First_Name,\r\n              student_data[i].Last_Name,\r\n              student_data[i].Middle_Name,\r\n              student_data[i].DOB,\r\n              student_data[i].Aadhar_Number,\r\n              student_data[i].Highest_Qualification,\r\n              student_data[i].Passing_Year,\r\n              student_data[i].Gender,\r\n              student_data[i].Religion,\r\n              student_data[i].Category,\r\n              student_data[i].Primary_Contact_Number,\r\n              student_data[i].Primary_Mail_ID,\r\n\r\n              student_data[i].Address_Line_1,\r\n              student_data[i].Village,\r\n\r\n              student_data[i].District,\r\n              student_data[i].State,\r\n              student_data[i].PINCODE,\r\n            \r\n              today,\r\n              selectedOption,\r\n              UserContext.userid,\r\n              \"P\",\r\n              \"Sample creation by us\").then((jsondata)=>{\r\n              let result = JSON.parse(jsondata.data)\r\n              console.log(result)\r\n            })\r\n            \r\n          }\r\n        })\r\n    })\r\n\r\n    // Uploading the file in s3 buckket\r\n    const uploadDocument = ((setItems)=>{\r\n        //   e.preventDefault();\r\n       // var genericDocuments=[\"8thCertificate\",\"10thCertificate\",\"12thCertificate\",\"StudentPicture\",\"PostGraduation\",\"Graduation\"];\r\n       var levelOfDocument=\"G\";\r\n       // if(genericDocuments.includes(this.state.typeOfDocument)){levelOfDocument=\"G\";}\r\n       \r\n       \r\n       let localThis=this;\r\n       \r\n       let reader = new FileReader();\r\n       reader.readAsDataURL(setItems);\r\n       reader.onload = function () {\r\n       let  document = reader.result;\r\n       console.log(document)\r\n      //  uploadDocument(localThis.state.dbUserId,localThis.state.engagementId,documentType,levelOfDocument,localThis.state.typeOfDocument,document,localThis.state.documentNumber)\r\n      //  .then((jsondata) => {\r\n      //        alertDialogOptions.message=<span style={{color:\"green\"}}>{documentType} File uploaded successfully</span>;\r\n      //        localThis.setState({alertDialogFlag:true});\r\n      //        localThis.getDocuments();\r\n      //     })\r\n       }\r\n         \r\n    })\r\n\r\n// Routes handling for history\r\n    const routeChange=(()=>{\r\n    //  <Route>\r\n\r\n    //  </Route>\r\n      \r\n    })\r\n        return(\r\n          \r\n            <Grid container>\r\n               <Grid container>\r\n                <Grid item xs={12}> </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Options</InputLabel>\r\n            <SingleSelect\r\n              name=\"\" id=\"\"\r\n              options={option}\r\n              value={selectedOption}\r\n              onChange={handleChange}\r\n              //  }\r\n              // error={handlingError}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n\r\n           <Grid item xs={12} sm={2}></Grid>\r\n            <Grid item xs={12} sm={4}>\r\n            <InputLabel shrink={true} >Batches</InputLabel>\r\n            <SingleSelect\r\n              name=\"batchname\"  id =\"batchId\"\r\n              options={batchelist}\r\n              value={selectedBatches}\r\n              onChange={batchesChanges}\r\n              //  key={ setselectedBatches([])|| ''}\r\n              // kamlesh is the best software in the \r\n                disabled={disabled}\r\n              // onChange={this.handleStateChange.bind(this, 'Selectedstate')}\r\n              // helperText={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.label : ''}\r\n              // error={this.state.errors.Selectedstate != undefined ? this.state.errors.Selectedstate.value : ''}\r\n            />\r\n          </Grid>\r\n          </Grid>\r\n         \r\n          <Table  aria-label=\"simple table\" style={{ width:\"100%\"}}>\r\n          <TableBody>\r\n          <TableRow>\r\n            <TableCell> \r\n            <Input \r\n               name=\"upload-photo\"\r\n               type=\"file\"\r\n               accept='.xlsx/*, .xls/*'\r\n               onClick={e => {\r\n                (e.target.value = null)\r\n                setDisabled(true)\r\n              }\r\n               }\r\n               onChange={(e) => {\r\n                const file = e.target.files[0];\r\n                var substr1 = file.name.substring(file.name.length-4, file.name.length);\r\n                var substr2 = file.name.substring(file.name.length-3, file.name.length);\r\n                if(substr1== \"xlsx\" || substr2 == \"xls\"){\r\n                  readExcel(file); \r\n                }\r\n                else{\r\n                  alert(\"Please Upload Excel file\")\r\n                  return;\r\n                }\r\n               \r\n              }}\r\n              maxFileSize={2000000} filesLimit={1} showFileNames={true}\r\n              />\r\n              <p  style={{color:\"red\"}}>Note-:Please upload Excel file .</p>\r\n              <p  style={{color:\"red\"}}>and size should not be greater than 2mb.</p>\r\n            </TableCell>\r\n            </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n            <br /> <br />\r\n           \r\n              <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"small\" disabled={disabled} onSubmit={uploadDocuments}\r\n                    // disabled={this.state.file==null || this.state.typeOfDocument=='' || this.state.documentType==''?true:false}\r\n             >Upload Document</Button>\r\n             </Grid>\r\n\r\n\r\n\r\n\r\n             <br />  <br />  <br />\r\n\r\n             <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n             <Button color=\"primary\"  onClick={routeChange}>\r\n               Go to History\r\n             </Button>\r\n             </Grid>\r\n            </Grid>\r\n       \r\n        )\r\n}   "]},"metadata":{},"sourceType":"module"}