{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\Reports.js\";\nimport React, { Component } from 'react'; //import axios from 'axios';  \n\nimport { SingleSelect } from \"react-select-material-ui\";\nimport { Multiselect } from 'multiselect-react-dropdown'; //import ReactHTMLTableToExcel from 'react-html-table-to-excel';  \n\nimport { fetchCentersOfUser, fetchCentersDetails, getReports, downloadReports, fetchBatchDetails } from './../util/api';\nimport { isNotEmpty, isNotZero } from './../util/validation';\nimport AlertDialog from './../util/AlertDialog';\nimport UserContext from '../components/GolbalContext';\nimport Button from '@material-ui/core/Button';\nimport { FormControl, InputLabel, FormControlLabel, Input, Grid, RadioGroup, Radio, TextField } from '@material-ui/core';\nimport MUIDataTable from \"mui-datatables\";\nimport { serviceEndPoint } from './../util/serviceEndPoint';\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.report = () => {\n      let errors = this.state.errors;\n\n      if (this.validateForm(errors)) {\n        getReports(this.state.pageNumber, this.state.pageSize, this.state.centerId, this.state.startDate, this.state.endDate, this.state.studentEngagementStatus, this.state.batchId).then(jsondata => {\n          let reportData = [];\n          let objects = JSON.parse(jsondata.data);\n          objects.forEach(object => {\n            reportData.push({\n              \"engagementId\": object.engagementId,\n              \"Name\": object.firstName + \" \" + object.lastName,\n              \"PrimaryContactNumber\": object.primaryContactNumber,\n              \"studentEngagementStatus\": object.studentEngagementStatus,\n              \"studentCreatedOn\": object.studentCreatedOn,\n              \"enrolledDate\": object.enrolledDate,\n              \"batchName\": object.batchName,\n              \"aadharNo\": object.aadharNo.replace(/\\d(?=\\d{4})/g, \"*\"),\n              \"dob\": object.dob,\n              \"maritalStatus\": object.maritalStatus\n            });\n          });\n          this.setState({\n            report: reportData\n          });\n        });\n      }\n    };\n\n    this.downloadReport = () => {\n      downloadReports(this.state.pageNumber, this.state.pageSize, this.state.centerId, this.state.startDate, this.state.endDate, this.state.studentEngagementStatus, this.state.batchId).then(jsondata => {\n        let object = JSON.parse(jsondata.data);\n        var url = serviceEndPoint.mdmdownloadDocument + object[0].reportName + \"\";\n        window.open(url, \"_blank\");\n      });\n    };\n\n    this.previous = () => {\n      let previous = this.state.pageNumber - 1;\n      this.setState({\n        pageNumber: previous\n      });\n      this.report();\n    };\n\n    this.next = () => {\n      let next = this.state.pageNumber + 1;\n      this.setState({\n        pageNumber: next\n      });\n      this.report();\n    };\n\n    this.validate = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'centerId':\n          errors.centerId = isNotEmpty(value);\n          break;\n\n        case 'studentEngagementStatus':\n          errors.studentEngagementStatus = isNotEmpty(value);\n          break;\n\n        case 'startDate':\n          errors.startDate = isNotEmpty(value) != \"\" ? isNotEmpty(value) : this.inMonths(new Date(this.state.startDate), new Date(this.state.endDate)) <= 13 ? \"\" : \"dates gap should not be more than 12 months\";\n          break;\n\n        case 'endDate':\n          errors.endDate = isNotEmpty(value);\n          break;\n\n        case 'batchId':\n          errors.batchId = isNotZero(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validateForm = errors => {\n      errors.centerId = \"\";\n      errors.studentEngagementStatus = \"\";\n      errors.startDate = \"\";\n      errors.endDate = \"\";\n      errors.batchId = 0;\n      this.setState({\n        errors\n      });\n      this.validate(\"centerId\", this.state.centerId);\n      this.validate(\"studentEngagementStatus\", this.state.studentEngagementStatus);\n\n      if (this.state.studentEngagementStatus === \"Mobilised\") {\n        this.validate(\"startDate\", this.state.startDate);\n        this.validate(\"endDate\", this.state.endDate);\n      }\n\n      if (this.state.studentEngagementStatus === \"Enrolled\") {\n        if (this.state.batchId === 0) {\n          this.validate(\"startDate\", this.state.startDate);\n          this.validate(\"endDate\", this.state.endDate);\n        } else {\n          this.validate(\"batchId\", this.state.batchId);\n        }\n      }\n\n      let valid = true;\n      Object.values(this.state.errors).forEach( // if we have an error string set valid to false\n      val => val.length > 0 && (valid = false));\n      return valid;\n    };\n\n    this.resetForm = () => {\n      this.setState({\n        \"centerId\": ''\n      });\n      this.setState({\n        \"studentEngagementStatus\": ''\n      });\n      this.setState({\n        \"startDate\": ''\n      });\n      this.setState({\n        \"endDate\": ''\n      });\n      this.setState({\n        \"batchId\": 0\n      });\n      this.setState({\n        \"report\": []\n      });\n    };\n\n    this.inMonths = (d1, d2) => {\n      var d1Y = d1.getFullYear();\n      var d2Y = d2.getFullYear();\n      var d1M = d1.getMonth();\n      var d2M = d2.getMonth();\n      return d2M + 12 * d2Y - (d1M + 12 * d1Y);\n    };\n\n    this.state = {\n      report: [],\n      pageNumber: 1,\n      pageSize: 20,\n      ProductData: [],\n      center: [],\n      centerId: '',\n      userScope: [],\n      errors: {\n        centerName: ''\n      },\n      reportName: '',\n      reportOptions: [{\n        label: \"Mobilisation\",\n        value: \"Mobilised\"\n      }, {\n        label: \"Enrolled\",\n        value: \"Enrolled\"\n      }],\n      startDate: '',\n      endDate: '',\n      studentEngagementStatus: '',\n      errors: {\n        studentEngagementStatus: '',\n        centerId: '',\n        startDate: '',\n        endDate: '',\n        batchId: ''\n      },\n      batchDetails: [],\n      batchId: 0\n    };\n    let centerId = [];\n    let currentComponent = this;\n    fetchCentersOfUser(UserContext.userid).then(jsondata => {\n      let userJsonObjects = JSON.parse(jsondata.data);\n      currentComponent.setState({\n        userScope: userJsonObjects\n      });\n      userJsonObjects.forEach(user => {\n        centerId.push({\n          \"id\": user.centerId\n        });\n      });\n    }).then(function (result) {\n      let centerDetails = [];\n      fetchCentersDetails(JSON.stringify(centerId)).then(jsondata => {\n        let centerObjects = JSON.parse(jsondata.data);\n        centerObjects.forEach(center => {\n          centerDetails.push({\n            label: center.name,\n            value: center.id\n          });\n        });\n        currentComponent.setState({\n          center: centerDetails\n        });\n      });\n    });\n  }\n\n  handleSelectChange(selectname, event) {\n    this.setState({\n      [selectname]: event\n    }); //  this.validate(selectname,event);\n\n    if (selectname === \"centerId\") {\n      this.batchDetails(event);\n    }\n  }\n\n  handleStartDateInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    }); // if(this.state.endDate===\"\"){\n    // var d = new Date(value);   \n    // d.setMonth(d.getMonth() + 6); \n    // let endDate=d.getFullYear()+\"-\"+('0' +d.getMonth()).slice(-2)+\"-\"+('0' +d.getDate()).slice(-2);\n    // this.setState({endDate:endDate});\n    // }\n  }\n\n  handleEndDateInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    }); //  this.validate(name,value);\n    //   if(this.state.startDate===\"\"){\n    // var d = new Date(value);   \n    // d.setMonth(d.getMonth() - 6); \n    // let startDate=d.getFullYear()+\"-\"+('0' +d.getMonth()).slice(-2)+\"-\"+('0' +d.getDate()).slice(-2);\n    // this.setState({startDate:startDate});  \n    //   }\n  }\n\n  batchDetails(centerId) {\n    fetchBatchDetails(centerId).then(jsondata => {\n      let batchs = [];\n      let objects = JSON.parse(jsondata.data);\n      objects.forEach(object => {\n        batchs.push({\n          label: object.batchName,\n          value: object.batchId\n        });\n      });\n      this.setState({\n        batchDetails: batchs\n      });\n    });\n  }\n\n  render() {\n    const options = {\n      selectableRows: false,\n      rowsPerPage: 20,\n      print: false,\n      download: false,\n      pagination: false\n    };\n    const columns = [{\n      label: 'Engagement Id',\n      name: \"engagementId\"\n    }, {\n      name: \"Name\"\n    }, {\n      name: \"PrimaryContactNumber\"\n    }, {\n      label: 'Status',\n      name: 'studentEngagementStatus'\n    }, {\n      label: 'Mobilised Date',\n      name: 'studentCreatedOn'\n    }, {\n      label: 'Enrolled Date',\n      name: 'enrolledDate'\n    }, {\n      label: 'Batch Name',\n      name: 'batchName'\n    }, {\n      name: \"aadharNo\",\n      options: {\n        display: false\n      }\n    }, {\n      name: \"dob\",\n      options: {\n        display: false\n      }\n    }, {\n      name: \"maritalStatus\",\n      options: {\n        display: false\n      }\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      method: \"get\",\n      id: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, \"Center Name\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"centerName\",\n      id: \"centerName\",\n      options: this.state.center,\n      onChange: this.handleSelectChange.bind(this, 'centerId'),\n      value: this.state.centerId || '',\n      error: this.state.errors.centerId == '' ? false : true,\n      helperText: this.state.errors.centerId,\n      key: this.state.centerId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, \"Report Name\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"studentEngagementStatus\",\n      id: \"studentEngagementStatus\",\n      options: this.state.reportOptions,\n      onChange: this.handleSelectChange.bind(this, 'studentEngagementStatus'),\n      value: this.state.studentEngagementStatus || '',\n      error: this.state.errors.studentEngagementStatus == '' ? false : true,\n      helperText: this.state.errors.studentEngagementStatus,\n      key: this.state.studentEngagementStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"date\",\n      name: \"startDate\",\n      id: \"startDate\",\n      label: \" Start Date\",\n      type: \"date\",\n      onChange: this.handleStartDateInputChange.bind(this),\n      inputProps: {\n        max: new Date().toISOString().slice(0, 10)\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      error: this.state.errors.startDate == '' ? false : true,\n      helperText: this.state.errors.startDate,\n      value: this.state.startDate || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 10\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"date\",\n      name: \"endDate\",\n      id: \"endDate\",\n      label: \"End Date\",\n      type: \"date\",\n      onChange: this.handleEndDateInputChange.bind(this),\n      inputProps: {\n        max: new Date().toISOString().slice(0, 10)\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      error: this.state.errors.endDate == '' ? false : true,\n      helperText: this.state.errors.endDate,\n      value: this.state.endDate || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 10\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 6\n      }\n    }), this.state.studentEngagementStatus === 'Enrolled' && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 6\n      }\n    }, \"(OR)\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 1\n      }\n    }), this.state.studentEngagementStatus === 'Enrolled' && /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }\n    }, \"Batch Name\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"'batchId'\",\n      id: \"batchId\",\n      options: this.state.batchDetails,\n      onChange: this.handleSelectChange.bind(this, 'batchId'),\n      value: this.state.batchId || '',\n      error: this.state.errors.batchId == '' ? false : true,\n      helperText: this.state.errors.batchId,\n      key: this.state.batchId //    disabled={this.state.studentEngagementStatus!='Enrolled'}  \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      onClick: this.report,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 1\n      }\n    }, \"View Report\"), \"\\xA0\\xA0\", /*#__PURE__*/React.createElement(Button, {\n      onClick: this.resetForm,\n      variant: \"contained\",\n      size: \"small\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 1\n      }\n    }, \"Reset\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(MUIDataTable, {\n      title: \"Student Details\",\n      data: this.state.report,\n      columns: columns,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      onClick: this.previous,\n      disabled: this.state.pageNumber === 1 ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 1\n      }\n    }, \"Previous\"), \"\\xA0\\xA0\", /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      onClick: this.next,\n      disabled: this.state.report.length <= 20 ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 1\n      }\n    }, \"Next\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      id: \"btn\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      size: \"small\",\n      color: \"primary\",\n      onClick: this.downloadReport,\n      disabled: this.state.report.length === 0 ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 1\n      }\n    }, \"Download Excel\")));\n  }\n\n}\nexport default ExportExcel; // import React from 'react';\n// import { withStyles } from '@material-ui/core/styles';\n// import { green } from '@material-ui/core/colors';\n// import FormGroup from '@material-ui/core/FormGroup';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\n// import Favorite from '@material-ui/icons/Favorite';\n// import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n// import { FormControl , InputLabel, Input, Grid , RadioGroup, Radio, TextField}  from '@material-ui/core';\n// import { SingleSelect } from \"react-select-material-ui\";\n// const GreenCheckbox = withStyles({\n//   root: {\n//     color: green[400],\n//     '&$checked': {\n//       color: green[600],\n//     },\n//   },\n//   checked: {},\n// })((props) => <Checkbox color=\"default\" {...props} />);\n// export default function CheckboxLabels() {\n//   const [state, setState] = React.useState({\n//     checkedA: true,\n//     checkedB: true,\n//     checkedF: true,\n//     checkedG: true,\n//   });\n//   const handleChange = (event) => {\n//     setState({ ...state, [event.target.name]: event.target.checked });\n//   };\n//   return (\n//     <FormGroup row>\n//   <Grid item xs={12} sm={4} alignContent=\"center\"  >\n//      <SingleSelect\n//               placeholder = \"Select Report\" required\n//               //options={this.myData.reportType}\n//             />\n//             </Grid>\n// <Grid item xs={12} sm={3} id = \"\">\n//          <TextField id=\"date\" name = \"\" id = \"\"\n//          label=\"Start Date\" \n//          type=\"date\"\n//          inputProps={{ max: new Date().toISOString().slice(0,10)}}\n//          InputLabelProps={{\n//            shrink: true,\n//          }} />\n//      </Grid>\n//      <Grid item xs={12} sm={3} id = \"\">\n//          <TextField id=\"date\" name = \"\" id = \"\"\n//          label=\"End Date\" \n//          type=\"date\"\n//          inputProps={{ max: new Date().toISOString().slice(0,10)}}\n//          InputLabelProps={{\n//            shrink: true,\n//          }} />\n//      </Grid>\n//      <Grid item xs={12} sm={3} id = \"\"></Grid>\n//      <br></br>\n//      <FormControlLabel\n//         control={\n//           <Checkbox\n//            // checked={state.checkedB}\n//             onChange={handleChange}\n//             name=\"checkedB\"\n//             color=\"primary\"\n//           />\n//         }\n//         label=\"First Name\"\n//       />\n//       <FormControlLabel\n//         control={\n//           <Checkbox\n//            // checked={state.checkedB}\n//             onChange={handleChange}\n//             name=\"checkedB\"\n//             color=\"primary\"\n//           />\n//         }\n//         label=\"Last Name\"\n//       />\n//       <FormControlLabel\n//         control={\n//           <Checkbox\n//           //  checked={state.checkedB}\n//             onChange={handleChange}\n//             name=\"checkedB\"\n//             color=\"primary\"\n//           />\n//         }\n//         label=\"Eng ID\"\n//       />\n// <FormControlLabel\n//       control={\n//         <Checkbox\n//          // checked={state.checkedB}\n//           onChange={handleChange}\n//           name=\"checkedB\"\n//           color=\"primary\"\n//         />\n//       }\n//       label=\"DOB\"\n//     />\n//     <FormControlLabel\n//         control={\n//           <Checkbox\n//             //checked={state.checkedB}\n//             onChange={handleChange}\n//             name=\"checked\"\n//             color=\"primary\"\n//           />\n//         }\n//         label=\"Gender\"\n//       />\n//     </FormGroup>\n//   );\n// }","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/Reports.js"],"names":["React","Component","SingleSelect","Multiselect","fetchCentersOfUser","fetchCentersDetails","getReports","downloadReports","fetchBatchDetails","isNotEmpty","isNotZero","AlertDialog","UserContext","Button","FormControl","InputLabel","FormControlLabel","Input","Grid","RadioGroup","Radio","TextField","MUIDataTable","serviceEndPoint","ExportExcel","constructor","props","report","errors","state","validateForm","pageNumber","pageSize","centerId","startDate","endDate","studentEngagementStatus","batchId","then","jsondata","reportData","objects","JSON","parse","data","forEach","object","push","engagementId","firstName","lastName","primaryContactNumber","studentCreatedOn","enrolledDate","batchName","aadharNo","replace","dob","maritalStatus","setState","downloadReport","url","mdmdownloadDocument","reportName","window","open","previous","next","validate","name","value","inMonths","Date","valid","Object","values","val","length","resetForm","d1","d2","d1Y","getFullYear","d2Y","d1M","getMonth","d2M","ProductData","center","userScope","centerName","reportOptions","label","batchDetails","currentComponent","userid","userJsonObjects","user","result","centerDetails","stringify","centerObjects","id","handleSelectChange","selectname","event","handleStartDateInputChange","target","handleEndDateInputChange","batchs","render","options","selectableRows","rowsPerPage","print","download","pagination","columns","display","width","bind","max","toISOString","slice","shrink","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B,C,CACA;;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAiDC,UAAjD,EAA4DC,eAA5D,EAA4EC,iBAA5E,QAAoG,eAApG;AACA,SAASC,UAAT,EAAoBC,SAApB,QAAqC,sBAArC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,WAAT,EAAuBC,UAAvB,EAAkCC,gBAAlC,EAAoDC,KAApD,EAA2DC,IAA3D,EAAkEC,UAAlE,EAA8EC,KAA9E,EAAqFC,SAArF,QAAsG,mBAAtG;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,OAAO,MAAMC,WAAN,SAA0BvB,SAA1B,CAAoC;AACnCwB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACX,UAAMA,KAAN;;AADW,SAqClBC,MArCkB,GAqCV,MAAI;AACX,UAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAAxB;;AACA,UAAG,KAAKE,YAAL,CAAkBF,MAAlB,CAAH,EAA6B;AACnCtB,QAAAA,UAAU,CAAC,KAAKuB,KAAL,CAAWE,UAAZ,EAAuB,KAAKF,KAAL,CAAWG,QAAlC,EAA2C,KAAKH,KAAL,CAAWI,QAAtD,EAA+D,KAAKJ,KAAL,CAAWK,SAA1E,EAAoF,KAAKL,KAAL,CAAWM,OAA/F,EAAuG,KAAKN,KAAL,CAAWO,uBAAlH,EAA0I,KAAKP,KAAL,CAAWQ,OAArJ,CAAV,CAAwKC,IAAxK,CAA8KC,QAAD,IAAc;AAC3L,cAAIC,UAAU,GAAC,EAAf;AACE,cAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,CAACK,IAApB,CAAd;AACFH,UAAAA,OAAO,CAACI,OAAR,CAAgBC,MAAM,IAAI;AACxBN,YAAAA,UAAU,CAACO,IAAX,CAAgB;AAAC,8BAAeD,MAAM,CAACE,YAAvB;AAAoC,sBAAOF,MAAM,CAACG,SAAP,GAAiB,GAAjB,GAAqBH,MAAM,CAACI,QAAvE;AAAgF,sCAAuBJ,MAAM,CAACK,oBAA9G;AAChB,yCAA0BL,MAAM,CAACV,uBADjB;AACyC,kCAAmBU,MAAM,CAACM,gBADnE;AAEhB,8BAAeN,MAAM,CAACO,YAFN;AAEmB,2BAAYP,MAAM,CAACQ,SAFtC;AAGhB,0BAAWR,MAAM,CAACS,QAAP,CAAgBC,OAAhB,CAAwB,cAAxB,EAAwC,GAAxC,CAHK;AAIlB,qBAAMV,MAAM,CAACW,GAJK;AAID,+BAAgBX,MAAM,CAACY;AAJtB,aAAhB;AAKD,WAND;AAOA,eAAKC,QAAL,CAAc;AAAEhC,YAAAA,MAAM,EAAEa;AAAV,WAAd;AACD,SAXC;AAYH;AACG,KArDuB;;AAAA,SAwDxBoB,cAxDwB,GAwDT,MAAI;AAClBrD,MAAAA,eAAe,CAAC,KAAKsB,KAAL,CAAWE,UAAZ,EAAuB,KAAKF,KAAL,CAAWG,QAAlC,EAA2C,KAAKH,KAAL,CAAWI,QAAtD,EAA+D,KAAKJ,KAAL,CAAWK,SAA1E,EAAoF,KAAKL,KAAL,CAAWM,OAA/F,EAAuG,KAAKN,KAAL,CAAWO,uBAAlH,EAA0I,KAAKP,KAAL,CAAWQ,OAArJ,CAAf,CAA6KC,IAA7K,CAAmLC,QAAD,IAAc;AAC5L,YAAIO,MAAM,GAAGJ,IAAI,CAACC,KAAL,CAAWJ,QAAQ,CAACK,IAApB,CAAb;AACA,YAAIiB,GAAG,GAACtC,eAAe,CAACuC,mBAAhB,GAAoChB,MAAM,CAAC,CAAD,CAAN,CAAUiB,UAA9C,GAAyD,EAAjE;AACAC,QAAAA,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiB,QAAjB;AACH,OAJD;AAMA,KA/DuB;;AAAA,SAmExBK,QAnEwB,GAmEd,MAAI;AACZ,UAAIA,QAAQ,GAAC,KAAKrC,KAAL,CAAWE,UAAX,GAAsB,CAAnC;AACL,WAAK4B,QAAL,CAAc;AAAC5B,QAAAA,UAAU,EAACmC;AAAZ,OAAd;AACA,WAAKvC,MAAL;AACS,KAvEkB;;AAAA,SA0EnBwC,IA1EmB,GA0Eb,MAAI;AACR,UAAIA,IAAI,GAAC,KAAKtC,KAAL,CAAWE,UAAX,GAAsB,CAA/B;AACL,WAAK4B,QAAL,CAAc;AAAC5B,QAAAA,UAAU,EAACoC;AAAZ,OAAd;AACA,WAAKxC,MAAL;AACS,KA9Ea;;AAAA,SAiIfyC,QAjIe,GAiIJ,CAACC,IAAD,EAAMC,KAAN,KAAc;AACvB,UAAI1C,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAAxB;;AACA,cAAQyC,IAAR;AACE,aAAK,UAAL;AAAiBzC,UAAAA,MAAM,CAACK,QAAP,GAAiBxB,UAAU,CAAC6D,KAAD,CAA3B;AACf;;AACF,aAAK,yBAAL;AAAgC1C,UAAAA,MAAM,CAACQ,uBAAP,GAAiC3B,UAAU,CAAC6D,KAAD,CAA3C;AAC9B;;AACF,aAAK,WAAL;AAAkB1C,UAAAA,MAAM,CAACM,SAAP,GAAkBzB,UAAU,CAAC6D,KAAD,CAAV,IAAmB,EAAnB,GAAsB7D,UAAU,CAAC6D,KAAD,CAAhC,GAAwC,KAAKC,QAAL,CAAc,IAAIC,IAAJ,CAAS,KAAK3C,KAAL,CAAWK,SAApB,CAAd,EAA6C,IAAIsC,IAAJ,CAAS,KAAK3C,KAAL,CAAWM,OAApB,CAA7C,KAA4E,EAA5E,GAA+E,EAA/E,GAAkF,6CAA5I;AAChB;;AACF,aAAK,SAAL;AAAgBP,UAAAA,MAAM,CAACO,OAAP,GAAkB1B,UAAU,CAAC6D,KAAD,CAA5B;AACd;;AACA,aAAK,SAAL;AAAgB1C,UAAAA,MAAM,CAACS,OAAP,GAAkB3B,SAAS,CAAC4D,KAAD,CAA3B;AAChB;;AACF;AACA;AAZF;;AAcD,WAAKX,QAAL,CAAc;AAAC/B,QAAAA;AAAD,OAAd;AACA,KAlJc;;AAAA,SAoJfE,YApJe,GAoJCF,MAAD,IAAY;AACzBA,MAAAA,MAAM,CAACK,QAAP,GAAgB,EAAhB;AACAL,MAAAA,MAAM,CAACQ,uBAAP,GAA+B,EAA/B;AACAR,MAAAA,MAAM,CAACM,SAAP,GAAiB,EAAjB;AACAN,MAAAA,MAAM,CAACO,OAAP,GAAe,EAAf;AACAP,MAAAA,MAAM,CAACS,OAAP,GAAe,CAAf;AACA,WAAKsB,QAAL,CAAc;AAAC/B,QAAAA;AAAD,OAAd;AACA,WAAKwC,QAAL,CAAc,UAAd,EAAyB,KAAKvC,KAAL,CAAWI,QAApC;AACA,WAAKmC,QAAL,CAAc,yBAAd,EAAwC,KAAKvC,KAAL,CAAWO,uBAAnD;;AACC,UAAG,KAAKP,KAAL,CAAWO,uBAAX,KAAqC,WAAxC,EAAoD;AACrD,aAAKgC,QAAL,CAAc,WAAd,EAA0B,KAAKvC,KAAL,CAAWK,SAArC;AACA,aAAKkC,QAAL,CAAc,SAAd,EAAwB,KAAKvC,KAAL,CAAWM,OAAnC;AACE;;AACD,UAAG,KAAKN,KAAL,CAAWO,uBAAX,KAAqC,UAAxC,EAAmD;AACjD,YAAG,KAAKP,KAAL,CAAWQ,OAAX,KAAqB,CAAxB,EAA0B;AACzB,eAAK+B,QAAL,CAAc,WAAd,EAA0B,KAAKvC,KAAL,CAAWK,SAArC;AACA,eAAKkC,QAAL,CAAc,SAAd,EAAwB,KAAKvC,KAAL,CAAWM,OAAnC;AACA,SAHD,MAII;AACH,eAAKiC,QAAL,CAAc,SAAd,EAAwB,KAAKvC,KAAL,CAAWQ,OAAnC;AACA;AACH;;AAED,UAAIoC,KAAK,GAAG,IAAZ;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAK9C,KAAL,CAAWD,MAAzB,EAAiCiB,OAAjC,EACE;AACC+B,MAAAA,GAAD,IAASA,GAAG,CAACC,MAAJ,GAAa,CAAb,KAAmBJ,KAAK,GAAG,KAA3B,CAFX;AAIA,aAAOA,KAAP;AACD,KAjLc;;AAAA,SAkLfK,SAlLe,GAkLH,MAAM;AAChB,WAAKnB,QAAL,CAAc;AAAC,oBAAW;AAAZ,OAAd;AACA,WAAKA,QAAL,CAAc;AAAC,mCAA0B;AAA3B,OAAd;AACA,WAAKA,QAAL,CAAc;AAAC,qBAAY;AAAb,OAAd;AACA,WAAKA,QAAL,CAAc;AAAC,mBAAU;AAAX,OAAd;AACA,WAAKA,QAAL,CAAc;AAAC,mBAAU;AAAX,OAAd;AACA,WAAKA,QAAL,CAAc;AAAC,kBAAS;AAAV,OAAd;AACD,KAzLc;;AAAA,SA2LdY,QA3Lc,GA2LL,CAACQ,EAAD,EAAKC,EAAL,KAAW;AACnB,UAAIC,GAAG,GAAGF,EAAE,CAACG,WAAH,EAAV;AACA,UAAIC,GAAG,GAAGH,EAAE,CAACE,WAAH,EAAV;AACA,UAAIE,GAAG,GAAGL,EAAE,CAACM,QAAH,EAAV;AACA,UAAIC,GAAG,GAAGN,EAAE,CAACK,QAAH,EAAV;AACA,aAAQC,GAAG,GAAC,KAAGH,GAAR,IAAcC,GAAG,GAAC,KAAGH,GAArB,CAAP;AACH,KAjMgB;;AAEX,SAAKpD,KAAL,GAAa;AACXF,MAAAA,MAAM,EAAC,EADI;AACDI,MAAAA,UAAU,EAAC,CADV;AACYC,MAAAA,QAAQ,EAAC,EADrB;AACwBuD,MAAAA,WAAW,EAAE,EADrC;AAC0CC,MAAAA,MAAM,EAAE,EADlD;AACsDvD,MAAAA,QAAQ,EAAE,EADhE;AACoEwD,MAAAA,SAAS,EAAE,EAD/E;AAEL7D,MAAAA,MAAM,EAAE;AAAC8D,QAAAA,UAAU,EAAC;AAAZ,OAFH;AAEmB3B,MAAAA,UAAU,EAAC,EAF9B;AAGL4B,MAAAA,aAAa,EAAE,CACb;AAAEC,QAAAA,KAAK,EAAE,cAAT;AAAwBtB,QAAAA,KAAK,EAAE;AAA/B,OADa,EAEb;AAAEsB,QAAAA,KAAK,EAAE,UAAT;AAAqBtB,QAAAA,KAAK,EAAE;AAA5B,OAFa,CAHV;AAMHpC,MAAAA,SAAS,EAAC,EANP;AAMUC,MAAAA,OAAO,EAAC,EANlB;AAMqBC,MAAAA,uBAAuB,EAAC,EAN7C;AAOLR,MAAAA,MAAM,EAAE;AAACQ,QAAAA,uBAAuB,EAAE,EAA1B;AAA6BH,QAAAA,QAAQ,EAAC,EAAtC;AAAyCC,QAAAA,SAAS,EAAE,EAApD;AAAuDC,QAAAA,OAAO,EAAC,EAA/D;AAAkEE,QAAAA,OAAO,EAAC;AAA1E,OAPH;AAQLwD,MAAAA,YAAY,EAAC,EARR;AAQWxD,MAAAA,OAAO,EAAC;AARnB,KAAb;AAWA,QAAIJ,QAAQ,GAAG,EAAf;AACA,QAAI6D,gBAAgB,GAAG,IAAvB;AAEA1F,IAAAA,kBAAkB,CAACQ,WAAW,CAACmF,MAAb,CAAlB,CAAuCzD,IAAvC,CAA6CC,QAAD,IAAc;AACxD,UAAIyD,eAAe,GAAGtD,IAAI,CAACC,KAAL,CAAWJ,QAAQ,CAACK,IAApB,CAAtB;AACAkD,MAAAA,gBAAgB,CAACnC,QAAjB,CAA0B;AAAE8B,QAAAA,SAAS,EAAEO;AAAb,OAA1B;AACAA,MAAAA,eAAe,CAACnD,OAAhB,CAAwBoD,IAAI,IAAI;AAC9BhE,QAAAA,QAAQ,CAACc,IAAT,CAAc;AAAE,gBAAMkD,IAAI,CAAChE;AAAb,SAAd;AACD,OAFD;AAGD,KAND,EAMGK,IANH,CAMQ,UAAU4D,MAAV,EAAkB;AACxB,UAAIC,aAAa,GAAG,EAApB;AACA9F,MAAAA,mBAAmB,CAACqC,IAAI,CAAC0D,SAAL,CAAenE,QAAf,CAAD,CAAnB,CAA8CK,IAA9C,CAAoDC,QAAD,IAAc;AAC/D,YAAI8D,aAAa,GAAG3D,IAAI,CAACC,KAAL,CAAWJ,QAAQ,CAACK,IAApB,CAApB;AACAyD,QAAAA,aAAa,CAACxD,OAAd,CAAsB2C,MAAM,IAAI;AAC9BW,UAAAA,aAAa,CAACpD,IAAd,CAAmB;AAAE6C,YAAAA,KAAK,EAAEJ,MAAM,CAACnB,IAAhB;AAAsBC,YAAAA,KAAK,EAAEkB,MAAM,CAACc;AAApC,WAAnB;AACD,SAFD;AAGAR,QAAAA,gBAAgB,CAACnC,QAAjB,CAA0B;AAAE6B,UAAAA,MAAM,EAAEW;AAAV,SAA1B;AACD,OAND;AASD,KAjBD;AAmBP;;AA8CII,EAAAA,kBAAkB,CAACC,UAAD,EAAaC,KAAb,EAAoB;AACrC,SAAK9C,QAAL,CAAc;AAAC,OAAC6C,UAAD,GAAaC;AAAd,KAAd,EADqC,CAEvC;;AACC,QAAGD,UAAU,KAAG,UAAhB,EAA2B;AAC1B,WAAKX,YAAL,CAAkBY,KAAlB;AACA;AACD;;AAEDC,EAAAA,0BAA0B,CAACD,KAAD,EAAQ;AAChC,UAAME,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMrC,KAAK,GAAIqC,MAAM,CAACrC,KAAtB;AACA,UAAMD,IAAI,GAAGsC,MAAM,CAACtC,IAApB;AACA,SAAKV,QAAL,CAAc;AAAC,OAACU,IAAD,GAAQC;AAAT,KAAd,EAJgC,CAMlC;AACA;AACA;AACA;AACA;AACA;AACD;;AAECsC,EAAAA,wBAAwB,CAACH,KAAD,EAAQ;AAC9B,UAAME,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMrC,KAAK,GAAIqC,MAAM,CAACrC,KAAtB;AACA,UAAMD,IAAI,GAAGsC,MAAM,CAACtC,IAApB;AACA,SAAKV,QAAL,CAAc;AAAC,OAACU,IAAD,GAAQC;AAAT,KAAd,EAJ8B,CAKhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;;AAECuB,EAAAA,YAAY,CAAC5D,QAAD,EAAU;AACtBzB,IAAAA,iBAAiB,CAACyB,QAAD,CAAjB,CAA4BK,IAA5B,CAAkCC,QAAD,IAAY;AAC3C,UAAIsE,MAAM,GAAC,EAAX;AACA,UAAKpE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,CAACK,IAApB,CAAf;AACAH,MAAAA,OAAO,CAACI,OAAR,CAAgBC,MAAM,IAAI;AACxB+D,QAAAA,MAAM,CAAC9D,IAAP,CAAY;AAAE6C,UAAAA,KAAK,EAAE9C,MAAM,CAACQ,SAAhB;AAA2BgB,UAAAA,KAAK,EAAExB,MAAM,CAACT;AAAzC,SAAZ;AACD,OAFD;AAGA,WAAKsB,QAAL,CAAc;AAACkC,QAAAA,YAAY,EAACgB;AAAd,OAAd;AACA,KAPF;AAQC;;AAqELC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG;AAACC,MAAAA,cAAc,EAAG,KAAlB;AAAwBC,MAAAA,WAAW,EAAE,EAArC;AAAwCC,MAAAA,KAAK,EAAE,KAA/C;AAAqDC,MAAAA,QAAQ,EAAE,KAA/D;AACdC,MAAAA,UAAU,EAAC;AADG,KAAhB;AAEA,UAAMC,OAAO,GAAG,CAAC;AAACzB,MAAAA,KAAK,EAAE,eAAR;AAAwBvB,MAAAA,IAAI,EAAC;AAA7B,KAAD,EAChB;AAACA,MAAAA,IAAI,EAAC;AAAN,KADgB,EAEhB;AAACA,MAAAA,IAAI,EAAC;AAAN,KAFgB,EAGhB;AAACuB,MAAAA,KAAK,EAAE,QAAR;AAAkBvB,MAAAA,IAAI,EAAE;AAAxB,KAHgB,EAIhB;AAACuB,MAAAA,KAAK,EAAE,gBAAR;AAA0BvB,MAAAA,IAAI,EAAE;AAAhC,KAJgB,EAKhB;AAACuB,MAAAA,KAAK,EAAE,eAAR;AAAyBvB,MAAAA,IAAI,EAAE;AAA/B,KALgB,EAMhB;AAACuB,MAAAA,KAAK,EAAE,YAAR;AAAsBvB,MAAAA,IAAI,EAAE;AAA5B,KANgB,EAOhB;AAACA,MAAAA,IAAI,EAAC,UAAN;AAAiB0C,MAAAA,OAAO,EAAE;AAACO,QAAAA,OAAO,EAAE;AAAV;AAA1B,KAPgB,EAO4B;AAACjD,MAAAA,IAAI,EAAC,KAAN;AAAY0C,MAAAA,OAAO,EAAE;AAACO,QAAAA,OAAO,EAAE;AAAV;AAArB,KAP5B,EAOmE;AAACjD,MAAAA,IAAI,EAAC,eAAN;AAAsB0C,MAAAA,OAAO,EAAE;AAACO,QAAAA,OAAO,EAAE;AAAV;AAA/B,KAPnE,CAAhB;AASA,wBACQ;AAAK,MAAA,KAAK,EAAI;AAAEC,QAAAA,KAAK,EAAG;AAAV,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAO,MAAA,MAAM,EAAC,KAAd;AAAoB,MAAA,EAAE,EAAC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACH,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADG,eAEH,oBAAC,YAAD;AAAc,MAAA,WAAW,EAAE,IAA3B;AACE,MAAA,IAAI,EAAC,YADP;AACoB,MAAA,EAAE,EAAC,YADvB;AAEE,MAAA,OAAO,EAAE,KAAK1F,KAAL,CAAW2D,MAFtB;AAGE,MAAA,QAAQ,EAAE,KAAKe,kBAAL,CAAwBiB,IAAxB,CAA6B,IAA7B,EAAmC,UAAnC,CAHZ;AAIE,MAAA,KAAK,EAAE,KAAK3F,KAAL,CAAWI,QAAX,IAAuB,EAJhC;AAKE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWD,MAAX,CAAkBK,QAAlB,IAA4B,EAA5B,GAA+B,KAA/B,GAAqC,IAL9C;AAME,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWD,MAAX,CAAkBK,QANhC;AAOE,MAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWI,QAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFG,CADD,eAaJ,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,oBAAC,YAAD;AAAc,MAAA,WAAW,EAAE,IAA3B;AACE,MAAA,IAAI,EAAC,yBADP;AACiC,MAAA,EAAE,EAAC,yBADpC;AAEE,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAW8D,aAFtB;AAGC,MAAA,QAAQ,EAAE,KAAKY,kBAAL,CAAwBiB,IAAxB,CAA6B,IAA7B,EAAmC,yBAAnC,CAHX;AAIE,MAAA,KAAK,EAAE,KAAK3F,KAAL,CAAWO,uBAAX,IAAsC,EAJ/C;AAKE,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWD,MAAX,CAAkBQ,uBAAlB,IAA2C,EAA3C,GAA8C,KAA9C,GAAoD,IAL7D;AAME,MAAA,UAAU,EAAE,KAAKP,KAAL,CAAWD,MAAX,CAAkBQ,uBANhC;AAOE,MAAA,GAAG,EAAE,KAAKP,KAAL,CAAWO,uBAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAbI,eAyBb,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAG,WAA5B;AAAwC,MAAA,EAAE,EAAG,WAA7C;AACA,MAAA,KAAK,EAAC,aADN;AAEA,MAAA,IAAI,EAAC,MAFL;AAEY,MAAA,QAAQ,EAAE,KAAKsE,0BAAL,CAAgCc,IAAhC,CAAqC,IAArC,CAFtB;AAGA,MAAA,UAAU,EAAE;AAAEC,QAAAA,GAAG,EAAE,IAAIjD,IAAJ,GAAWkD,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC;AAAP,OAHZ;AAIA,MAAA,eAAe,EAAE;AACfC,QAAAA,MAAM,EAAE;AADO,OAJjB;AAOA,MAAA,KAAK,EAAE,KAAK/F,KAAL,CAAWD,MAAX,CAAkBM,SAAlB,IAA6B,EAA7B,GAAgC,KAAhC,GAAsC,IAP7C;AAQS,MAAA,UAAU,EAAE,KAAKL,KAAL,CAAWD,MAAX,CAAkBM,SARvC;AASS,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,SAAX,IAAwB,EATxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAzBa,eAuCb,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,EAAE,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAG,SAA5B;AAAsC,MAAA,EAAE,EAAG,SAA3C;AACA,MAAA,KAAK,EAAC,UADN;AAEA,MAAA,IAAI,EAAC,MAFL;AAEY,MAAA,QAAQ,EAAE,KAAK0E,wBAAL,CAA8BY,IAA9B,CAAmC,IAAnC,CAFtB;AAGA,MAAA,UAAU,EAAE;AAAEC,QAAAA,GAAG,EAAE,IAAIjD,IAAJ,GAAWkD,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC;AAAP,OAHZ;AAIA,MAAA,eAAe,EAAE;AACfC,QAAAA,MAAM,EAAE;AADO,OAJjB;AAOA,MAAA,KAAK,EAAE,KAAK/F,KAAL,CAAWD,MAAX,CAAkBO,OAAlB,IAA2B,EAA3B,GAA8B,KAA9B,GAAoC,IAP3C;AAQS,MAAA,UAAU,EAAE,KAAKN,KAAL,CAAWD,MAAX,CAAkBO,OARvC;AASC,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM,OAAX,IAAsB,EAT9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAvCa,CADA,eAsDb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtDa,EAwDf,KAAKN,KAAL,CAAWO,uBAAX,KAAqC,UAAtC,iBACG;AAAK,MAAA,KAAK,EAAE;AAACkF,QAAAA,OAAO,EAAE,MAAV;AAAmBO,QAAAA,cAAc,EAAC,QAAlC;AAA4CC,QAAAA,UAAU,EAAC;AAAvD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzDa,eA2DlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3DkB,EA6Df,KAAKjG,KAAL,CAAWO,uBAAX,KAAqC,UAAtC,iBACA,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACW,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADX,eAEW,oBAAC,YAAD;AAAc,MAAA,WAAW,EAAE,IAA3B;AACE,MAAA,IAAI,EAAC,WADP;AACmB,MAAA,EAAE,EAAC,SADtB;AAEE,MAAA,OAAO,EAAE,KAAKP,KAAL,CAAWgE,YAFtB;AAGE,MAAA,QAAQ,EAAE,KAAKU,kBAAL,CAAwBiB,IAAxB,CAA6B,IAA7B,EAAmC,SAAnC,CAHZ;AAIE,MAAA,KAAK,EAAE,KAAK3F,KAAL,CAAWQ,OAAX,IAAsB,EAJ/B;AAKE,MAAA,KAAK,EAAE,KAAKR,KAAL,CAAWD,MAAX,CAAkBS,OAAlB,IAA2B,EAA3B,GAA8B,KAA9B,GAAoC,IAL7C;AAME,MAAA,UAAU,EAAE,KAAKR,KAAL,CAAWD,MAAX,CAAkBS,OANhC;AAOE,MAAA,GAAG,EAAE,KAAKR,KAAL,CAAWQ,OAPlB,CAQF;AARE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFX,CADH,CA9DgB,CADA,eAkFlB,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAC,UAAxC;AAAmD,MAAA,UAAU,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,IAAI,EAAC,OAAjD;AAAyD,MAAA,OAAO,EAAE,KAAKV,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADA,2BAIA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKmD,SAAtB;AAAkC,MAAA,OAAO,EAAC,WAA1C;AAAsD,MAAA,IAAI,EAAC,OAA3D;AAAmE,MAAA,KAAK,EAAC,SAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJA,CAlFkB,eAyFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzFkB,eAyFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzFa,eA0FlB,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,iBAArB;AAAwC,MAAA,IAAI,EAAE,KAAKjD,KAAL,CAAWF,MAAzD;AAAiE,MAAA,OAAO,EAAE0F,OAA1E;AAAmF,MAAA,OAAO,EAAEN,OAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1FkB,eA2FlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3FkB,eA6FlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7FkB,eA+FlB,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAC,UAAxC;AAAmD,MAAA,UAAU,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,IAAI,EAAC,OAAjD;AAAyD,MAAA,OAAO,EAAE,KAAK7C,QAAvE;AACA,MAAA,QAAQ,EAAE,KAAKrC,KAAL,CAAWE,UAAX,KAAwB,CAAxB,GAA0B,IAA1B,GAA+B,KADzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,2BAKA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,IAAI,EAAC,OAAjD;AAAyD,MAAA,OAAO,EAAE,KAAKoC,IAAvE;AACA,MAAA,QAAQ,EAAE,KAAKtC,KAAL,CAAWF,MAAX,CAAkBkD,MAAlB,IAA0B,EAA1B,GAA6B,IAA7B,GAAkC,KAD5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALA,CA/FkB,eAwGlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxGkB,eAyGlB,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,KAA1B;AAAgC,MAAA,OAAO,EAAC,UAAxC;AAAoD,MAAA,EAAE,EAAC,KAAvD;AAA6D,MAAA,UAAU,EAAC,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAS,MAAA,OAAO,EAAC,WAAjB;AAA6B,MAAA,IAAI,EAAC,QAAlC;AACI,MAAA,IAAI,EAAC,OADT;AACiB,MAAA,KAAK,EAAC,SADvB;AAEI,MAAA,OAAO,EAAE,KAAKjB,cAFlB;AAGI,MAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWF,MAAX,CAAkBkD,MAAlB,KAA2B,CAA3B,GAA6B,IAA7B,GAAkC,KAHhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,CAzGkB,CADR;AAqHD;;AAtUkC;AAyU3C,eAAerD,WAAf,C,CAqsourcesContent":["import React, { Component } from 'react'  \r\n//import axios from 'axios';  \r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n//import ReactHTMLTableToExcel from 'react-html-table-to-excel';  \r\nimport { fetchCentersOfUser, fetchCentersDetails,getReports,downloadReports,fetchBatchDetails} from './../util/api';\r\nimport { isNotEmpty,isNotZero } from './../util/validation';\r\nimport AlertDialog from './../util/AlertDialog';\r\nimport UserContext from '../components/GolbalContext'\r\nimport Button from '@material-ui/core/Button';\r\nimport { FormControl , InputLabel,FormControlLabel, Input, Grid , RadioGroup, Radio, TextField}  from '@material-ui/core';\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { serviceEndPoint } from './../util/serviceEndPoint';\r\nexport class ExportExcel extends Component {  \r\n        constructor(props) {  \r\n                super(props)  \r\n                this.state = {  \r\n                  report:[],pageNumber:1,pageSize:20,ProductData: []  ,center: [], centerId: '', userScope: [], \r\n                        errors: {centerName:''},reportName:'',\r\n                        reportOptions :[\r\n                          { label: \"Mobilisation\",value :\"Mobilised\"},\r\n                          { label: \"Enrolled\", value :\"Enrolled\"}\r\n                        ],startDate:'',endDate:'',studentEngagementStatus:'',\r\n                        errors: {studentEngagementStatus: '',centerId:'',startDate: '',endDate:'',batchId:''},\r\n                        batchDetails:[],batchId:0\r\n                      }\r\n\r\n                let centerId = [];\r\n                let currentComponent = this;\r\n\r\n                fetchCentersOfUser(UserContext.userid).then((jsondata) => {\r\n                  let userJsonObjects = JSON.parse(jsondata.data);\r\n                  currentComponent.setState({ userScope: userJsonObjects });\r\n                  userJsonObjects.forEach(user => {\r\n                    centerId.push({ \"id\": user.centerId });\r\n                  })\r\n                }).then(function (result) {\r\n                  let centerDetails = [];\r\n                  fetchCentersDetails(JSON.stringify(centerId)).then((jsondata) => {\r\n                    let centerObjects = JSON.parse(jsondata.data);\r\n                    centerObjects.forEach(center => {\r\n                      centerDetails.push({ label: center.name, value: center.id });\r\n                    })\r\n                    currentComponent.setState({ center: centerDetails });\r\n                  });\r\n            \r\n            \r\n                })\r\n            \r\n        }  \r\n        \r\n         report =()=>{\r\n          let errors = this.state.errors;\r\n          if(this.validateForm(errors)){ \r\n    getReports(this.state.pageNumber,this.state.pageSize,this.state.centerId,this.state.startDate,this.state.endDate,this.state.studentEngagementStatus,this.state.batchId).then((jsondata) => {\r\n    let reportData=[];\r\n      let objects = JSON.parse(jsondata.data);\r\n    objects.forEach(object => {\r\n      reportData.push({\"engagementId\":object.engagementId,\"Name\":object.firstName+\" \"+object.lastName,\"PrimaryContactNumber\":object.primaryContactNumber,\r\n      \"studentEngagementStatus\":object.studentEngagementStatus,\"studentCreatedOn\":object.studentCreatedOn,\r\n      \"enrolledDate\":object.enrolledDate,\"batchName\":object.batchName,\r\n      \"aadharNo\":object.aadharNo.replace(/\\d(?=\\d{4})/g, \"*\"),\r\n    \"dob\":object.dob,\"maritalStatus\":object.maritalStatus});\r\n    })\r\n    this.setState({ report: reportData });\r\n  });\r\n}    \r\n   }       \r\n     \r\n\r\n   downloadReport=()=>{\r\n    downloadReports(this.state.pageNumber,this.state.pageSize,this.state.centerId,this.state.startDate,this.state.endDate,this.state.studentEngagementStatus,this.state.batchId).then((jsondata) => {\r\n        let object = JSON.parse(jsondata.data);\r\n        var url=serviceEndPoint.mdmdownloadDocument+object[0].reportName+\"\"; \r\n        window.open(url, \"_blank\");\r\n    });\r\n\r\n   }\r\n\r\n\r\n   \r\n   previous =()=>{\r\n     let previous=this.state.pageNumber-1;      \r\nthis.setState({pageNumber:previous});\r\nthis.report()\r\n        }       \r\n           \r\n\r\n        next =()=>{\r\n          let next=this.state.pageNumber+1;      \r\n     this.setState({pageNumber:next});\r\n     this.report()\r\n             }    \r\n\r\n\r\n             handleSelectChange(selectname, event) {  \r\n              this.setState({[selectname]:event})\r\n            //  this.validate(selectname,event);\r\n             if(selectname===\"centerId\"){\r\n              this.batchDetails(event);\r\n             } \r\n            }\r\n            \r\n            handleStartDateInputChange(event) {\r\n              const target = event.target;\r\n              const value =  target.value;\r\n              const name = target.name;\r\n              this.setState({[name]: value})\r\n              \r\n            // if(this.state.endDate===\"\"){\r\n            // var d = new Date(value);   \r\n            // d.setMonth(d.getMonth() + 6); \r\n            // let endDate=d.getFullYear()+\"-\"+('0' +d.getMonth()).slice(-2)+\"-\"+('0' +d.getDate()).slice(-2);\r\n            // this.setState({endDate:endDate});\r\n            // }\r\n          }\r\n\r\n            handleEndDateInputChange(event) {\r\n              const target = event.target;\r\n              const value =  target.value;\r\n              const name = target.name;\r\n              this.setState({[name]: value})\r\n            //  this.validate(name,value);\r\n\r\n            //   if(this.state.startDate===\"\"){\r\n            // var d = new Date(value);   \r\n            // d.setMonth(d.getMonth() - 6); \r\n            // let startDate=d.getFullYear()+\"-\"+('0' +d.getMonth()).slice(-2)+\"-\"+('0' +d.getDate()).slice(-2);\r\n            // this.setState({startDate:startDate});  \r\n            //   }\r\n          }\r\n\r\n            batchDetails(centerId){\r\n            fetchBatchDetails(centerId).then((jsondata)=>{ \r\n              let batchs=[];\r\n              let  objects = JSON.parse(jsondata.data);\r\n              objects.forEach(object => {\r\n                batchs.push({ label: object.batchName, value: object.batchId });\r\n              })\r\n              this.setState({batchDetails:batchs});\r\n             })\r\n            }\r\n\r\n            validate = (name,value)=>{\r\n              let errors = this.state.errors;\r\n              switch (name) {\r\n                case 'centerId': errors.centerId =isNotEmpty(value);\r\n                  break;\r\n                case 'studentEngagementStatus': errors.studentEngagementStatus = isNotEmpty(value);\r\n                  break;\r\n                case 'startDate': errors.startDate =isNotEmpty(value)!=\"\"?isNotEmpty(value):this.inMonths(new Date(this.state.startDate),new Date(this.state.endDate))<=13?\"\":\"dates gap should not be more than 12 months\";\r\n                  break;\r\n                case 'endDate': errors.endDate =  isNotEmpty(value);\r\n                  break;\r\n                  case 'batchId': errors.batchId =  isNotZero(value);\r\n                  break;\r\n                default:\r\n                break;\r\n            }\r\n             this.setState({errors});\r\n            }\r\n\r\n            validateForm = (errors) => {\r\n              errors.centerId=\"\";\r\n              errors.studentEngagementStatus=\"\";\r\n              errors.startDate=\"\";\r\n              errors.endDate=\"\";\r\n              errors.batchId=0;\r\n              this.setState({errors});\r\n              this.validate(\"centerId\",this.state.centerId);\r\n              this.validate(\"studentEngagementStatus\",this.state.studentEngagementStatus);\r\n               if(this.state.studentEngagementStatus===\"Mobilised\"){\r\n              this.validate(\"startDate\",this.state.startDate);\r\n              this.validate(\"endDate\",this.state.endDate);\r\n               }\r\n               if(this.state.studentEngagementStatus===\"Enrolled\"){\r\n                 if(this.state.batchId===0){\r\n                  this.validate(\"startDate\",this.state.startDate);\r\n                  this.validate(\"endDate\",this.state.endDate);\r\n                 }\r\n                 else{\r\n                  this.validate(\"batchId\",this.state.batchId);\r\n                 }              \r\n              }\r\n\r\n              let valid = true;\r\n              Object.values(this.state.errors).forEach(\r\n                // if we have an error string set valid to false\r\n                (val) => val.length > 0 && (valid = false)\r\n              );\r\n              return valid;\r\n            }\r\n            resetForm = () => {\r\n              this.setState({\"centerId\":''});\r\n              this.setState({\"studentEngagementStatus\":''});\r\n              this.setState({\"startDate\":''});\r\n              this.setState({\"endDate\":''});\r\n              this.setState({\"batchId\":0});\r\n              this.setState({\"report\":[]});\r\n            }\r\n\r\n             inMonths=(d1, d2)=> {\r\n              var d1Y = d1.getFullYear();\r\n              var d2Y = d2.getFullYear();\r\n              var d1M = d1.getMonth();\r\n              var d2M = d2.getMonth();\r\n              return (d2M+12*d2Y)-(d1M+12*d1Y);\r\n          }\r\n          \r\n          \r\n        render() {  \r\n          const options = {selectableRows : false,rowsPerPage: 20,print: false,download: false,\r\n            pagination:false}\r\n          const columns = [{label: 'Engagement Id',name:\"engagementId\"},\r\n          {name:\"Name\"},\r\n          {name:\"PrimaryContactNumber\"},\r\n          {label: 'Status', name: 'studentEngagementStatus'},\r\n          {label: 'Mobilised Date', name: 'studentCreatedOn'},\r\n          {label: 'Enrolled Date', name: 'enrolledDate'},\r\n          {label: 'Batch Name', name: 'batchName'}, \r\n          {name:\"aadharNo\",options: {display: false}},{name:\"dob\",options: {display: false}},{name:\"maritalStatus\",options: {display: false}}]\r\n\r\n          return (  \r\n                  <div style = {{ width : '100%' }}>\r\n                  <form  method=\"get\" id=\"\">\r\n                  <Grid container spacing={2}>\r\n                   <Grid item xs={5}>\r\n                <InputLabel shrink={true} >Center Name</InputLabel>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"centerName\" id=\"centerName\"\r\n                  options={this.state.center}\r\n                  onChange={this.handleSelectChange.bind(this, 'centerId')}\r\n                  value={this.state.centerId || '' } \r\n                  error={this.state.errors.centerId==''?false:true}\r\n                  helperText={this.state.errors.centerId}\r\n                  key={this.state.centerId}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={5}>\r\n                <InputLabel shrink={true} >Report Name</InputLabel>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"studentEngagementStatus\" id=\"studentEngagementStatus\"\r\n                  options={this.state.reportOptions}\r\n                 onChange={this.handleSelectChange.bind(this, 'studentEngagementStatus')}\r\n                  value={this.state.studentEngagementStatus || '' } \r\n                  error={this.state.errors.studentEngagementStatus==''?false:true}\r\n                  helperText={this.state.errors.studentEngagementStatus}\r\n                  key={this.state.studentEngagementStatus}/>\r\n              </Grid>       \r\n\r\n     <Grid item xs={12} sm={5} >\r\n         <TextField id=\"date\" name = \"startDate\" id = \"startDate\" \r\n         label=\" Start Date\"\r\n         type=\"date\" onChange={this.handleStartDateInputChange.bind(this)}\r\n         inputProps={{ max: new Date().toISOString().slice(0,10)}}\r\n         InputLabelProps={{\r\n           shrink: true,\r\n         }} \r\n         error={this.state.errors.startDate==''?false:true}\r\n                  helperText={this.state.errors.startDate}   \r\n                  value={this.state.startDate || '' }    \r\n         />\r\n\r\n     </Grid>\r\n     <Grid item xs={12} sm={5}>\r\n         <TextField id=\"date\" name = \"endDate\" id = \"endDate\" \r\n         label=\"End Date\"\r\n         type=\"date\" onChange={this.handleEndDateInputChange.bind(this)}\r\n         inputProps={{ max: new Date().toISOString().slice(0,10)}}\r\n         InputLabelProps={{\r\n           shrink: true,\r\n         }} \r\n         error={this.state.errors.endDate==''?false:true}\r\n                  helperText={this.state.errors.endDate}\r\n          value={this.state.endDate || '' } \r\n         />\r\n     </Grid>\r\n     </Grid>\r\n     <br/>\r\n     { \r\n  (this.state.studentEngagementStatus==='Enrolled') &&                     \r\n     <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>(OR)</div>\r\n     }\r\n<br/>\r\n     { \r\n  (this.state.studentEngagementStatus==='Enrolled') &&                     \r\n  <Grid container spacing={2}>\r\n     <Grid item xs={5}>\r\n                <InputLabel shrink={true} >Batch Name</InputLabel>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"'batchId'\" id=\"batchId\"\r\n                  options={this.state.batchDetails}\r\n                  onChange={this.handleSelectChange.bind(this, 'batchId')}\r\n                  value={this.state.batchId || '' } \r\n                  error={this.state.errors.batchId==''?false:true}\r\n                  helperText={this.state.errors.batchId}\r\n                  key={this.state.batchId}\r\n              //    disabled={this.state.studentEngagementStatus!='Enrolled'}  \r\n                />\r\n              </Grid>\r\n              </Grid>\r\n              \r\n        }\r\n \r\n</form>\r\n<Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n<Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.report} \r\n>View Report</Button>\r\n&nbsp;&nbsp;\r\n<Button onClick={this.resetForm}  variant=\"contained\" size=\"small\" color=\"primary\">Reset</Button>\r\n</Grid>\r\n\r\n<br/><br/>\r\n<MUIDataTable title={\"Student Details\"} data={this.state.report} columns={columns} options={options} />\r\n<br/>\r\n\r\n<br/>\r\n\r\n<Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n<Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.previous} \r\ndisabled={this.state.pageNumber===1?true:false}\r\n>Previous</Button>\r\n&nbsp;&nbsp;\r\n<Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.next} \r\ndisabled={this.state.report.length<=20?true:false}\r\n>Next</Button>\r\n</Grid>\r\n<br/>\r\n<Grid container direction=\"row\" justify=\"flex-end\"  id=\"btn\" alignItems=\"flex-end\">  \r\n<Button  variant=\"contained\" type=\"submit\"   \r\n    size=\"small\" color=\"primary\"\r\n    onClick={this.downloadReport} \r\n    disabled={this.state.report.length===0?true:false}\r\n>\r\nDownload Excel\r\n</Button>\r\n</Grid>\r\n</div>\r\n                )  \r\n        }  \r\n}  \r\n\r\nexport default ExportExcel  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import { green } from '@material-ui/core/colors';\r\n// import FormGroup from '@material-ui/core/FormGroup';\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n// import Favorite from '@material-ui/icons/Favorite';\r\n// import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n// import { FormControl , InputLabel, Input, Grid , RadioGroup, Radio, TextField}  from '@material-ui/core';\r\n// import { SingleSelect } from \"react-select-material-ui\";\r\n\r\n// const GreenCheckbox = withStyles({\r\n//   root: {\r\n//     color: green[400],\r\n//     '&$checked': {\r\n//       color: green[600],\r\n//     },\r\n//   },\r\n//   checked: {},\r\n// })((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\n// export default function CheckboxLabels() {\r\n//   const [state, setState] = React.useState({\r\n//     checkedA: true,\r\n//     checkedB: true,\r\n//     checkedF: true,\r\n//     checkedG: true,\r\n//   });\r\n \r\n//   const handleChange = (event) => {\r\n//     setState({ ...state, [event.target.name]: event.target.checked });\r\n//   };\r\n\r\n//   return (\r\n//     <FormGroup row>\r\n//   <Grid item xs={12} sm={4} alignContent=\"center\"  >\r\n//      <SingleSelect\r\n//               placeholder = \"Select Report\" required\r\n             \r\n//               //options={this.myData.reportType}\r\n            \r\n//             />\r\n//             </Grid>\r\n// <Grid item xs={12} sm={3} id = \"\">\r\n//          <TextField id=\"date\" name = \"\" id = \"\"\r\n//          label=\"Start Date\" \r\n       \r\n//          type=\"date\"\r\n//          inputProps={{ max: new Date().toISOString().slice(0,10)}}\r\n//          InputLabelProps={{\r\n//            shrink: true,\r\n//          }} />\r\n\r\n//      </Grid>\r\n\r\n//      <Grid item xs={12} sm={3} id = \"\">\r\n//          <TextField id=\"date\" name = \"\" id = \"\"\r\n//          label=\"End Date\" \r\n//          type=\"date\"\r\n//          inputProps={{ max: new Date().toISOString().slice(0,10)}}\r\n//          InputLabelProps={{\r\n//            shrink: true,\r\n//          }} />\r\n\r\n//      </Grid>\r\n//      <Grid item xs={12} sm={3} id = \"\"></Grid>\r\n//      <br></br>\r\n     \r\n\r\n//      <FormControlLabel\r\n//         control={\r\n//           <Checkbox\r\n//            // checked={state.checkedB}\r\n//             onChange={handleChange}\r\n//             name=\"checkedB\"\r\n//             color=\"primary\"\r\n//           />\r\n//         }\r\n//         label=\"First Name\"\r\n//       />\r\n\r\n\r\n//       <FormControlLabel\r\n//         control={\r\n//           <Checkbox\r\n//            // checked={state.checkedB}\r\n//             onChange={handleChange}\r\n//             name=\"checkedB\"\r\n//             color=\"primary\"\r\n//           />\r\n//         }\r\n//         label=\"Last Name\"\r\n//       />\r\n//       <FormControlLabel\r\n//         control={\r\n//           <Checkbox\r\n//           //  checked={state.checkedB}\r\n//             onChange={handleChange}\r\n//             name=\"checkedB\"\r\n//             color=\"primary\"\r\n//           />\r\n//         }\r\n//         label=\"Eng ID\"\r\n//       />\r\n\r\n// <FormControlLabel\r\n//       control={\r\n//         <Checkbox\r\n//          // checked={state.checkedB}\r\n//           onChange={handleChange}\r\n//           name=\"checkedB\"\r\n//           color=\"primary\"\r\n//         />\r\n//       }\r\n//       label=\"DOB\"\r\n//     />\r\n//     <FormControlLabel\r\n//         control={\r\n//           <Checkbox\r\n//             //checked={state.checkedB}\r\n//             onChange={handleChange}\r\n//             name=\"checked\"\r\n//             color=\"primary\"\r\n//           />\r\n//         }\r\n//         label=\"Gender\"\r\n//       />\r\n     \r\n//     </FormGroup>\r\n    \r\n\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}