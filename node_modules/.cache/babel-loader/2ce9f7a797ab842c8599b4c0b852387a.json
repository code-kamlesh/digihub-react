{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tata_Strive\\\\WebApplication\\\\digiHub\\\\trunk\\\\digiHubWeb\\\\src\\\\views\\\\Settings.js\";\nimport React, { Component } from 'react';\nimport { InputLabel, Grid, Button } from '@material-ui/core';\nimport { fetchCentersOfUser, fetchCentersDetails, fetchRoleDetails, setDefaultSettings, fetchCenterProgramMapping, fetchProgram, fetchComponentsByProgramIdAndRoleId } from './../util/api';\nimport { isNotEmpty } from './../util/validation';\nimport { SingleSelect } from \"react-select-material-ui\";\nimport AlertDialog from './../util/AlertDialog';\nimport UserContext from '../components/GolbalContext';\nimport ComponentVisibility from './../util/ComponentVisibility';\nconst alertDialogOptions = {\n  message: ''\n};\nexport default class Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveDefaultSettings = event => {\n      event.preventDefault();\n\n      if (this.validateForm(this.state.errors)) {\n        this.setState({\n          alertDialogFlag: false\n        });\n        alertDialogOptions.message = /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"green\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 32\n          }\n        }, \"Default Settings Saved Sucessfully\");\n        setDefaultSettings(UserContext.userid, this.state.roleId, this.state.centerId, this.state.programId).then(jsondata => {\n          this.setState({\n            alertDialogFlag: true\n          });\n          UserContext.centerId = this.state.centerId;\n          UserContext.roleid = this.state.roleId;\n          UserContext.defaultRoleId = this.state.roleId;\n          UserContext.defaultProgramId = this.state.programId;\n          let roleId = [];\n          roleId.push({\n            \"id\": this.state.roleId\n          });\n          fetchRoleDetails(JSON.stringify(roleId)).then(roleData => {\n            let roleObjects = JSON.parse(roleData.data);\n            UserContext.roleName = roleObjects[0].name;\n          });\n          let programId = [];\n          programId.push({\n            \"id\": this.state.programId\n          });\n          fetchProgram(JSON.stringify(programId)).then(jsondata => {\n            let jsonobjects = JSON.parse(jsondata.data);\n            UserContext.programName = jsonobjects[0].name;\n          });\n          Object.keys(ComponentVisibility).forEach(function (key) {\n            delete ComponentVisibility[key];\n          });\n          fetchComponentsByProgramIdAndRoleId(UserContext.defaultProgramId, UserContext.roleid).then(jsondata => {\n            let jsonobjects = JSON.parse(jsondata.data);\n            jsonobjects.map(item => {\n              ComponentVisibility[item.componentName] = item.isVisibility;\n            });\n          });\n          let centerId = [];\n          centerId.push({\n            \"id\": this.state.centerId\n          });\n          fetchCentersDetails(JSON.stringify(centerId)).then(centerData => {\n            let centerObjects = JSON.parse(centerData.data);\n            UserContext.centerName = centerObjects[0].name;\n            UserContext.assessmentCenterId = centerObjects[0].assessmentCenterId;\n            UserContext.mode;\n            this.props.history.push('/dashboard');\n          });\n        });\n      }\n    };\n\n    this.validate = (name, value) => {\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'centerName':\n          errors.centerName = isNotEmpty(value);\n          break;\n\n        case 'roleName':\n          errors.roleName = isNotEmpty(value);\n          break;\n\n        case 'programId':\n          errors.programName = isNotEmpty(value);\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors\n      });\n    };\n\n    this.validateForm = errors => {\n      this.validate(\"centerName\", this.state.centerId);\n      this.validate(\"roleName\", this.state.roleId);\n      this.validate(\"programId\", this.state.programId);\n      let valid = true;\n      Object.values(errors).forEach( // if we have an error string set valid to false\n      val => val.length > 0 && (valid = false));\n      return valid;\n    };\n\n    this.state = {\n      center: [],\n      role: [],\n      centerId: '',\n      userScope: [],\n      roleId: '',\n      errors: {\n        centerName: '',\n        roleName: '',\n        programName: ''\n      },\n      program: [],\n      programId: ''\n    };\n    let _centerId = [];\n    let currentComponent = this;\n    fetchCentersOfUser(UserContext.userid).then(jsondata => {\n      let userJsonObjects = JSON.parse(jsondata.data);\n      currentComponent.setState({\n        userScope: userJsonObjects\n      });\n      userJsonObjects.forEach(user => {\n        _centerId.push({\n          \"id\": user.centerId\n        });\n      });\n    }).then(function (result) {\n      let centerDetails = [];\n      fetchCentersDetails(JSON.stringify(_centerId)).then(jsondata => {\n        let centerObjects = JSON.parse(jsondata.data);\n        centerObjects.forEach(center => {\n          centerDetails.push({\n            label: center.name,\n            value: center.id\n          });\n        });\n        currentComponent.setState({\n          center: centerDetails\n        });\n      });\n    });\n  }\n\n  handleCenterChange(selectname, event) {\n    this.setState({\n      programId: \"\"\n    });\n    this.setState({\n      roleId: \"\"\n    });\n    let roleId = [];\n    let itemsProcessed = 0;\n    let totalItems = this.state.userScope.length;\n    this.state.userScope.forEach(scope => {\n      itemsProcessed = itemsProcessed + 1;\n\n      if (event == scope.centerId) {\n        roleId.push({\n          \"id\": scope.roleMapId\n        });\n      }\n\n      if (itemsProcessed == totalItems) {\n        fetchRoleDetails(JSON.stringify(roleId)).then(jsondata => {\n          let roleDetails = [];\n          let roleObjects = JSON.parse(jsondata.data);\n          roleObjects.forEach(role => {\n            roleDetails.push({\n              label: role.name,\n              value: role.id\n            });\n          });\n          this.setState({\n            role: roleDetails\n          });\n        });\n      }\n    });\n    let programId = [];\n    let programDetails = [];\n    let programState = this;\n    fetchCenterProgramMapping(event).then(jsondata => {\n      let jsonobjects = JSON.parse(jsondata.data); //  alert(jsonobjects[1].programId+\"length is:\"+jsonobjects[0].programId);  \n      //  UserContext.programId = jsonobjects[0].programId;   \n\n      jsonobjects.forEach(program => {\n        programId.push({\n          \"id\": program.programId\n        });\n      }); // fetchProgram(JSON.stringify(programId)).then((jsondata)=>{              \n      //     let jsonobjects = JSON.parse(jsondata.data);   \n      //     jsonobjects.forEach(program => {\n      //       programDetails.push({ label: program.name, value: program.id });\n      //     })\n      //     this.setState({program:programDetails});\n      //  }) ; \n    }).then(function (result) {\n      fetchProgram(JSON.stringify(programId)).then(jsondata => {\n        let jsonobjects = JSON.parse(jsondata.data);\n        jsonobjects.forEach(program => {\n          programDetails.push({\n            label: program.name,\n            value: program.id\n          });\n        });\n        programState.setState({\n          program: programDetails\n        });\n      });\n    });\n    this.setState({\n      [selectname]: event\n    });\n  }\n\n  handleRoleChange(selectname, event) {\n    this.setState({\n      [selectname]: event\n    });\n  }\n\n  handleProgramChange(selectname, event) {\n    this.setState({\n      [selectname]: event\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      method: \"post\",\n      onSubmit: this.saveDefaultSettings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"roleBasedDisable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, \"Center Name\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"centerName\",\n      id: \"centerName\",\n      options: this.state.center,\n      onChange: this.handleCenterChange.bind(this, 'centerId'),\n      value: this.state.centerId || '',\n      helperText: this.state.errors.centerName,\n      error: this.state.errors.centerName == '' ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      for: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, \"Program\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"programId\",\n      id: \"programId\",\n      onChange: this.handleProgramChange.bind(this, 'programId'),\n      options: this.state.program,\n      value: this.state.programId || '',\n      helperText: this.state.errors.programName,\n      error: this.state.errors.programName == '' ? false : true,\n      key: this.state.programId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      shrink: true,\n      for: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, \"Role\"), /*#__PURE__*/React.createElement(SingleSelect, {\n      isClearable: true,\n      name: \"roleName\",\n      id: \"roleName\",\n      onChange: this.handleRoleChange.bind(this, 'roleId'),\n      options: this.state.role,\n      value: this.state.roleId || '',\n      helperText: this.state.errors.roleName,\n      error: this.state.errors.roleName == '' ? false : true,\n      key: this.state.roleId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-end\",\n      alignItems: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      type: \"submit\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    }, \"Update Settings\")))), this.state.alertDialogFlag && /*#__PURE__*/React.createElement(AlertDialog, {\n      message: alertDialogOptions.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 43\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/Tata_Strive/WebApplication/digiHub/trunk/digiHubWeb/src/views/Settings.js"],"names":["React","Component","InputLabel","Grid","Button","fetchCentersOfUser","fetchCentersDetails","fetchRoleDetails","setDefaultSettings","fetchCenterProgramMapping","fetchProgram","fetchComponentsByProgramIdAndRoleId","isNotEmpty","SingleSelect","AlertDialog","UserContext","ComponentVisibility","alertDialogOptions","message","Settings","constructor","props","saveDefaultSettings","event","preventDefault","validateForm","state","errors","setState","alertDialogFlag","color","userid","roleId","centerId","programId","then","jsondata","roleid","defaultRoleId","defaultProgramId","push","JSON","stringify","roleData","roleObjects","parse","data","roleName","name","jsonobjects","programName","Object","keys","forEach","key","map","item","componentName","isVisibility","centerData","centerObjects","centerName","assessmentCenterId","mode","history","validate","value","valid","values","val","length","center","role","userScope","program","currentComponent","userJsonObjects","user","result","centerDetails","label","id","handleCenterChange","selectname","itemsProcessed","totalItems","scope","roleMapId","roleDetails","programDetails","programState","handleRoleChange","handleProgramChange","render","width","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {InputLabel,Grid, Button } from '@material-ui/core';\r\nimport { fetchCentersOfUser, fetchCentersDetails, fetchRoleDetails,setDefaultSettings,fetchCenterProgramMapping,fetchProgram,fetchComponentsByProgramIdAndRoleId} from './../util/api';\r\nimport { isNotEmpty } from './../util/validation';\r\nimport { SingleSelect } from \"react-select-material-ui\";\r\nimport AlertDialog from './../util/AlertDialog';\r\nimport UserContext from '../components/GolbalContext'\r\nimport ComponentVisibility from './../util/ComponentVisibility';\r\nconst alertDialogOptions = {\r\n  message: ''\r\n}\r\nexport default class Settings extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { center: [], role: [], centerId: '', userScope: [],roleId:'', \r\n    errors: {centerName:'',roleName:'',programName:''},program:[],programId:'' \r\n  };\r\n    \r\n    let centerId = [];\r\n    let currentComponent = this;\r\n    fetchCentersOfUser(UserContext.userid).then((jsondata) => {\r\n      let userJsonObjects = JSON.parse(jsondata.data);\r\n      currentComponent.setState({ userScope: userJsonObjects });\r\n      userJsonObjects.forEach(user => {\r\n        centerId.push({ \"id\": user.centerId });\r\n      })\r\n    }).then(function (result) {\r\n      let centerDetails = [];\r\n      fetchCentersDetails(JSON.stringify(centerId)).then((jsondata) => {\r\n        let centerObjects = JSON.parse(jsondata.data);\r\n        centerObjects.forEach(center => {\r\n          centerDetails.push({ label: center.name, value: center.id });\r\n        })\r\n        currentComponent.setState({ center: centerDetails });\r\n      });\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n  }\r\n  handleCenterChange(selectname, event) {\r\n    this.setState({programId:\"\"});\r\n    this.setState({roleId:\"\"});\r\n    let roleId = [];\r\n    let itemsProcessed = 0;\r\n    let totalItems = this.state.userScope.length;\r\n    this.state.userScope.forEach(scope => {\r\n      itemsProcessed = itemsProcessed + 1;\r\n      if (event == scope.centerId) {\r\n        roleId.push({ \"id\": scope.roleMapId });\r\n      }\r\n      if (itemsProcessed == totalItems) {\r\n        fetchRoleDetails(JSON.stringify(roleId)).then((jsondata) => {\r\n          let roleDetails = [];\r\n          let roleObjects = JSON.parse(jsondata.data);\r\n          roleObjects.forEach(role => {\r\n            roleDetails.push({ label: role.name, value: role.id });\r\n          })\r\n          this.setState({ role: roleDetails });\r\n        });\r\n\r\n      }\r\n    });\r\n\r\n    \r\n    let programId = [];\r\n    let programDetails = [];\r\n    let programState = this;\r\n    fetchCenterProgramMapping(event).then((jsondata)=>{   \r\n                \r\n      let jsonobjects = JSON.parse(jsondata.data); \r\n    //  alert(jsonobjects[1].programId+\"length is:\"+jsonobjects[0].programId);  \r\n    //  UserContext.programId = jsonobjects[0].programId;   \r\n      jsonobjects.forEach(program => {\r\n        programId.push({ \"id\":program.programId});\r\n      })\r\n     \r\n      // fetchProgram(JSON.stringify(programId)).then((jsondata)=>{              \r\n      //     let jsonobjects = JSON.parse(jsondata.data);   \r\n      //     jsonobjects.forEach(program => {\r\n      //       programDetails.push({ label: program.name, value: program.id });\r\n      //     })\r\n      //     this.setState({program:programDetails});\r\n      //  }) ; \r\n   }).then(function (result) {\r\n    fetchProgram(JSON.stringify(programId)).then((jsondata)=>{              \r\n      let jsonobjects = JSON.parse(jsondata.data);   \r\n      jsonobjects.forEach(program => {\r\n        programDetails.push({ label: program.name, value: program.id });\r\n      })\r\n      programState.setState({program:programDetails});\r\n   })\r\n  }); \r\n\r\n\r\n  this.setState({[selectname]:event});\r\n  }\r\n\r\n  handleRoleChange(selectname, event) {\r\n    this.setState({[selectname]:event});\r\n  }\r\n\r\n  handleProgramChange(selectname, event) {\r\n    this.setState({[selectname]:event});\r\n  }\r\n\r\n\r\n  saveDefaultSettings = (event) => {\r\n    event.preventDefault();\r\n    if(this.validateForm(this.state.errors)){\r\n    this.setState({alertDialogFlag:false});\r\n    alertDialogOptions.message=<span style={{color:\"green\"}}>Default Settings Saved Sucessfully</span>;  \r\n    setDefaultSettings(UserContext.userid,this.state.roleId,this.state.centerId,this.state.programId).then((jsondata) => {\r\n      this.setState({alertDialogFlag:true});\r\n      UserContext.centerId = this.state.centerId;\r\n      UserContext.roleid = this.state.roleId;    \r\n      UserContext.defaultRoleId=this.state.roleId;\r\n      UserContext.defaultProgramId=this.state.programId;\r\n      let roleId = [];\r\n      roleId.push({ \"id\": this.state.roleId});\r\n      fetchRoleDetails(JSON.stringify(roleId)).then((roleData) => {\r\n        let roleObjects = JSON.parse(roleData.data);    \r\n        UserContext.roleName = roleObjects[0].name;    \r\n      });\r\n      let programId = [];\r\n      programId.push({ \"id\":this.state.programId});\r\n      fetchProgram(JSON.stringify(programId)).then((jsondata)=>{              \r\n        let jsonobjects = JSON.parse(jsondata.data);     \r\n        UserContext.programName=jsonobjects[0].name;\r\n     });\r\n Object.keys(ComponentVisibility).forEach(function(key) { delete ComponentVisibility[key]; });\r\n fetchComponentsByProgramIdAndRoleId(UserContext.defaultProgramId,UserContext.roleid).then((jsondata)=>{              \r\n  let jsonobjects = JSON.parse(jsondata.data);  \r\n   jsonobjects.map(item => {\r\n      ComponentVisibility[item.componentName] = item.isVisibility;\r\n      });\r\n  }) ; \r\n\r\n      let centerId = [];\r\n      centerId.push({ \"id\": this.state.centerId});\r\n\r\n      fetchCentersDetails(JSON.stringify(centerId)).then((centerData) => {\r\n        let centerObjects = JSON.parse(centerData.data);              \r\n        UserContext.centerName = centerObjects[0].name;  \r\n        UserContext.assessmentCenterId = centerObjects[0].assessmentCenterId;\r\n        UserContext.mode\r\n        this.props.history.push('/dashboard');\r\n      });\r\n      \r\n    });\r\n  }\r\n  }\r\n\r\n\r\n  validate = (name,value)=>{\r\n    let errors = this.state.errors;\r\n    switch (name) {      \r\n      case 'centerName':   errors.centerName = isNotEmpty(value);\r\n      break;\r\n      case 'roleName':   errors.roleName = isNotEmpty(value);\r\n      break;\r\n      case 'programId':   errors.programName = isNotEmpty(value);\r\n      break;\r\n      default:\r\n      break;\r\n  }\r\n   this.setState({errors});\r\n  }\r\n\r\n  validateForm = (errors) => {\r\n    this.validate(\"centerName\",this.state.centerId);\r\n    this.validate(\"roleName\",this.state.roleId);  \r\n    this.validate(\"programId\",this.state.programId);  \r\n\r\n\r\n    let valid = true;\r\n    Object.values(errors).forEach(\r\n      // if we have an error string set valid to false\r\n      (val) => val.length > 0 && (valid = false)\r\n    );\r\n    return valid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n\r\n\r\n        <form method=\"post\" onSubmit={this.saveDefaultSettings}>\r\n          <fieldset id=\"roleBasedDisable\">\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <InputLabel shrink={true} >Center Name</InputLabel>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"centerName\" id=\"centerName\"\r\n                  options={this.state.center}\r\n                  onChange={this.handleCenterChange.bind(this, 'centerId')}\r\n                  value={this.state.centerId || '' } \r\n                  helperText={this.state.errors.centerName}  error={this.state.errors.centerName==''?false:true}    \r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <InputLabel shrink={true} for=\"city\">Program</InputLabel>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"programId\" id=\"programId\"\r\n                  onChange={this.handleProgramChange.bind(this, 'programId')}\r\n                  options={this.state.program}\r\n                  value={this.state.programId || '' } \r\n                  helperText={this.state.errors.programName}  error={this.state.errors.programName==''?false:true}\r\n                  key={this.state.programId}\r\n                />\r\n              </Grid>\r\n\r\n\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <InputLabel shrink={true} for=\"city\">Role</InputLabel>\r\n                <SingleSelect isClearable={true}\r\n                  name=\"roleName\" id=\"roleName\"\r\n                  onChange={this.handleRoleChange.bind(this, 'roleId')}\r\n                  options={this.state.role}\r\n                  value={this.state.roleId || '' }   \r\n                  helperText={this.state.errors.roleName}  error={this.state.errors.roleName==''?false:true}  \r\n                  key={this.state.roleId}\r\n                />\r\n              </Grid>\r\n\r\n<br/><br/>\r\n            </Grid>\r\n            <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\r\n              <Button variant=\"contained\" size=\"small\" type=\"submit\" color=\"primary\" >Update Settings</Button>\r\n\r\n            </Grid>\r\n          </fieldset>\r\n        </form>\r\n\r\n        {\r\n          (this.state.alertDialogFlag) && <AlertDialog message={alertDialogOptions.message}></AlertDialog>\r\n        }\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}